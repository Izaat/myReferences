///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React App
React, Redux, Thunk, Firebase (Firestore data storage, authentications, cloud functions, hosting)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Planning the App
02. Setting Up                        **npx create-react-app reactapp, **npm install react-router-dom
03. Navbar
04. Dashboard
05. Project Summary Component
06. Project Details Component
07. Login and Signup Component
08. Create Project Form
09. Nav Links and CSS
10. Add Redux and combinedReducers    **npm install redux react-redux
11. Adding Dummy Beta
12. Async code with Redux / Thunk     **npm install redux-thunk
13. Create Firebase Project           **npm install firebase
14. Firestore Data & Collections
15. Connecting Redux to Firebase      **npm install react-redux-firebase redux-firestore
16. Adding Data to Firestore
17. Syncing Data with Firestore
18. Project Details Data
19. Firebase Authentication
20. Firebase Authentication with Redux
21. Logging users in
22. Logging users out
23. Tracking Authentication status
24. Waiting for Auth Ready
25. Route Guarding Part 1 (RouteGuard)
26. Route Guarding Part 2 (RouteGuard)
27. User Sign up (Firebase Auth)
28. User Profile Data
29. Adding Projects (Revisited)
30. Formatting Dates with Moment
31. Firestore Security Rules
32. Cloud Functions Intro and Setup
33. A Simple Cloud Function
34. Notification Component
35. Cloud Function Firestore Triggers
36. Cloud Function Auth Trigger
37. Showing Notifications
38. Ordering Firestore Data
39. Deploying to Firebase Hosting

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Planning the App
    
    App Structure >
        App (Root) >
            Navbar >
                Signed in links
                Signed out links
            Dashboard > /dashboard
                Project List
                Notifications
            Project Details > /project/:id
            Create Project > /create
            Sign in > /signin
            Sign up > /signup

    Backend Structure
        |-------------------------|---------------------|
        |   Client/Browser        |   Server/Firebase   |
        |-------------------------|---------------------|
        |                         | > Firestore db      |
        |   React App > Redux  >  | > Firebase Auth     |
        |                         | > Cloud Functions   |
        |-------------------------|---------------------|


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Setting Up

    Creating a react App project
        In VSCode Terminal, enter a desired folder (ie Folder ABCD)
        Type in "npx create-react-app reactapp"
        This will create a project in Folder ABCD (E:\ABCD\reactapp\)
        Enter "reactapp" folder and install React DOM. Type in "npm install react-router-dom"
            Once installed, remember to import "BrowserRouter" to App.js (See App.js)
        Once done, type in "npm start" to start app
        This will open a default react app in browser
        
        Use materializecss for the layout
            https://www.materializecss.com/getting-started.html
            From HTML Setup <head>
                IconFont
            From CDN    
                Compiled Minified CSS
                Compiled Minified Javascript
            Paste the CSS codes into ../reactapp/public/index.html (Bottom of the <head> tag, above <title> tag)   
            Paste the JS codes into ../reactapp/public/index.html (Inside of the <body> tag, at the bottom)     

        Create "components" folder in "src" folder and create 4 folders under "components" folder
        Refer to Topic 1 App Structure
            ../src/components/auth
                SignIn.js
                SignOut.js
            ../src/components/dashboard
                Dashboard.js
                Notifications.js
            ../src/components/layout
                Navbar.js
                SignedInLinks.js
                SignedOutLinks.js
            ../src/components/project
                CreateProject.js
                ProjectDetails.js
                ProjectList.js
                ProjectSummary.js                      //Will be nested with ProjectList.js
            
        Remove 
            ../src/App.test.js, 
            ../src/logo.svg, 
            ../src/App.css
            
        App.js
            Remove imports (ie logo and App.css)
            Remove header class

    App.js
        import React from 'react';
        import {BrowserRouter} from 'react-router-dom'  //After installing React DOM
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        <hi>ReactApp</h1>
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Navbar

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js
            Notifications.js
        src/components/layout
            Navbar.js
            SignedInLinks.js
            SignedOutLinks.js
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js
            ProjectSummary.js 
        src 
            App.js (Topic 2)

    Navbar.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import SignedInLinks from './SignedInLinks'
        import SignedOutLinks from './SignedOutLinks'
        
        const Navbar = () => {
            return (
                <nav className="nav-wrapper grey darken-3">
                    <div className="container">
                        <Link to='/' className="brand-logo">React App</Link>
                        <SignedInLinks />
                        <SignedOutLinks />
                    </div>
                </nav>
            )
        }
        export default Navbar

    App.js
        import React from 'react';
        import {BrowserRouter} from 'react-router-dom'
        import Navbar from './components/layout/Navbar'
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        //<hi>ReactApp</h1>
                        <Navbar />
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;

    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedInLinks = () => {
            return (
                <ul className="right">
                    <li><NavLink to ='/'>New Project</NavLink></li>
                    <li><NavLink to ='/'>Log Out</NavLink></li>
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>
                </ul>
            )
        }
        export default SignedInLinks

    SignedOutLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedOutLinks = () => {
            return (
                <ul className="right">
                    <li><NavLink to ='/'>Signup</NavLink></li>
                    <li><NavLink to ='/'>Login</NavLink></li>
                </ul>
            )
        }
        export default SignedOutLinks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Dashboard
    
    Read 8 points
    
    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js
            Notifications.js
        src/components/layout
            Navbar.js                     (Topic 3)
            SignedInLinks.js              (Topic 3)
            SignedOutLinks.js             (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js
            ProjectSummary.js 
        src 
            App.js                        (Topic 3)

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'                        //04. Import ProjectList file
        
        class Dashboard extends Component {
            render() {
                return(
                    <div className="dashboard container">
                        <div className="row">
                            //<div className="col s12 m6"></div>                //01. For small screens, 12 columns. Medium sized screen, 6 columns - Project on the Left
                            <div className="col s12 m6">
                                <ProjectList />                                 //05. Link to ProjectList
                            </div>
                            
                            //<div className="col s12 m5 offset-m1"></div>      //02. Medium size screen 5 columns where 1 is for spacing - Notifications on the right
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        export default Dashboard

    Notifications.js
        import React from 'react'
        
        const Notifications = () => {
            return (
                <div>
                    <p>Notifications</p>
                </div>
            )
        }
        export default Notifications

    ProjectList.js (Functional component)
        import React from 'react'

        const ProjectList = () => {
            return (
                <div className="project-list section">                              //03. Add 3 cards
                
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                </div>
            )
        }
        export default ProjectList

    App.js
        import React from 'react';
        //import {BrowserRouter} from 'react-router-dom'
        import {BrowserRouter, Switch, Route} from 'react-router-dom'              //07. Add Switch and Route
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard'                   //08. Import Dashboard
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        <Navbar />
                        //<Switch></Switch>                                        //06. For loading 1 route at a time
                        <Switch>
                            <Route path='/' component={Dashboard} />
                        </Switch> 
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Project Summary Component

    Nesting ProjectSummary.js to ProjectList.js
    Refer to the cards in ProjectList.js
    Instead of repeating the cards, ProjectSummary will use templates
    This will make it more modular
    ProjectSummary.js will be a functional component

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                  (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                     (Topic 3)
            SignedInLinks.js              (Topic 3)
            SignedOutLinks.js             (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js                (Topic 4)
            ProjectSummary.js 
        src 
            App.js                        (Topic 4)
    
    ProjectSummary.js                                            //01. Create the file as functional component
        import React from 'react'

        const ProjectSummary = () => {
            return (  
                <div className="card z-depth-0 project-summary">
                    <div className="card-content grey-text text-darken-3">
                        <span className="card-title">Project Title</span>
                        <p>Posted by ...</p>
                        <p className="grey-text">Date</p>
                    </div>
                </div>
            )
        }
        export default ProjectSummary

    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'            //02. Import ProjectSummary.js

        const ProjectList = () => {
            return (
                <div className="project-list section"> 
                    <ProjectSummary />                           //03. Replace the entire chuck of codes to a single line
                    <ProjectSummary />
                    <ProjectSummary />
                </div>
            )
        }
        export default ProjectList

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Project Details Component
    
    URL Routing for individual cards
    Intall the VSCode extension "ES7 React/Redux/GraphQL/ReactNative snippets" to VSCode
    
    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 4)
    
    ProjectDetails.js
        import React from 'react'
        
        //const ProjectDetails = () => {
        const ProjectDetails = (props) => {                                             //04. Grabs URL router property details from App.js
            //console.log(props);                                                       //05. For testing. This will show the prop properties in console
            const id = props.match.params.id;                                           //06. Stores prop properties as a variable named "id"
            return(
                <div className="container section project-details">
                    <div className="card z-depth-0">                                    //"z-depth-0 removes the drop shadow
                        <div className="card-content">
                            //<span className"card-title">Project Title</span>
                            <span className"card-title">Project Title - {id}</span>     //07. Prints out the id (coincides with URL id) number on screen
                            <p>Long long paragraph</p>
                        </div>
                        <div className="card-action gret lighten-4 grey-text">
                            <div>Posted by AuthorName</div>
                            <div>Today's date</div>
                        </div>
                    </div>
                </div>
            )
        }
        export default ProjectDetails

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails'                 //01. Import ProjectDetails.js
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                //<Route path='/' component={Dashboard} />
                                <Route exact path='/' component={Dashboard} />              //03. Added "exact" to avoid URL conflict with ProjectDetails URL path
                                <Route path='/project/:id' component={ProjectDetails} />    //02. Add ProjectDetails filepath
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Login and Signup Component

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 6)

    SignIn.js                                                      
        import React, {Component} from 'react'                                                         //01. Create SignIn.js file
        
        class SignIn extends Component {
            state = {
                email:'',                                                                              //08. Define state
                password:''
            }
            handleChange = (e) => {                                                                    //04. Add event 
                //console.log(e)
                this.setState({                                                                        //09. Add setState
                    //[e.target.id]                                                                    //10. This will capture any of the id (password/email) being updated first            
                    [e.target.id]: e.target.value                                                      //11. Retrieves the value of the update
                })
            }
            handleSubmit = (e) => {    
                //console.log(e)
                e.preventDefault();                                                                    //12. Prevent default refresh
                console.log(this.state);                                                               //13. Prints the current state to the console
            }
            render() {
                return(
                    <div className="container">
                        //<form onSubmit={} className="white">
                        <form onSubmit={this.handleSubmit} className="white">                           //05. Add handleSubmit event tag
                            <h5 className="grey-text text-darken-3">Sign In</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />          //06. Add handleChange event
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                //<input type="password" id="password" onChange={} />
                                <input type="password" id="password" onChange={this.handleChange} />    //07. Add handleChange event. Test app at this point
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Login</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default SignIn

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails' 
        import SignIn from './components/auth/SignIn'                                                     //02. Import SignIn
        import SignUp from './components/auth/SignUp'                                                     //18. Import SignUp
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                <Route exact path='/' component={Dashboard} /> 
                                <Route path='/project/:id' component={ProjectDetails} />  
                                <Route path='/signin' component={SignIn} />                               //03. Add signin component
                                <Route path='/signup' component={SignUp} />                               //19. Add signup component
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;

    SignUp.js                                                                                             //14. Copy paste from SignIn.js
        import React, {Component} from 'react'   
        
        class SignUp extends Component {
            state = {
                email: '',             
                password: '',
                firstName: '',                                                                            //15. Adds firstname and lastname
                lastName: ''
            }
            handleChange = (e) => {  
                this.setState({                 
                    [e.target.id]: e.target.value     
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();     
                console.log(this.state);  
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign Up</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">                                                   //16. Adds Lastname
                                <label htmlFor="firstName">First Name</label>
                                <input type="text" id="firstName" onChange={this.handleChange} /> 
                            </div>   
                            <div className="input-field">                                                   //17. Adds Lastname
                                <label htmlFor="lastName">Last Name</label>
                                <input type="text" id="lastName" onChange={this.handleChange} /> 
                            </div>                            
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Sign Up</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default SignUp

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Create Project Form (Another App)

    Copy Paste the entire SignIn.js into CreateProject.js

    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 7)

    CreateProject.js                                                      
        import React, {Component} from 'react'                 //01. Paste content from SignIn.js
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                console.log(this.state);    
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                //<input type="password" id="password" onChange={this.handleChange} />                            //02. No longer in use. Textarea will be used instead
                                //<textarea id="content" className="materialize-textare"></textarea>                              //03. Add textarea
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   //04. Add handleChange event
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default CreateProject

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails' 
        import SignIn from './components/auth/SignIn'          
        import SignUp from './components/auth/SignUp'    
        import CreateProject from './components/projects/CreateProject'                  //05. Import CreateProject.js
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                <Route exact path='/' component={Dashboard} /> 
                                <Route path='/project/:id' component={ProjectDetails} />  
                                <Route path='/signin' component={SignIn} />             
                                <Route path='/signup' component={SignUp} />       
                                <Route path='/create' component={CreateProject} />       //06. Add CreateProject route
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Nav Links and CSS
    
    Create image folder (img) under public folder and add a background *.png for background
        ../project/public/img/bg.png
    
    App Structure
        src/components/auth
            SignIn.js                       (Topic 7)
            SignOut.js                      (Topic 7)
        src/components/dashboard
            Dashboard.js                    (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                       (Topic 3)
            SignedInLinks.js                (Topic 3)
            SignedOutLinks.js               (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js               (Topic 6)
            ProjectList.js                  (Topic 5)
            ProjectSummary.js               (Topic 5)
        src 
            App.js                          (Topic 7)
            index.css

    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedInLinks = () => {
            return (
                <ul className="right">
                    //<li><NavLink to ='/'>New Project</NavLink></li>
                    <li><NavLink to ='/create'>New Project</NavLink></li>
                    <li><NavLink to ='/'>Log Out</NavLink></li>
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>
                </ul>
            )
        }
        export default SignedInLinks

    SignedOutLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedOutLinks = () => {
            return (
                <ul className="right">
                    //<li><NavLink to ='/'>Signup</NavLink></li>
                    //<li><NavLink to ='/'>Login</NavLink></li>
                    <li><NavLink to ='/signup'>Signup</NavLink></li>
                    <li><NavLink to ='/signin'>Login</NavLink></li>
                </ul>
            )
        }
        export default SignedOutLinks

    index.css
        html{
            min-height: 100%;                          //Set minimum height of background image
        }
        body{
            margin: 0;
            padding: 0;
            font-family: sans-serif;
            background: url(/img/bg.png) no-repeat;   //Add background path
            background-size: 100%;                    //Image full size
            background-position: bottom;              //Image starts at bottom
            background-color: #95e8f3;                //Background base color behind image (Skyblue)
            min-height: 100%;                         //Set minimum height of background image
        }
        form{
            padding: 20px;                            //Add paddings around Input text boxes
            margin-top: 60px;                         //Add top margins on Input text boxes
        }
        form button, form h5{
            margin: 20px 0;                           //Add margin to submit button
        }
        input[type=text]:not(.browser-default):focus:not([readonly]),
        input[type=email]:not(.browser-default):focus:not([readonly]),
        input[type=password]:not(.browser-default):focus:not([readonly]),
        textarea.materialize-textarea:focus:not([readonly]){
            border-color: #ec407a;
            box-shadow: none;
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Add Redux and combinedReducers

    Install Redux and React Redux
        Enter project folder in terminal
            E:\ABCD\reactapp\
        Type in "npm install redux react-redux"

    App Structure
        src/components/auth
            SignIn.js                       (Topic 7)
            SignOut.js                      (Topic 7)
        src/components/dashboard
            Dashboard.js                    (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                       (Topic 3)
            SignedInLinks.js                (Topic 3)
            SignedOutLinks.js               (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js               (Topic 6)
            ProjectList.js                  (Topic 5)
            ProjectSummary.js               (Topic 5)
        src 
            App.js                          (Topic 7)
            index.css
    
    Using Multiple Reducers and combine all reducers as one single rootReducer.js
        Refer to React Fundamentals, Topic 38
        https://github.com/Izaat/references/blob/main/React%20Fundamentals
        Create "store/reducers" under src
            ../src/store/reducers
            Add "authReducer.js"
            Add "projectReducer.js"
            Add "rootReducer.js"
        
    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        import {createStore} from 'redux'                                  //01. Import createStore function
        import rootReducer from './store/reducers/rootReducer'             //10. Import rootReducer.js
        import {Provider} from 'react-redux'                               //12. This is the binder for redux with react
        
        //const store = createStore();                                     //02. Create a store with createStore function and save in "store"
        const store = createStore(rootReducer);                            //11. Add in "rootReducer"
        
        //ReactDOM.render(<App />, document.getElementById('root'));
        //ReactDOM.render(<Provider><App /></Provider>, document.getElementById('root'));              //13. Wraps App tag with Provider tag
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  //14. Adds the store
        registerServiceWorker();
        
    authReducer.js
        const initState = {}                                                //05. Create "initState" as empty state
        
        //const authReducer = (state, action) => {}                         //03. Add authReducer function
        //const authReducer = (state = initState, action) => {}             //04. If no state present, then "initState" will be used
        const authReducer = (state = initState, action) => {
            return state
        }
        export default authReducer

    projectReducer.js
        const initState = {}   
        
        const projectReducer = (state = initState, action) => {
            return state
        }
        export default projectReducer

    rootReducer.js
        import authReducer from './authReducer'                               //06. Import authReducer.js
        import authReducer from './projectReducer'                            //07. Import projectReducer.js
        import {combinedReducers} from 'redux'                                //08. Import combinedReducers to combine both reducers as one to form rootReducer
        
        //const rootReducer = combinedReducers({});                           //09. The "{}" is to mention which reducers to be combined
        const rootReducer = combinedReducers({
            auth: authReducer,
            project: projectReducer
        });                          
        export default rootReducer

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Adding Dummy Beta
    
    Read 16 points
    Create dummy data in ProjectReducer
    Retrieve data inside ProjectList from Dashboard (container component)
    Pass data to ProjectSummay as props via ProjectList from Dashboard

    App Structure
        src/components/auth
            SignIn.js                 (Topic 7)
            SignOut.js                (Topic 7)
        src/components/dashboard
            Dashboard.js              (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                 (Topic 3)
            SignedInLinks.js          (Topic 3)
            SignedOutLinks.js         (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js         (Topic 6)
            ProjectList.js            (Topic 5)
            ProjectSummary.js         (Topic 5)
        src 
            App.js                    (Topic 7)
            index.css                 (Topic 9)
            index.js                  (Topic 10)
        src/store/reducers
            authReducer.js            (Topic 10)
            projectReducer.js         (Topic 10)
            rootReducer.js            (Topic 10)

    projectReducer.js
        //const initState = {}   
        //const initState = {projects:[]}                                  //01. Create an empty array
        const initState = {
            projects: [
                {id: '1', title: 'title 1', content: 'content 1'},         //02. Add arrays
                {id: '2', title: 'title 2', content: 'content 2'},
                {id: '3', title: 'title 3', content: 'content 3'}
            ]
        }   
        
        const projectReducer = (state = initState, action) => {
            return state
        }
        export default projectReducer

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'   
        import {connect} from 'react-redux'                                //03. Adding the binder as mentioned in topic 10
        
        class Dashboard extends Component {
            render() {
                //console.log(this.props);                                 //08. Test point, "Projects" property with 3 elements will appear in console > object
                const {projects} = this.props;                             //09. To push data to ProjectList.js, first need to retrieve projects data from props
                return(
                    <div className="dashboard container">
                        <div className="row">
                            <div className="col s12 m6">
                                //<ProjectList />        
                                <ProjectList projects={projects} />        //10. Pushing data to ProjectList
                            </div>
                            
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        
        //const mapStateToProps = (state) => {}                //05. Add Map state from the store to the props
        const mapStateToProps = (state) => {
            return {
                projects: state.project.projects               //06. "project" from rootReducer, "projects" from projectReducer
            }
        }     
        
        //export default Dashboard
        //export default connect()(Dashboard)                  //04. Wraps Dashboard function with connect
        export default connect(mapStateToProps)(Dashboard)     //07. Define which component "connect" will be connected to

    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'      

        //const ProjectList = () => {
        const ProjectList = ({projects}) => {                                      //11. To retrieve data from Dashboard.js
            return (
                <div className="project-list section"> 
                    //<ProjectSummary />                                           //12. No longer needed since reducers will be used
                    //<ProjectSummary />
                    //<ProjectSummary />
                    
                    //{projects && projects.map(project => {})}                    //13. Mapping through the project. If there data exists in "projects", then do "project => {}"
                    {projects && projects.map(project => {
                        return(
                            <ProjectSummary project={project} key={project.id} />  //14. Pushes "project" to ProjectSummary and assign key value to individual project
                        )
                    })}
                </div>
            )
        }
        export default ProjectList

    ProjectSummary.js                 
        import React from 'react'

        //const ProjectSummary = () => {
        const ProjectSummary = ({project}) => {                                //15. Receives "project" from ProjectList
            return (  
                <div className="card z-depth-0 project-summary">
                    <div className="card-content grey-text text-darken-3">
                        //<span className="card-title">Project Title</span>
                        <span className="card-title">{project.title}</span>    //16. Output the title name into display
                        <p>Posted by ...</p>
                        <p className="grey-text">Date</p>
                    </div>
                </div>
            )
        }
        export default ProjectSummary

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Async code with Redux (Using Redux Thunk)
    
    Read 17 points
    Manipulating external database (external to the app) requires time to retrieve and React reducer may already have loaded before retrieval
    Therefore performing data retrieval from the reducer is eliminated 
    Using components on the other hand can't handle external database manipulation
    The only method is to use dispatch action and run asynchronous code to grab data from external database, continues with dispatch, pass to reducer
        Dispatch Action > Asynchronous Code > Reducer > Updates Central State
        Note that in Redux, Dispatch Action directly pass an action to Reducers, Refer to React Fundamentals, Topic 33 Redux Map
        The Asynchronous code is called Redux-Thunk
    
    Thunk:
        Halts the Dispatch Action
        Then it performs an async request
        And then resumes the dispatch
        
    Install Thunk to App Project directory
        Enter project folder in terminal
            E:\ABCD\reactapp\
        Type in "npm install redux-thunk"        
    
    Create a new folder "actions" in ../src/store
        src/store/actions
            projectActions.js
    
    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 11)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js            (Topic 8)
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 11)
            ProjectSummary.js           (Topic 11)
        src 
            App.js                      (Topic 7)
            index.css                   (Topic 9)
            index.js                    (Topic 10)
        src/store/reducers
            authReducer.js              (Topic 10)
            projectReducer.js           (Topic 11)
            rootReducer.js              (Topic 10)

    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        //import {createStore} from 'redux'  
        import {createStore, applyMiddleware} from 'redux'                 //02. Import applyMiddleware from redux
        import rootReducer from './store/reducers/rootReducer'       
        import {Provider} from 'react-redux'           
        import thunk from 'redux-thunk'                                    //01. Import Thunk
        
        //const store = createStore(rootReducer);   
        const store = createStore(rootReducer, applyMiddleware(thunk));    //03. Apply Thunk as the Middleware. This enhances the store and also able to add multiple middlewares
        
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  
        registerServiceWorker();

    projectActions.js
        export const createProject = (project) => {
            //return {                                                     //04. Returns an object but with Thunk, a function can be returned
            //    type: 'ADD_PROJECT',
            //    project: project
            //}
            
            //return () => {}                                              //05. To return a function
            //return (dispatch, getState) => {}                            //06. Add getState and dispatch (send to reducer). 
            return (dispatch, getState) => {
                //EMPTY                                                    //07. Make async call to database
                dispatch({type: 'CREATE_PROJECT', project});               //08. Continues the dispatch action to reducer
            }
        };

    CreateProject.js                                                      
        import React, {Component} from 'react'    
        import {connect} from 'react-redux'                                //10. Add binder as mentioned in topic 10
        import {createProject} from '../../store/actions/projectActions'   //09. Import projectActions.js
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                //console.log(this.state);    
                this.props.createProject(this.state)                         //15. Add createProject props to pass into "project" in point 13
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        //const mapDispatchToProps = (dispatch) => {}                          //12. Map dispatch to props
        const mapDispatchToProps = (dispatch) => {
            return {
                createProject: (project) => dispatch(createProject(project))   //13. Takes in individual project "(project) =>" and dispatch an action creator that takes in the "(project) =>"
            }
        }
        
        //export default CreateProject
        //export default connect()(CreateProject)                              //11. Wrap CreateProject with binder
        export default connect(null, mapDispatchToProps)(CreateProject)        //14. Add mapDispatchToProps as the second parameter where the first parameter is null since mapStateToProps is not available

    projectReducer.js
        const initState = {
            projects: [
                {id: '1', title: 'title 1', content: 'content 1'},        
                {id: '2', title: 'title 2', content: 'content 2'},
                {id: '3', title: 'title 3', content: 'content 3'}
            ]
        }   
        
        const projectReducer = (state = initState, action) => {
            //switch()                   
            //switch(action.type) {}                                          //16. Detects createProject
            switch(action.type) {
                case 'CREATE_PROJECT':
                    console.log('created project', action.project)            //17. Prints out "Created project" and project action received
            }  
            return state
        }
        export default projectReducer

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Create Firebase Project
    
    Sign up and create project
        firebase.google.com
        Go to Console
        Add a new project
            Project Name: reactapp
        Click on "Create Project"
        
    Setup (From App Dashboard)
        Click on "Add Firebase to webapp"
        Copy "Initialize Firebase" script

    Install Firebase in VSCode
        In Terminal, enter application directory (reactapp folder) and install firebase
        Type in "npm install firebase"
    
    Create "config" folder in src folder
        ../src/config/fbConfig.js                              //01. Create Firebase configuration file

    fbConfig.js
        import firebase from 'firebase/app'                    //03. Import firebase core features. 
        import 'firebase/firestore'                            //04. Import Firebase database features
        import 'firebase/auth'                                 //05. Import firebase authentication features
        
        //Initialize Firebase                                  //02. Paste in the copied scripts from Firebase
        var config = {
            apiKey = "code",
            authDomain: "reactapp.firebaseapp.com",
            databaseURL: "https://reactapp.firebaseio.com",
            projectId: "reactapp",
            storageBucket: "reactapp.appspot.com",
            messagingSenderId: "code"
        };
        firebase.initializeApp(config);
        //firebase.firestore()                               //06. Initialize firestore
        //firebase.firestore().settings({})                  //07. Add settings with object
        firebase.firestore().settings({timestampsInSnapshots: true}); //08. Firebase works with timestamps to work properly
        
        export default firebase;                             //08. Enable exporting of firebase for interaction within the app

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Firestore Data & Collections
    
    Continued from Topic 13
    
    Firestore is a NoSQL database
    The database deals with documents and collections of documents (projects)
    Each document has key value pairs
        Title:            //Key
        'Book title'      //Value in String
    Each project contains 3 collections
        Project Collection
            Title, content, authorFirstName, authorLastName, authorId, timestamps
        Users Collection  
            Info about app users
        Notifications Collection
            Info about notifications
        
    Create Database
        In Firebase main dashboard, click on "Database"
        Left panel Project Overview > Develop > Database
        Create database
        Select "Start in test mode" and click on "enable"
        Firestore database dashboard will open
    
    Firestore database dashboard
        Rules Tab is where the database can be locked and made inaccessible to public after publishing the project
        Data Tab 
            Click on "Add collection"
            Set collection
                Collection ID: projects
            Add first document 
                Document ID: *Leave black as it auto generates*
                    Field#1: 
                        Field: title
                        Type: string
                        Value: Book Title 01
                    Field#2: 
                        Field: content
                        Type: string
                        Value: Book 01 Content
                    Field#3: 
                        Field: authorFirstName
                        Type: string
                        Value: Author01a
                    Field#4: 
                        Field: authorLastName
                        Type: string
                        Value: Author01b
                Click on save and "project" appears in collection directory column 
            Click on "projects" in collection column and a "document id" appears in "document column"    
            Click on "document id" and a list of fields (authorFirstName, title, content, etc) appear in field column
    
    To add collection, document and field via React instead of physically logging into Firebase to create them

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Connecting Redux to Firebase

    Continued from Topic 14
    Read all 14 points
    Installation Required
        React Redux Firebase and Firestore - "npm install react-redux-firebase redux-firestore"
    
    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 11)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js            (Topic 12)
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 11)
            ProjectSummary.js           (Topic 11)
        src 
            App.js                      (Topic 7)
            index.css                   (Topic 9)
            index.js                    (Topic 12)
        src/store/reducers
            authReducer.js              (Topic 10)
            projectReducer.js           (Topic 12)
            rootReducer.js              (Topic 10)
        src/store/actions
            projectActions.js           (Topic 12)
        src/config      
            fbConfig.js                 (Topic 13)


    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        //import {createStore, applyMiddleware} from 'redux'       
        import {createStore, applyMiddleware, compose} from 'redux'           //06. Add Compose (Works similarly to "combineReducers" in rootReducer.js) but for "enhancers"
        import rootReducer from './store/reducers/rootReducer'       
        import {Provider} from 'react-redux'           
        import thunk from 'redux-thunk'     
        //import {getFirestore} from 'redux-firestore'                        //01. import Firestore
        import {reduxFirestore, getFirestore} from 'redux-firestore'          //08. Import reduxFirestore, also a store enhancer
        //import {getFirebase} from 'react-redux-firebase'                    //02. Import Firebase
        import {reactReduxFirebase, getFirebase} from 'react-redux-firebase'  //09. Import reactReduxFirebase, also a store enhancer
        import fbConfig from './config/fbConfig'                              //12. Import fbConfig file for compose(reduxFirestore and reactReduxFirebase)
         
        //const store = createStore(rootReducer, applyMiddleware(thunk)); 
        //const store = createStore(rootReducer, applyMiddleware(thunk.withExtraArgument()));        //03. Enables the ability to use getFirebase and getFirestore
        //const store = createStore(rootReducer, applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore}))); //04. Add getFirebase and getFirestore, these are also known as "enhancers"
        const store = createStore(
            rootReducer, 
            //applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore}))                  //07. To wrap "middleware" with "compose"
            compose (
                applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),
                //reduxFirestore(),                  //10. Add reduxFirestore, but config file is needed
                reduxFirestore(fbConfig),            //13. Adds config file
                //reactReduxFirebase()               //11. Add reactReduxFirebase, but config file is needed
                reactReduxFirebase(fbConfig)         //14. Adds config file 
            )
        );
        
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  
        registerServiceWorker();
        
    projectActions.js
        export const createProject = (project) => {
            //return (dispatch, getState) => {    
            return (dispatch, getState, {getFirebase, getFirestore}) => {        //05. Add getFirebase and getFirestore
                dispatch({type: 'CREATE_PROJECT', project});   
            }
        };

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16. Adding Data to Firestore
    
    Read 19 Points
    
    From CreateProject.js, when Submit button is clicked by the user, the handleSubmit prevents from refreshing browser and it also calls "createProject"
    which is added to props via mapDispatchToProps function and this mapDispatchToProps function will call dispatch that calls createProject(project). 
    The project in createProject comes from the state in CreateProject.js. 
    The dispatch fuction also calls createProject from projectAction.js that returns another function
    that also takes in another project that returns getState, getFirebase and getFirestore
    Data should be added to getFirestore and store in a variable

    App Structure
        src/components/auth
            SignIn.js                    (Topic 7)
            SignOut.js                   (Topic 7)
        src/components/dashboard
            Dashboard.js                 (Topic 11)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 3)
            SignedInLinks.js             (Topic 3)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 12)
            ProjectDetails.js            (Topic 6)
            ProjectList.js               (Topic 11)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 15)
        src/store/reducers
            authReducer.js               (Topic 10)
            projectReducer.js            (Topic 12)
            rootReducer.js               (Topic 10)
        src/store/actions
            projectActions.js            (Topic 15)
        src/config      
            fbConfig.js                  (Topic 13)

    projectActions.js
        export const createProject = (project) => {
            return (dispatch, getState, {getFirebase, getFirestore}) => {  
                const firestore = getFirestore();                        //01. Create the variable to store the data
                //firestore.collection('projects')                       //02. Provide reference to "projects" located in Firebase website
                //firestore.collection('projects').add({})               //03. This will add the documents under the "projects" tree in Firebase website
                firestore.collection('projects').add({
                    ...project,                                          //04. Spread the "projects" property 
                    authorFirstName: 'justFirstName',                    //05. Creating elements/field for another document under "projects"
                    authorLastName: 'justLastName',
                    authorId: 12345,
                    createdAt: new Date()                                //06. Timestamp
                //})                                                     //07. Creating data to google is asynchronous and will take time
                //}).then( () => {} )                                    //08. Then() function will run only after the data creation is complete
                }).then(() => {                                          //09. Assigning which function to run after data creation is complete
                    dispatch({type: 'CREATE_PROJECT', project});         //10. Adding the dispatch function from point 11
                //}) 
                //}).catch((err)=>{})                                    //12. Adding catch function in the event of error
                }).catch((err)=>{
                    dispatch({type: 'CREATE_PROJECT_ERROR', err});       //13. If there is error, run dispatch and display to "err"
                })   
                //dispatch({type: 'CREATE_PROJECT', project});           //11. This will be called in point 10
            }
        };

    projectReducer.js
        const initState = {
            projects: [
                {id: '1', title: 'title 1', content: 'content 1'},        
                {id: '2', title: 'title 2', content: 'content 2'},
                {id: '3', title: 'title 3', content: 'content 3'}
            ]
        }   
        
        const projectReducer = (state = initState, action) => {
            switch(action.type) {
                case 'CREATE_PROJECT':
                    //console.log('created project', action.project)
                    console.log('created project', action.project);         //14. Add semicolon for return statement
                    return state;                                           //15. Returns the state as it is
                case 'CREATE_PROJECT_ERROR':                                //16. Create a new case for error handling
                    console.log('create project error', action.err);        //17. Prints out error in console
                    return state;
                default:
                    return state;                                           //18. Add default case
            }  
            //return state                                                  //19. No longer in use since the default case is added
        }
        export default projectReducer

    Testing:
        Input data into website and it will show up in Firestore database as a new document
        But the note that the data is not reflected in the website (cards)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
17. Syncing Data with Firestore
    
    Read 10 points
    Output data from Firestore into the website (Syncing website with Google)
    To sync, use "react-redux-firebase" and "redux-firestore"
    
    App Structure
        src/components/auth
            SignIn.js                  (Topic 7)
            SignOut.js                 (Topic 7)
        src/components/dashboard
            Dashboard.js               (Topic 11)
            Notifications.js
        src/components/layout
            Navbar.js                  (Topic 3)
            SignedInLinks.js           (Topic 3)
            SignedOutLinks.js          (Topic 3)
        src/components/project
            CreateProject.js           (Topic 12)
            ProjectDetails.js          (Topic 6)
            ProjectList.js             (Topic 11)
            ProjectSummary.js          (Topic 11)
        src 
            App.js                     (Topic 7)
            index.css                  (Topic 9)
            index.js                   (Topic 15)
        src/store/reducers
            authReducer.js             (Topic 10)
            projectReducer.js          (Topic 16)
            rootReducer.js             (Topic 10)
        src/store/actions
            projectActions.js          (Topic 16)
        src/config      
            fbConfig.js                (Topic 13)

    rootReducer.js
        import authReducer from './authReducer'      
        import authReducer from './projectReducer' 
        import {combinedReducers} from 'redux'    
        import {firestoreReducer} from 'redux-firestore'      //01. Import firestoreReducer to sync firestore with the app's state
        
        const rootReducer = combinedReducers({
            auth: authReducer,
            project: projectReducer,
            firestore: firestoreReducer                        //02. Add firestore property and this will be the data retriever for the app
        });                          
        export default rootReducer

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'   
        import {connect} from 'react-redux'               
        import {firestoreConnect} from 'react-redux-firebase'  //03. Import firestoreConnect to wrap the dashboard. Dashboard will be assigned to firestoreReducer
        import {compose} from 'redux'                          //04. Since the dashboard is already wrapped with "connect" component, compose method will be used to wrap with firestoreConnect
        
        class Dashboard extends Component {
            render() {
                const {projects} = this.props;           
                return(
                    <div className="dashboard container">
                        <div className="row">
                            <div className="col s12 m6">
                                <ProjectList projects={projects} />   
                            </div>
                            
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {
            //console.log(state);                                   //08. Test connection between app and firestoore by printing the state to console
            return {
                //projects: state.project.projects                  //09. When connection is established, the dummy data is no longer in use
                projects: state.firestore.ordered.projects          //10. Real data from firestore will be used instead of dummy data
            }
        }     
        
        //export default connect(mapStateToProps)(Dashboard)   
        //export default compose()(Dashboard)                        //05. Since compose is used, connect and firestoreConnect will be separate entities
        export default compose(
            connect(mapStateToProps),
            //firestoreConnect([])                                   //06. Takes in array as parameter
            firestoreConnect([
                {collection: 'projects'}                             //07. Enables dashboard to connect to firebase collection named 'projects'
            ])
        )(Dashboard) 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18. Project Details Data

    To show content of the card that has already been linked to the firestore
    When user click on the card (which resides in ProjectList.js), it will divert to ProjectDetails page
    Therefore, the ProjectSummary in ProjectList.js needs to be wrapped by link tag
    
    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js            (Topic 12)
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 11)
            ProjectSummary.js           (Topic 11)
        src 
            App.js                      (Topic 7)
            index.css                   (Topic 9)
            index.js                    (Topic 15)
        src/store/reducers
            authReducer.js              (Topic 10)
            projectReducer.js           (Topic 16)
            rootReducer.js              (Topic 17)
        src/store/actions
            projectActions.js           (Topic 16)
        src/config      
            fbConfig.js                 (Topic 13)


    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'      
        import {Link} from 'react-router-dom'                        //01. Adds Link

        const ProjectList = ({projects}) => {     
            return (
                <div className="project-list section"> 
                    
                    {projects && projects.map(project => {
                        return(
                            //<ProjectSummary project={project} key={project.id} />    //02. Wraps ProjectSummary in Link
                            //<Link>                                                   //03. Adds Link tag
                            //<Link to={}>                                             //04. Linked to somewhere
                            <Link to={'/project/' + project.id}>                       //05. Linking Firestore Collection root (Projects) and Collection Id (Projects Id) via the project name (from App.js route path)
                                <ProjectSummary project={project} key={project.id} />     
                            </Link>    
                        )
                    })}
                </div>
            )
        }
        export default ProjectList

    ProjectDetails.js
        import React from 'react'
        import {connect} from 'react-redux'                             //06. Connect ProjectDetails.js to the redux state
        import {firestoreConnect} from 'react-redux-firebase'           //07. Connect with firestore
        import {compose} from 'redux'                                   //08. Import compose since using 2 connects
        
        const ProjectDetails = (props) => {      
            //const id = props.match.params.id;                         //19. Removed for destructuring in point 20
            //console.log(props);                                       //18. Check console, Console > {matxh:{...}} > project: > data from firestore will be shown
            const {project} = props;                                    //19. Get project property from props (point 12)
            //if (project) {}                                           //20. To check if project exist
            if (project) {
                return(                                                                         //22. From point 21
                    <div className="container section project-details">
                        <div className="card z-depth-0">         
                            <div className="card-content">
                                //<span className"card-title">Project Title - {id}</span>   
                                <span className"card-title">{project.title}</span>              //23. Output the project title
                                //<p>Long long paragraph</p>
                                <p>{project.content}</p>                                        //24. Output content
                            </div>
                            <div className="card-action gret lighten-4 grey-text">
                                //<div>Posted by AuthorName</div>
                                <div>Posted by {project.authorFirstName} {project.authorLastName}</div>  //25. Output the project author firstname and lastname
                                <div>Today's date</div>
                            </div>
                        </div>
                    </div>
                )    
            //} 
            //} else {}                                                 //26. If there is no project in firestore
            } else {
                return(
                    //<div className="container center"></div>          //27. Adds JSX
                    <div className="container center">
                        <p>Loading project...</p>                       //28. This will appear when project does not exist yet due to syncing time
                    </div>
                )
            }
            //return(                                                   //21. Moved to point 22
                //<div className="container section project-details"> 
                //    <div className="card z-depth-0">         
                //        <div className="card-content">
                //            <span className"card-title">Project Title - {id}</span>   
                //            <p>Long long paragraph</p>
                //        </div>
                //        <div className="card-action gret lighten-4 grey-text">
                //            <div>Posted by AuthorName</div>
                //            <div>Today's date</div>
                //        </div>
                //    </div>
                //</div>
            //)
        }
        
        //const mapStateToProps = (state) => {object}                      //10. Create mapStateToProps which takes in the state from and then returns an object
        //const mapStateToProps = (state) => {
        const mapStateToProps = (state, ownProps) => {                     //13. Create another props and name it ownProps
            //console.log(state)                                           //16. Check console Console > Object > firestore > data > projects > project id
            const id = ownProps.match.params.id;                           //14. Therefore "ownProps" become the state before taking in what is being output by mapStateToProps
            const projects = state.firestore.data.projects;                //15. Store data into "projects" that were received by the state from the firestore
            const project = projects ? projects[id] : null                 //16. Get individual project. If no project in firebase, then return null
            return{
                project: project                                        //17. Add project
            }
        }  
        
        //export default ProjectDetails
        //export default compose()(ProjectDetails)                         //09. Adds compose component
        export default compose(
            connect(mapStateToProps),
            //firestoreConnect([])                                         //11. Adds firestoreConnect
            firestoreConnect([
                {collection: 'projects'}                                   //12. Links to the collection (projects) in firestore
            ]) 
        )(ProjectDetails) 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
19. Firebase Authentication
    
    Upon signing up to the App, users will be adding information into the Auth Service Database in Firebase
    Firebase Auth Service database can only store specific data mentioned below
        Email, UID, photo URL, display Name
        Note: Firebase cant store firstName, lastName, etc
    All of the above will be stored into "Users collection" under Firestore database
    Therefore everytime users signs up into the app, a unique ID will be generated
    In order to store firstName and lastName, another new collection will be created
    And the new collection will correspond with the unique ID generated by Firestore
    In summary, 2 collections (Firebase Auth collection and Firestore collection) will be generated by Google Firebase for every single account name

    Firebase Dashboard
        Develop Panel > Authentication > 
            Setup sign-in method Tab
                Everything is disabled by default
                Enable Email feature
                Click on edit to enable feature and leave "passwordless sign-in" disabled
                Click on Save
            Users
                Empty since no current user is signed up
                Here, create a test user
            At this point, only the user is enabled without creating collections for the user

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20. Firebase Authentication with Redux

    Keeping track of user authentication status
    To do this, sync user authentication status from firebase to state in redux store
    This will make it easier to access from the user authentication from the state
    firestoreReducer in rootReducer.js will be used for syncing
    firebaseReduceer will be used for authentication syncing

    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js            (Topic 12)
            ProjectDetails.js           (Topic 18)
            ProjectList.js              (Topic 18)
            ProjectSummary.js           (Topic 11)
        src 
            App.js                      (Topic 7)
            index.css                   (Topic 9)
            index.js                    (Topic 15)
        src/store/reducers
            authReducer.js              (Topic 10)
            projectReducer.js           (Topic 16)
            rootReducer.js              (Topic 17)
        src/store/actions
            projectActions.js           (Topic 16)
        src/config      
            fbConfig.js                 (Topic 13)

    rootReducer.js
        import authReducer from './authReducer'      
        import authReducer from './projectReducer' 
        import {combinedReducers} from 'redux'    
        import {firestoreReducer} from 'redux-firestore'  
        import {firebaseReducer} from 'react-redux-firebase'    //01. Import firebaseReducer for authentication syncing
        
        const rootReducer = combinedReducers({
            auth: authReducer,
            project: projectReducer,
            firestore: firestoreReducer,  
            firebase: firebaseReducer                           //02. Create "firebase" element for firebaseReducer
        });                          
        export default rootReducer

    Navbar.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import SignedInLinks from './SignedInLinks'
        import SignedOutLinks from './SignedOutLinks'
        import {connect} from 'react-redux'                      //03. To setup firebaseReducer to access the authentication status in a component
        
        const Navbar = () => {
            return (
                <nav className="nav-wrapper grey darken-3">
                    <div className="container">
                        <Link to='/' className="brand-logo">React App</Link>
                        <SignedInLinks />
                        <SignedOutLinks />
                    </div>
                </nav>
            )
        }
        
        //const mapStateToProps = (state) => {}                   //05. Map state to props to enable access to auth status inside props
        const mapStateToProps = (state) => {
            console.log(state);                                   //08. Check console and "firebase" property should appear under Object property
            return {
                
            }
        }  
        
        //export default Navbar
        //export default connect()(Navbar)                         //04. Wrap Navbar with connect. 
        export default connect(mapStateToProps)(Navbar)            //06.  Link to mapStateToProps

    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'      
        import {Link} from 'react-router-dom'       

        const ProjectList = ({projects}) => {     
            return (
                <div className="project-list section"> 
                    
                    {projects && projects.map(project => {
                        return(
                            //<Link to={'/project/' + project.id}>   
                            //    <ProjectSummary project={project} key={project.id} />     //07. Since ProjectSummary is no longer the parent element, the key will be transferred to another parent element
                            <Link to={'/project/' + project.id} key={project.id} >    
                                <ProjectSummary project={project}  />     
                            </Link>    
                        )
                    })}
                </div>
            )
        }
        export default ProjectList

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
21. Logging users in
    
    At current state, in Sign in page, entering email and password will push email and password into the console
    To sign in, asynchronous request has to be made. Logging in for users requires an asynchronuous request
    Creating "Action creator" enables app to make asynchronuous requests so users can log in

    Create authActions.js 
        src/store/actions/authActions.js

    App Structure
        src/components/auth
            SignIn.js                  (Topic 7)
            SignOut.js                 (Topic 7)
        src/components/dashboard
            Dashboard.js               (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                  (Topic 20)
            SignedInLinks.js           (Topic 3)
            SignedOutLinks.js          (Topic 3)
        src/components/project
            CreateProject.js           (Topic 12)
            ProjectDetails.js          (Topic 18)
            ProjectList.js             (Topic 18)
            ProjectSummary.js          (Topic 11)
        src 
            App.js                     (Topic 7)
            index.css                  (Topic 9)
            index.js                   (Topic 15)
        src/store/reducers
            authReducer.js             (Topic 10)
            projectReducer.js          (Topic 16)
            rootReducer.js             (Topic 17)
        src/store/actions
            projectActions.js          (Topic 16)
        src/config      
            fbConfig.js                (Topic 13)


    authActions.js
        //export const signIn = (credentials) => {}                    //01. Use email and password (credentials)
        //export const signIn = (credentials) => { return() }          //02. Thunk will halt the dispatch process and return a function instead
        export const signIn = (credentials) => {
            //return (dispatch, getState, {getFirebase}) => {          //03. The function will contain a dispatch parameter, getState, and destructured elements from getFirebase for firebase communication
            return (dispatch, getState, {getFirebase}) => {
                const firebase = getFirebase();                        //04. Initialize firebase instance to communicate with firebase project and sign users in
                //firebase.auth().signInWithEmailAndPassword()         //05. Communicates and sign users in
                firebase.auth().signInWithEmailAndPassword(
                    credentials.email,                                 //06. Adds email and password
                    credentials.password
                //)
                //).then(() => {})                                     //07. If email and password are correct, then dispatch an action
                ).then(() => {
                    dispatch({type: 'LOGIN_SUCCESS'});
                //})     
                //}).catch((err) => {})                               //08. Catches an error if any 
                }).catch((err) => {
                    dispatch({type: 'LOGIN_ERROR', err});             //09. dispatch LOGIN_ERROR and displays the error
                }) 
            }
        }

    authReducer.js
        //const initState = {}            
        const initState = {
            authError: null                                           //13. Initialize "authError" with null
        }
        
        const authReducer = (state = initState, action) => {
            //switch(action.type){}                                   //10. Check action type
            switch(action.type){
                case 'LOGIN_ERROR':
                    //console.log('login error');                     //17a. Check console
                    //return {}                                       //11. In the case of error, return error to 'auth' state in rootReducer.js
                    return {
                        ...state,
                        authError: 'Login failed'                     //12. Create "authError" state element in initState to store "Login failed"
                    } 
                case 'LOGIN_SUCCESS':
                    //console.log('login success');                   //17b. Check console
                    return {                                          //14. Similar to above
                        ...state,
                        authError: null
                    }
                default:                                              //15. Return state as it is
                    return state;
            }
            //return state                                            //16. No longer in use since being used in switch cases as default
        }
        export default authReducer

    SignIn.js                                                      
        import React, {Component} from 'react'     
        import {connect} from 'react-redux'                           //18. Connecting to redux
        import {signIn} from '../../store/actions/authActions'        //19. Connecting to authActions.js
        
        class SignIn extends Component {
            state = {
                email:'',                    
                password:''
            }
            handleChange = (e) => {               
                this.setState({                        
                    [e.target.id]: e.target.value        
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();          
                //console.log(this.state);    
                this.props.signIn(this.state);                          //24. Using signIn props to pass in the state (email and password) 
                //                                                      //25. At this point logging into the app with correct email but incorrect password will return 'LOGIN_ERROR' in the console
            }
            render() {
                const {authError} = this.props;                         //29. Destructuring the authError
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign In</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Login</button>
                                //<div className="red-text center"></div>           //29. Output an error at the end of the form
                                <div className="red-text center">
                                    {authError ? <p>{authError}</p> : null}         //30. Output authError to app , if no error, then no output (null)
                                </div>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        //const mapStateToProps = (state) => {return{}}              //26. Capture error from console and display into the app itself
        const mapStateToProps = (state) => {
            return{
                authError: state.auth.authError                      //27. State of 'auth' in rootReducer of rootReducer.js and authError's initState in authReducer.js 
            }
        }
        
        //const mapDispatchToProps = (dispatch) => {return{}}        //21. Create mapToProps to call authActions.js
        const mapDispatchToProps = (dispatch) => {
            return{
                signIn: (creds) => dispatch(signIn(creds))           //22. Returns an object (signIn method) that receives credentialsand then dispatches an action creator (signIn class) that takes in "creds" from authActions.js
            }
        } 
        
        //export default SignIn
        //export default connect()(SignIn)                                    //20. Wrap signIn class
        //export default connect(null, mapDispatchToProps)(SignIn)            //23. Where null is mapStateToProps and mapDispatchToProps will be second
        export default connect(mapStateToProps, mapDispatchToProps)(SignIn)   //28. Now able to access mapStateToProps


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
22. Logging users out

    App Structure
        src/components/auth
            SignIn.js                  (Topic 21)
            SignOut.js                 (Topic 7)
        src/components/dashboard
            Dashboard.js               (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                  (Topic 20)
            SignedInLinks.js           (Topic 3)
            SignedOutLinks.js          (Topic 3)
        src/components/project
            CreateProject.js           (Topic 12)
            ProjectDetails.js          (Topic 18)
            ProjectList.js             (Topic 18)
            ProjectSummary.js          (Topic 11)
        src 
            App.js                     (Topic 7)
            index.css                  (Topic 9)
            index.js                   (Topic 15)
        src/store/reducers
            authReducer.js             (Topic 21)
            projectReducer.js          (Topic 16)
            rootReducer.js             (Topic 17)
        src/store/actions
            projectActions.js          (Topic 16)
            authActions.js             (Topic 21)
        src/config      
            fbConfig.js                (Topic 13)


    authActions.js
        export const signIn = (credentials) => {
            return (dispatch, getState, {getFirebase}) => {
                const firebase = getFirebase();             
                firebase.auth().signInWithEmailAndPassword(
                    credentials.email,                 
                    credentials.password
                ).then(() => {
                    dispatch({type: 'LOGIN_SUCCESS'});
                }).catch((err) => {
                    dispatch({type: 'LOGIN_ERROR', err});  
                }) 
            }
        }

        //export const signOut = () => {}                            //01. Add signOut const
        export const signOut = () => {
            //return (dispatch, getState, {getFirebase}) => {}       //02. Similar to signIn
            return (dispatch, getState, {getFirebase}) => {
                const firebase = getFirebase();                      //03. Initialize firebase
                //firebase.auth().signOut()                          //04. Async so takes time to sign out
                //firebase.auth().signOut() .then(() => {});         //05. Callback method
                firebase.auth().signOut() .then(() => {
                    dispatch({type: 'SIGNOUT_SUCCESS'});             //06. Once sign out complete, dispatch signout success
                });
            }
        }


    authReducer.js
        const initState = {
            authError: null           
        }
        
        const authReducer = (state = initState, action) => {
            switch(action.type){
                case 'LOGIN_ERROR':
                    return {
                        ...state,
                        authError: 'Login failed'    
                    } 
                case 'LOGIN_SUCCESS':
                    return {          
                        ...state,
                        authError: null
                    }
                case 'SIGNOUT_SUCCESS':                                       //07. Adds Signout success
                    console.log('signout success');                           //08. Prints out "Signout success" to console
                    return state;                                             //09. Returns state as it is
                default:                  
                    return state;
            }
        }
        export default authReducer

    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import {connect} from 'react-redux'                                   //10. Add react redux connect
        import {signOut} from '../../store/actions/authActions'               //11. Add signOut from authActions.js
        
        //const SignedInLinks = () => {
        const SignedInLinks = (props) => {                                    //16. Take props into the component
            //props.signOut()                                                 //17. This can be done but not using this at the moment
            return (
                <ul className="right">
                    <li><NavLink to ='/'>New Project</NavLink></li>
                    //<li><NavLink to ='/'>Log Out</NavLink></li>
                    <li><a onClick={props.signOut}>Log Out</a></li>           //18. A better way to sign out that involves clisking on the button instead of point 17
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>
                </ul>
            )
        }
        
        //const mapDispatchToProps = (dispatch) => {}                  //13. Add dispatch to props
        const mapDispatchToProps = (dispatch) => {
            return {
                signOut: () => dispatch(signOut())                     //14. Dispatch to signOut
            }
        }
        
        //export default SignedInLinks
        //export default connect()(SignedInLinks)                         //12. Wrap with connect
        export default connect(null, mapDispatchToProps)(SignedInLinks)   //15. Link connect to dispatch to props

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
23. Tracking Authentication status

    Keeping track of firebase property (Console > Object > firebase > auth)
    Ability to show content when logged in or different content when not logged in
    Current state: 
        Signup, Login, New Project, Log Out, Initials
    Ideal State:
        Not logged in: Signup, Login
        Logged in: New Project, Log Out, Initials

    App Structure
        src/components/auth
            SignIn.js                  (Topic 21)
            SignOut.js                 (Topic 7)
        src/components/dashboard
            Dashboard.js               (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                  (Topic 20)
            SignedInLinks.js           (Topic 3)
            SignedOutLinks.js          (Topic 3)
        src/components/project
            CreateProject.js           (Topic 12)
            ProjectDetails.js          (Topic 18)
            ProjectList.js             (Topic 18)
            ProjectSummary.js          (Topic 11)
        src 
            App.js                     (Topic 7)
            index.css                  (Topic 9)
            index.js                   (Topic 15)
        src/store/reducers
            authReducer.js             (Topic 21)
            projectReducer.js          (Topic 16)
            rootReducer.js             (Topic 17)
        src/store/actions
            projectActions.js          (Topic 16)
            authActions.js             (Topic 21)
        src/config      
            fbConfig.js                (Topic 13)

    Navbar.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import SignedInLinks from './SignedInLinks'
        import SignedOutLinks from './SignedOutLinks'
        import {connect} from 'react-redux'    
        
        //const Navbar = () => {  
        const Navbar = (props) => {                               //02. Add props
            const {auth} = props;                                 //03. destructure auth property
            console.log(auth);                                    //04. For checking, when logged in, contains uid, when logged out, isEmpty = true
            const links = auth.uid ? <SignedInLinks /> : <SignedOutLinks />;                  //05. Check if uid matches with links. If true, then sign in, if false then signout
            return (
                <nav className="nav-wrapper grey darken-3">
                    <div className="container">
                        <Link to='/' className="brand-logo">React App</Link>
                        //<SignedInLinks />                        //06. Not in use since links will be used instead
                        //<SignedOutLinks />                       //07. Not in use since links will be used instead
                        {links}
                    </div>
                </nav>
            )
        }
        
        const mapStateToProps = (state) => {
            //console.log(state);                  
            return {
                auth: state.firebase.auth                          //01. Add accessibility for the component
            }
        }  
        
        export default connect(mapStateToProps)(Navbar)   

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24. Waiting for Auth Ready

    When Refresh button is pressed, the Log-Out Login will flash momentarily
    This is due to the app reinitializes the DOM to reauthenticate with firebase
    Solution is to leave authentication status into the DOM

    App Structure
        src/components/auth
            SignIn.js                  (Topic 21)
            SignOut.js                 (Topic 7)
        src/components/dashboard
            Dashboard.js               (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                  (Topic 23)
            SignedInLinks.js           (Topic 3)
            SignedOutLinks.js          (Topic 3)
        src/components/project
            CreateProject.js           (Topic 12)
            ProjectDetails.js          (Topic 18)
            ProjectList.js             (Topic 18)
            ProjectSummary.js          (Topic 11)
        src 
            App.js                     (Topic 7)
            index.css                  (Topic 9)
            index.js                   (Topic 15)
        src/store/reducers
            authReducer.js             (Topic 21)
            projectReducer.js          (Topic 16)
            rootReducer.js             (Topic 17)
        src/store/actions
            projectActions.js          (Topic 16)
            authActions.js             (Topic 21)
        src/config      
            fbConfig.js                (Topic 13)

    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';   
        import {createStore, applyMiddleware, compose} from 'redux'    
        import rootReducer from './store/reducers/rootReducer'       
        import {Provider} from 'react-redux'           
        import thunk from 'redux-thunk'     
        import {reduxFirestore, getFirestore} from 'redux-firestore'   
        import {reactReduxFirebase, getFirebase} from 'react-redux-firebase'  
        import fbConfig from './config/fbConfig'      
         
        const store = createStore(
            rootReducer, 
            compose (
                applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),
                reduxFirestore(fbConfig),           
                //reactReduxFirebase(fbConfig)   
                reactReduxFirebase(fbConfig, {attachAuthReady: true})                            //01. Allows access to store
            )
        );
        
        //store.firebaseAuthIsReady                                                                               //02. Waits for firebase to be ready
        //store.firebaseAuthIsReady.then(() => {})                                                         //03. Once firebase is ready, then do something
        store.firebaseAuthIsReady.then(() => {
            ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));    //04. Then render to DOM
            registerServiceWorker();
        }) 
        
        //ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  
        //registerServiceWorker();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
25. Route Guarding Part 1 (RouteGuard)

    Protecting certain route or certain pages
    Example, hiding pages, URLs or details from users who are not signed in
    If not signed in, page will redirect users to the log in page
    mapStateToProps needed for redirecting the page to signIn page
    Read 16 points
    
    App Structure
        src/components/auth
            SignIn.js                    (Topic 21)
            SignOut.js                   (Topic 7)
        src/components/dashboard
            Dashboard.js                 (Topic 17)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 23)
            SignedInLinks.js             (Topic 22)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 12)
            ProjectDetails.js            (Topic 18)
            ProjectList.js               (Topic 18)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 24)
        src/store/reducers
            authReducer.js               (Topic 22)
            projectReducer.js            (Topic 16)
            rootReducer.js               (Topic 17)
        src/store/actions
            projectActions.js            (Topic 16)
            authActions.js               (Topic 22)
        src/config      
            fbConfig.js                  (Topic 13)

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'   
        import {connect} from 'react-redux'               
        import {firestoreConnect} from 'react-redux-firebase' 
        import {compose} from 'redux'
        import {Redirect} from 'react-router-dom'                        //03. Import redirect "<>"
        
        class Dashboard extends Component {
            render() {
                //const {projects} = this.props;           
                const {projects, auth} = this.props;                     //02. Grab "auth" for destructuring
                //if (!auth.uid) return <>                               //04. If uid does not exist (not signed in), then redirect "<>"
                if (!auth.uid) return <Redirect to='/signIn' />          //05. Redirect to signIn page
                return(
                    <div className="dashboard container">
                        <div className="row">
                            <div className="col s12 m6">
                                <ProjectList projects={projects} />   
                            </div>
                            
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {
            return {
                projects: state.firestore.ordered.projects    
                auth: state.firebase.auth                                    //01. Check whether user is signed in or not
            }
        }     
        
        export default compose(
            connect(mapStateToProps),
            firestoreConnect([
                {collection: 'projects'}     
            ])
        )(Dashboard) 

    CreateProject.js                                                      
        import React, {Component} from 'react'    
        import {connect} from 'react-redux'                            
        import {createProject} from '../../store/actions/projectActions'     
        import {Redirect} from 'react-router-dom'                           //11. Import redirect "<>" as per point 03
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                this.props.createProject(this.state)     
            }
            const {auth} = this.props;                                      //09. Grab "auth" for destructuring as per point 02
            if (!auth.uid) return <Redirect to='/signIn' />                 //10. Redirect to signIn page as per point 05
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        //const mapStateToProps = (state) => {return{}}                      //06. Create mapStateToProps for redirect
        const mapStateToProps = (state) => {
            return{
                auth: state.firebase.auth                                    //07. Add auth as per point 01
            }
        }
        
        const mapDispatchToProps = (dispatch) => {
            return {
                createProject: (project) => dispatch(createProject(project))  
            }
        }
        
        //export default connect(null, mapDispatchToProps)(CreateProject)   
        export default connect(mapStateToProps, mapDispatchToProps)(CreateProject)         //08. Add mapStateToProps to connect

    ProjectDetails.js
        import React from 'react'
        import {connect} from 'react-redux'                                    
        import {firestoreConnect} from 'react-redux-firebase'         
        import {compose} from 'redux'                  
        import {Redirect} from 'react-router-dom'                             //12. Import redirect "<>" as per point 03
        
        const ProjectDetails = (props) => {      
            //const {project} = props;     
            //const {auth} = this.props;                                      //13. Grab "auth" for destructuring as per point 02
            const {project, auth} = props;                                    //14. Sing line 13 is similar to project prop, the 2 will be combined
            if (!auth.uid) return <Redirect to='/signIn' />                   //15. Redirect to signIn page as per point 05            
            if (project) {
                return(                          
                    <div className="container section project-details">
                        <div className="card z-depth-0">         
                            <div className="card-content">
                                <span className"card-title">{project.title}</span>
                                <p>{project.content}</p>
                            </div>
                            <div className="card-action gret lighten-4 grey-text">
                                <div>Posted by {project.authorFirstName} {project.authorLastName}</div>      
                                <div>Today's date</div>
                            </div>
                        </div>
                    </div>
                )    
            } else {
                return(
                    <div className="container center">
                        <p>Loading project...</p>     
                    </div>
                )
            }
        }

        const mapStateToProps = (state, ownProps) => {     
            const id = ownProps.match.params.id;                
            const projects = state.firestore.data.projects;      
            const project = projects ? projects[id] : null        
            return{
                project: project,
                auth: state.firebase.auth                                       //16. Add auth as per point 01
            }
        }  
        
        export default compose(
            connect(mapStateToProps),
            firestoreConnect([
                {collection: 'projects'}       
            ]) 
        )(ProjectDetails) 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
26. Route Guarding Part 2 (RouteGuard)

    If logged in, dont redirect to signIn page and signup page
    The rest is similar to Topic 25    

    App Structure
        src/components/auth
            SignIn.js                    (Topic 21)
            SignUp.js                    (Topic 7)
        src/components/dashboard
            Dashboard.js                 (Topic 25)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 23)
            SignedInLinks.js             (Topic 22)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 25)
            ProjectDetails.js            (Topic 25)
            ProjectList.js               (Topic 18)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 24)
        src/store/reducers
            authReducer.js               (Topic 22)
            projectReducer.js            (Topic 16)
            rootReducer.js               (Topic 17)
        src/store/actions
            projectActions.js            (Topic 16)
            authActions.js               (Topic 22)
        src/config      
            fbConfig.js                  (Topic 13)

    SignIn.js                                                      
        import React, {Component} from 'react'     
        import {connect} from 'react-redux'                                    
        import {signIn} from '../../store/actions/authActions'       
        import {Redirect} from 'react-router-dom'                     //01. Import Redirect
        
        class SignIn extends Component {
            state = {
                email:'',                    
                password:''
            }
            handleChange = (e) => {               
                this.setState({                        
                    [e.target.id]: e.target.value        
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();          
                this.props.signIn(this.state);      
            }
            render() {
                //const {authError} = this.props;                                  
                const {authError, auth} = this.props;                        //02. Add auth
                //if (!auth.uid) return <Redirect to='/' />                  //03. Add redirect function
                if (auth.uid) return <Redirect to='/' />                     //04. Remove "Not"
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign In</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Login</button>
                                <div className="red-text center">
                                    {authError ? <p>{authError}</p> : null}        
                                </div>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {
            return{
                authError: state.auth.authError,
                auth: state.firebase.auth                             //05. Add authentication state
            }
        }
        
        const mapDispatchToProps = (dispatch) => {
            return{
                signIn: (creds) => dispatch(signIn(creds))      
            }
        } 
        
        export default connect(mapStateToProps, mapDispatchToProps)(SignIn)  

    SignUp.js                                                             
        import React, {Component} from 'react'    
        import {Redirect} from 'react-router-dom'                     //06. Import Redirect
        import {connect} from 'react-redux'                           //12. Import connect wrapper
        
        class SignUp extends Component {
            state = {
                email: '',             
                password: '',
                firstName: '',                                                               
                lastName: ''
            }
            handleChange = (e) => {  
                this.setState({                 
                    [e.target.id]: e.target.value     
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();     
                console.log(this.state);  
            }
            render() {
                const {auth} = this.props;                                    //07. Add auth
                if (auth.uid) return <Redirect to='/' />                      //08. Add redirect function
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign Up</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">                                                          
                                <label htmlFor="firstName">First Name</label>
                                <input type="text" id="firstName" onChange={this.handleChange} /> 
                            </div>   
                            <div className="input-field">                                                           
                                <label htmlFor="lastName">Last Name</label>
                                <input type="text" id="lastName" onChange={this.handleChange} /> 
                            </div>                            
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Sign Up</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {                          //09. Add mapStateToProps
            return{
                auth: state.firebase.auth                             //10. Add authentication state
            }
        }
        
        //export default SignUp
        export default connect(mapStateToProps)(SignUp)               //11. Wrap SignUp


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
27. User Sign up (Firebase Auth)
    
    Read 29 points
    Enabling Sign up through firebase
    Currently, sign up data is retrieved but has no function
    Now is to make request to firebase and create new user with the new information
    To do that, an action creator should be created

    App Structure
        src/components/auth
            SignIn.js                    (Topic 26)
            SignUp.js                    (Topic 26)
        src/components/dashboard
            Dashboard.js                 (Topic 25)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 23)
            SignedInLinks.js             (Topic 22)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 25)
            ProjectDetails.js            (Topic 25)
            ProjectList.js               (Topic 18)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 24)
        src/store/reducers
            authReducer.js               (Topic 22)
            projectReducer.js            (Topic 16)
            rootReducer.js               (Topic 17)
        src/store/actions
            projectActions.js            (Topic 16)
            authActions.js               (Topic 22)
        src/config      
            fbConfig.js                  (Topic 13)

    authActions.js
        export const signIn = (credentials) => {
            return (dispatch, getState, {getFirebase}) => {
                const firebase = getFirebase();             
                firebase.auth().signInWithEmailAndPassword(
                    credentials.email,                 
                    credentials.password
                ).then(() => {
                    dispatch({type: 'LOGIN_SUCCESS'});
                }).catch((err) => {
                    dispatch({type: 'LOGIN_ERROR', err});  
                }) 
            }
        }

        export const signOut = () => {
            return (dispatch, getState, {getFirebase}) => {
                const firebase = getFirebase();              
                firebase.auth().signOut() .then(() => {
                    dispatch({type: 'SIGNOUT_SUCCESS'});      
                });
            }
        }

        //export const signUp = (newUser) => {}                                       //01. Create new user function
        export const signUp = (newUser) => {
            //return (dispatch, getState, {getFirebase, getFirestore}) => {}          //02. Firebase stores Email and Firestore UID. Firestore stores firstName and lastName
            return (dispatch, getState, {getFirebase, getFirestore}) => {
                const firebase = getFirebase();                                       //03. Refer to Topic 16
                const firestore = getFirestore();
                
                //firebase.auth().createUserWithEmailAndPassword()                    //04. Refer to Topic 21
                firebase.auth().createUserWithEmailAndPassword(
                    newUser.email,
                    newUser.password
                //)
                //).then(() => {})                                                     //05. Asynchronous so need .then method
                //).then((resp) => {})                                                 //06. Add response and this will contain information of new user
                ).then((resp) => {
                    //resp.user                                                        //07. Information will be stored in resp.user which creates the uid
                    //return firestore.collection('users').doc()                       //08. Instead of using .add() which creates uid again, .doc() is used in reference to uid created by "resp"
                    //return firestore.collection('users').doc(resp.user.uid)          //09. This points towards the generated uid created by resp
                    //return firestore.collection('users').doc(resp.user.uid).set({})  //10. This will set the document
                    return firestore.collection('users').doc(resp.user.uid).set({
                        firstName: newUser.firstName,                                  //11. This will refer to the "newUser"
                        lastName: newUser.lastName,
                        initials: newUser.firstName[0] + newUser.lastName[0]           //12. This will create the initials using the first letters (index0) and then concatenate them
                    })
                //})
                //}).then(() => {})                                                    //13. Another "then" method 
                }).then(() => {
                    dispatch({type: 'SIGNUP_SUCCESS'})
                //}) 
                //}).catch(err)                                                         //14. If the .then(resp) fails, then catch the error
                //}).catch(err => {})                                                   //15.  Move error to an object
                }).catch(err => {
                    dispatch({type: 'SIGNUP_ERROR', err})                               //16. Dispatch error as type called SIGNUP_ERROR
                })
            }
        }

    authReducer.js
        const initState = {
            authError: null           
        }
        
        const authReducer = (state = initState, action) => {
            switch(action.type){
                case 'LOGIN_ERROR':
                    return {
                        ...state,
                        authError: 'Login failed'    
                    } 
                case 'LOGIN_SUCCESS':
                    return {          
                        ...state,
                        authError: null
                    }
                case 'SIGNOUT_SUCCESS':     
                    console.log('signout success');       
                    return state;                                      
                case 'SIGNUP_SUCCESS':                                              //17. Add case for signup
                    console.log('signup success');   
                    return{
                        ...state,
                        authError: null                                             //18. If no error then null
                    }
                case 'SIGNUP_ERROR':                                                //19. Add case for error
                    console.log('signup error');   
                    return{
                        ...state,
                        authError: action.err.message                               //20. Attach error message ans store into authError
                    }                    
                    
                default:                  
                    return state;
            }
        }
        export default authReducer
        
    SignUp.js                                                             
        import React, {Component} from 'react'    
        import {Redirect} from 'react-router-dom'                    
        import {connect} from 'react-redux'                            
        import {signUp} from '../../store/actions/authActions'                       //22. Import signUp from authActions
        
        class SignUp extends Component {
            state = {
                email: '',             
                password: '',
                firstName: '',                                                               
                lastName: ''
            }
            handleChange = (e) => {  
                this.setState({                 
                    [e.target.id]: e.target.value     
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();     
                //console.log(this.state);                                            //21. No longer in use
                this.props.signUp(this.state)                                         //26. Add signUp props that has attachment of this.state
            }
            render() {
                //const {auth} = this.props;                                        
                const {auth, authError} = this.props;                                 //28. Add authError
                if (auth.uid) return <Redirect to='/' />              
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign Up</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">                                                          
                                <label htmlFor="firstName">First Name</label>
                                <input type="text" id="firstName" onChange={this.handleChange} /> 
                            </div>   
                            <div className="input-field">                                                           
                                <label htmlFor="lastName">Last Name</label>
                                <input type="text" id="lastName" onChange={this.handleChange} /> 
                            </div>                            
                            <div className="input-field">                                                           //29. Add JSX for authError
                                <button className="btn pink lighten-1 z-depth-0">Sign up</button>
                                <div className="red-text center">
                                    {authError ? <p>{authError}</p> : null}
                                </div>
                            </div>   
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Sign Up</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {                        
            return{
                auth: state.firebase.auth                                
                authError: state.auth.authError                                   //27. Add error as props
            }
        }
        
        //const mapDispatchToProps = (dispatch) => {}                             //22. Add mapDispatchToProps
        const mapDispatchToProps = () => {
            return {
                //signUp: (newUser) => dispatch(signUp(newUser))                  //23. "signUp:" will take in "(newUser)" and dispatch the imported "signUp()" which has attachment of "newUser"
                signUp: (newUser) => dispatch(signUp(newUser))                    //24. signUp function in authActions.js will recieve the data at (newUser)
            }
        } 
        
        //export default connect(mapStateToProps)(SignUp)            
        export default connect(mapStateToProps, mapDispatchToProps)(SignUp)      //25. Add mapDispatchToProps



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
28. User Profile Data
    
    Ideally, when a user is logged into the app, the lastName, firstName, etc can be seen via console 
    Currently, all the elements are missing from the console
    Check state [Console > {auth...} > firebase > auth: > apiKey, appName, etc]
    These informations can be retrieved from firestore
    To do that, sync user to firestore state so it can be used in app's components
    Check another state [Console > {auth...} > firebase > profile: > isEmpty, isLoaded], therefore no profile data in the app's state
    Firebase reducer created in the app can automatically sync the profile element above to the firestore
    
    App Structure
        src/components/auth
            SignIn.js                    (Topic 26)
            SignUp.js                    (Topic 27)
        src/components/dashboard
            Dashboard.js                 (Topic 25)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 23)
            SignedInLinks.js             (Topic 22)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 25)
            ProjectDetails.js            (Topic 25)
            ProjectList.js               (Topic 18)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 24)
        src/store/reducers
            authReducer.js               (Topic 27)
            projectReducer.js            (Topic 16)
            rootReducer.js               (Topic 17)
        src/store/actions
            projectActions.js            (Topic 16)
            authActions.js               (Topic 27)
        src/config      
            fbConfig.js                  (Topic 13)

    Navbar.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import SignedInLinks from './SignedInLinks'
        import SignedOutLinks from './SignedOutLinks'
        import {connect} from 'react-redux'    
        
        const Navbar = (props) => {        
            //const {auth} = props;                    
            const {auth, profile} = props;                                      //05. Enabling the destructuring of profile data
            //console.log(auth);                                       
            //const links = auth.uid ? <SignedInLinks /> : <SignedOutLinks />;         
            const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />;  //06. Profile is destructured, the data can be used for the app
            return (
                <nav className="nav-wrapper grey darken-3">
                    <div className="container">
                        <Link to='/' className="brand-logo">React App</Link>
                        {links}
                    </div>
                </nav>
            )
        }
        
        const mapStateToProps = (state) => {           
            //console.log(state);                                               //01. Check state in console
            return {
                auth: state.firebase.auth        
                profile: state.firebase.profile                                 //04. Now profile data appears in console and therefore data can be used
            }
        }  
        
        export default connect(mapStateToProps)(Navbar)   

    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';   
        import {createStore, applyMiddleware, compose} from 'redux'    
        import rootReducer from './store/reducers/rootReducer'       
        import {Provider} from 'react-redux'           
        import thunk from 'redux-thunk'     
        import {reduxFirestore, getFirestore} from 'redux-firestore'   
        import {reactReduxFirebase, getFirebase} from 'react-redux-firebase'  
        import fbConfig from './config/fbConfig'      
         
        const store = createStore(
            rootReducer, 
            compose (
                applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),
                reduxFirestore(fbConfig),           
                //reactReduxFirebase(fbConfig, {attachAuthReady: true})       
                //reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, attachAuthReady: true})                          //02. Add useFirestoreForProfile and set to true
                reactReduxFirebase(fbConfig, {useFirestoreForProfile: true, userProfile: 'users', attachAuthReady: true})      //03. Add userProfile and set path to 'users' to sync with firestore
            )
        );
        
        store.firebaseAuthIsReady.then(() => {
            ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));   
            registerServiceWorker();
        }) 
        
    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import {connect} from 'react-redux'                                     
        import {signOut} from '../../store/actions/authActions'    
        
        const SignedInLinks = (props) => {              
            return (
                <ul className="right">
                    <li><NavLink to ='/'>New Project</NavLink></li>
                    <li><a onClick={props.signOut}>Log Out</a></li>                
                    //<li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>     //07. Output an object instead of "Icon" text
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>
                        {props.profile.initials}                                                                                                                                   //08. Initials of signed in profile being used
                    </NavLink></li>
                </ul>
            )
        }
        
        const mapDispatchToProps = (dispatch) => {
            return {
                signOut: () => dispatch(signOut())                  
            }
        }
        
        export default connect(null, mapDispatchToProps)(SignedInLinks)   
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
29. Adding Projects (Revisited)

    Refer to projectActions.js from Topic 12 to Topic 16
    Currently, projectActions.js is running on predetermined set of properties (dummy data). 
    Here, the file will retrieve properties from firestore database

    App Structure
        src/components/auth
            SignIn.js                    (Topic 26)
            SignUp.js                    (Topic 27)
        src/components/dashboard
            Dashboard.js                 (Topic 25)
            Notifications.js
        src/components/layout
            Navbar.js                    (Topic 28)
            SignedInLinks.js             (Topic 28)
            SignedOutLinks.js            (Topic 3)
        src/components/project
            CreateProject.js             (Topic 25)
            ProjectDetails.js            (Topic 25)
            ProjectList.js               (Topic 18)
            ProjectSummary.js            (Topic 11)
        src 
            App.js                       (Topic 7)
            index.css                    (Topic 9)
            index.js                     (Topic 28)
        src/store/reducers
            authReducer.js               (Topic 27)
            projectReducer.js            (Topic 16)
            rootReducer.js               (Topic 17)
        src/store/actions
            projectActions.js            (Topic 16)
            authActions.js               (Topic 27)
        src/config      
            fbConfig.js                  (Topic 13)

    projectActions.js
        export const createProject = (project) => {
            return (dispatch, getState, {getFirebase, getFirestore}) => {  
                const firestore = getFirestore();    
                //const profile = getState()                     //01. Creates a profile and return getState()
                const profile = getState().firebase.profile;     //02. Retrieve properties that are already retrieved from firestore
                const authorId = getState().firebase.auth.uid;   //03. Retrieve author's authentication uid from the state
                firestore.collection('projects').add({
                    ...project,                                                        
                    //authorFirstName: 'justFirstName',     
                    authorFirstName: profile.firstName,          //04. Retrieve the first name from state     
                    //authorLastName: 'justLastName',
                    authorLastName: profile.lastName,            //05. Retrieve the last name from state   
                    //authorId: 12345,
                    authorId: authorId,                          //06. Retrieve the authorId
                    createdAt: new Date()                                       
                }).then(() => {                                                                 
                    dispatch({type: 'CREATE_PROJECT', project});            
                }).catch((err)=>{
                    dispatch({type: 'CREATE_PROJECT_ERROR', err});   
                })   
            }
        };

    ProjectSummary.js                 
        import React from 'react'

        const ProjectSummary = ({project}) => {                                
            return (  
                <div className="card z-depth-0 project-summary">
                    <div className="card-content grey-text text-darken-3">
                        <span className="card-title">{project.title}</span>    
                        //<p>Posted by ...</p>                                                     //07. Random name will show up in main page and not the actual author
                        <p>Posted by {project.authorFirstName} {project.authorLastName}</p>        //08. In firbase dashboard, "authorLastName" is used, therefore, "project.authorLastName" for data retrieval
                        <p className="grey-text">Date</p>
                    </div>
                </div>
            )
        }
        export default ProjectSummary

    CreateProject.js                                                      
        import React, {Component} from 'react'    
        import {connect} from 'react-redux'                            
        import {createProject} from '../../store/actions/projectActions'     
        import {Redirect} from 'react-router-dom'                                          
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                this.props.createProject(this.state)                  //09. After creating the project, the user should be rerouted to the homepage automatically
                this.props.history.push('/');                         //10. This will reroute the user back to homepage after successfully created the project card
            }
            
            //const {auth} = this.props;                                                                        
            //if (!auth.uid) return <Redirect to='/signIn' />                                   
            
            render() {
            
                const {auth} = this.props;                                                                        
                if (!auth.uid) return <Redirect to='/signIn' />  
            
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        const mapStateToProps = (state) => {
            return{
                auth: state.firebase.auth                                 
            }
        }
        
        const mapDispatchToProps = (dispatch) => {
            return {
                createProject: (project) => dispatch(createProject(project))  
            }
        }
        
        export default connect(mapStateToProps, mapDispatchToProps)(CreateProject)        
        
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
30. Formatting Dates with Moment






























