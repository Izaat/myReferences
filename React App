///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React App
React, Redux, Thunk, Firebase (Firestore data storage, authentications, cloud functions, hosting)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Planning the App
02. Setting Up                        **npx create-react-app reactapp, **npm install react-router-dom
03. Navbar
04. Dashboard
05. Project Summary Component
06. Project Details Component
07. Login and Signup Component
08. Create Project Form
09. Nav Links and CSS
10. Add Redux and combinedReducers    **npm install redux react-redux
11. Adding Dummy Beta
12. Async code with Redux / Thunk     **npm install redux-thunk
13. Create Firebase Project           **npm install firebase
14. Firestore Data & Collections
15. Connecting Redux to Firebase
16. Adding Data to Firestore
17. Syncing Data with Firestore
18. Project Details Data
19. Firebase Authentication
20. Firebase Authentication with Redux
21. Logging users in
22. Logging users out
23. Tracking Authentication status
24. Waiting for Auth Ready
25. Route Guarding
26. User Sign up (Firebase Auth)
27. User Profile Data

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Planning the App
    
    App Structure >
        App (Root) >
            Navbar >
                Signed in links
                Signed out links
            Dashboard > /dashboard
                Project List
                Notifications
            Project Details > /project/:id
            Create Project > /create
            Sign in > /signin
            Sign up > /signup

    Backend Structure
        |-------------------------|---------------------|
        |   Client/Browser        |   Server/Firebase   |
        |-------------------------|---------------------|
        |                         | > Firestore db      |
        |   React App > Redux  >  | > Firebase Auth     |
        |                         | > Cloud Functions   |
        |-------------------------|---------------------|


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Setting Up

    Creating a react App project
        In VSCode Terminal, enter a desired folder (ie Folder ABCD)
        Type in "npx create-react-app reactapp"
        This will create a project in Folder ABCD (E:\ABCD\reactapp\)
        Enter "reactapp" folder and install React DOM. Type in "npm install react-router-dom"
            Once installed, remember to import "BrowserRouter" to App.js (See App.js)
        Once done, type in "npm start" to start app
        This will open a default react app in browser
        
        Use materializecss for the layout
            https://www.materializecss.com/getting-started.html
            From HTML Setup <head>
                IconFont
            From CDN    
                Compiled Minified CSS
                Compiled Minified Javascript
            Paste the CSS codes into ../reactapp/public/index.html (Bottom of the <head> tag, above <title> tag)   
            Paste the JS codes into ../reactapp/public/index.html (Inside of the <body> tag, at the bottom)     

        Create "components" folder in "src" folder and create 4 folders under "components" folder
        Refer to Topic 1 App Structure
            ../src/components/auth
                SignIn.js
                SignOut.js
            ../src/components/dashboard
                Dashboard.js
                Notifications.js
            ../src/components/layout
                Navbar.js
                SignedInLinks.js
                SignedOutLinks.js
            ../src/components/project
                CreateProject.js
                ProjectDetails.js
                ProjectList.js
                ProjectSummary.js                      //Will be nested with ProjectList.js
            
        Remove 
            ../src/App.test.js, 
            ../src/logo.svg, 
            ../src/App.css
            
        App.js
            Remove imports (ie logo and App.css)
            Remove header class

    App.js
        import React from 'react';
        import {BrowserRouter} from 'react-router-dom'  //After installing React DOM
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        <hi>ReactApp</h1>
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Navbar

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js
            Notifications.js
        src/components/layout
            Navbar.js
            SignedInLinks.js
            SignedOutLinks.js
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js
            ProjectSummary.js 
        src 
            App.js (Topic 2)

    Navbar.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import SignedInLinks from './SignedInLinks'
        import SignedOutLinks from './SignedOutLinks'
        
        const Navbar = () => {
            return (
                <nav className="nav-wrapper grey darken-3">
                    <div className="container">
                        <Link to='/' className="brand-logo">React App</Link>
                        <SignedInLinks />
                        <SignedOutLinks />
                    </div>
                </nav>
            )
        }
        export default Navbar

    App.js
        import React from 'react';
        import {BrowserRouter} from 'react-router-dom'
        import Navbar from './components/layout/Navbar'
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        //<hi>ReactApp</h1>
                        <Navbar />
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;

    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedInLinks = () => {
            return (
                <ul className="right">
                    <li><NavLink to ='/'>New Project</NavLink></li>
                    <li><NavLink to ='/'>Log Out</NavLink></li>
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>
                </ul>
            )
        }
        export default SignedInLinks

    SignedOutLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedOutLinks = () => {
            return (
                <ul className="right">
                    <li><NavLink to ='/'>Signup</NavLink></li>
                    <li><NavLink to ='/'>Login</NavLink></li>
                </ul>
            )
        }
        export default SignedOutLinks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Dashboard
    
    Read 8 points
    
    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js
            Notifications.js
        src/components/layout
            Navbar.js                     (Topic 3)
            SignedInLinks.js              (Topic 3)
            SignedOutLinks.js             (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js
            ProjectSummary.js 
        src 
            App.js                        (Topic 3)

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'                        //04. Import ProjectList file
        
        class Dashboard extends Component {
            render() {
                return(
                    <div className="dashboard container">
                        <div className="row">
                            //<div className="col s12 m6"></div>                //01. For small screens, 12 columns. Medium sized screen, 6 columns - Project on the Left
                            <div className="col s12 m6">
                                <ProjectList />                                 //05. Link to ProjectList
                            </div>
                            
                            //<div className="col s12 m5 offset-m1"></div>      //02. Medium size screen 5 columns where 1 is for spacing - Notifications on the right
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        export default Dashboard

    Notifications.js
        import React from 'react'
        
        const Notifications = () => {
            return (
                <div>
                    <p>Notifications</p>
                </div>
            )
        }
        export default Notifications

    ProjectList.js (Functional component)
        import React from 'react'

        const ProjectList = () => {
            return (
                <div className="project-list section">                              //03. Add 3 cards
                
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                    <div className="card z-depth-0 project-summary">
                        <div className="card-content grey-text text-darken-3">
                            <span className="card-title">Project Title</span>
                            <p>Posted by ...</p>
                            <p className="grey-text">Date</p>
                        </div>
                    </div>
                    
                </div>
            )
        }
        export default ProjectList

    App.js
        import React from 'react';
        //import {BrowserRouter} from 'react-router-dom'
        import {BrowserRouter, Switch, Route} from 'react-router-dom'              //07. Add Switch and Route
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard'                   //08. Import Dashboard
        
        function App() {
            return(
                <BrowserRouter>
                    <div className="App">
                        <Navbar />
                        //<Switch></Switch>                                        //06. For loading 1 route at a time
                        <Switch>
                            <Route path='/' component={Dashboard} />
                        </Switch> 
                    </div>
                </BrowserRouter>                
            );
        }
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Project Summary Component

    Nesting ProjectSummary.js to ProjectList.js
    Refer to the cards in ProjectList.js
    Instead of repeating the cards, ProjectSummary will use templates
    This will make it more modular
    ProjectSummary.js will be a functional component

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                  (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                     (Topic 3)
            SignedInLinks.js              (Topic 3)
            SignedOutLinks.js             (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js                (Topic 4)
            ProjectSummary.js 
        src 
            App.js                        (Topic 4)
    
    ProjectSummary.js                                            //01. Create the file as functional component
        import React from 'react'

        const ProjectSummary = () => {
            return (  
                <div className="card z-depth-0 project-summary">
                    <div className="card-content grey-text text-darken-3">
                        <span className="card-title">Project Title</span>
                        <p>Posted by ...</p>
                        <p className="grey-text">Date</p>
                    </div>
                </div>
            )
        }
        export default ProjectSummary

    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'            //02. Import ProjectSummary.js

        const ProjectList = () => {
            return (
                <div className="project-list section"> 
                    <ProjectSummary />                           //03. Replace the entire chuck of codes to a single line
                    <ProjectSummary />
                    <ProjectSummary />
                </div>
            )
        }
        export default ProjectList

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Project Details Component
    
    URL Routing for individual cards
    Intall the VSCode extension "ES7 React/Redux/GraphQL/ReactNative snippets" to VSCode
    
    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 4)
    
    ProjectDetails.js
        import React from 'react'
        
        //const ProjectDetails = () => {
        const ProjectDetails = (props) => {                                             //04. Grabs URL router property details from App.js
            //console.log(props);                                                       //05. For testing. This will show the prop properties in console
            const id = props.match.params.id;                                           //06. Stores prop properties as a variable named "id"
            return(
                <div className="container section project-details">
                    <div className="card z-depth-0">                                    //"z-depth-0 removes the drop shadow
                        <div className="card-content">
                            //<span className"card-title">Project Title</span>
                            <span className"card-title">Project Title - {id}</span>     //07. Prints out the id (coincides with URL id) number on screen
                            <p>Long long paragraph</p>
                        </div>
                        <div className="card-action gret lighten-4 grey-text">
                            <div>Posted by AuthorName</div>
                            <div>Today's date</div>
                        </div>
                    </div>
                </div>
            )
        }
        export default ProjectDetails

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails'                 //01. Import ProjectDetails.js
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                //<Route path='/' component={Dashboard} />
                                <Route exact path='/' component={Dashboard} />              //03. Added "exact" to avoid URL conflict with ProjectDetails URL path
                                <Route path='/project/:id' component={ProjectDetails} />    //02. Add ProjectDetails filepath
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Login and Signup Component

    App Structure
        src/components/auth
            SignIn.js
            SignOut.js
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 6)

    SignIn.js                                                      
        import React, {Component} from 'react'                                                         //01. Create SignIn.js file
        
        class SignIn extends Component {
            state = {
                email:'',                                                                              //08. Define state
                password:''
            }
            handleChange = (e) => {                                                                    //04. Add event 
                //console.log(e)
                this.setState({                                                                        //09. Add setState
                    //[e.target.id]                                                                    //10. This will capture any of the id (password/email) being updated first            
                    [e.target.id]: e.target.value                                                      //11. Retrieves the value of the update
                })
            }
            handleSubmit = (e) => {    
                //console.log(e)
                e.preventDefault();                                                                    //12. Prevent default refresh
                console.log(this.state);                                                               //13. Prints the current state to the console
            }
            render() {
                return(
                    <div className="container">
                        //<form onSubmit={} className="white">
                        <form onSubmit={this.handleSubmit} className="white">                           //05. Add handleSubmit event tag
                            <h5 className="grey-text text-darken-3">Sign In</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />          //06. Add handleChange event
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                //<input type="password" id="password" onChange={} />
                                <input type="password" id="password" onChange={this.handleChange} />    //07. Add handleChange event. Test app at this point
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Login</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default SignIn

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails' 
        import SignIn from './components/auth/SignIn'                                                     //02. Import SignIn
        import SignUp from './components/auth/SignUp'                                                     //18. Import SignUp
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                <Route exact path='/' component={Dashboard} /> 
                                <Route path='/project/:id' component={ProjectDetails} />  
                                <Route path='/signin' component={SignIn} />                               //03. Add signin component
                                <Route path='/signup' component={SignUp} />                               //19. Add signup component
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;

    SignUp.js                                                                                             //14. Copy paste from SignIn.js
        import React, {Component} from 'react'   
        
        class SignUp extends Component {
            state = {
                email: '',             
                password: '',
                firstName: '',                                                                            //15. Adds firstname and lastname
                lastName: ''
            }
            handleChange = (e) => {  
                this.setState({                 
                    [e.target.id]: e.target.value     
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();     
                console.log(this.state);  
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">  
                            <h5 className="grey-text text-darken-3">Sign Up</h5>
                            <div className="input-field">
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" onChange={this.handleChange} />  
                            </div>
                            <div className="input-field">
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">                                                   //16. Adds Lastname
                                <label htmlFor="firstName">First Name</label>
                                <input type="text" id="firstName" onChange={this.handleChange} /> 
                            </div>   
                            <div className="input-field">                                                   //17. Adds Lastname
                                <label htmlFor="lastName">Last Name</label>
                                <input type="text" id="lastName" onChange={this.handleChange} /> 
                            </div>                            
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Sign Up</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default SignUp

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Create Project Form (Another App)

    Copy Paste the entire SignIn.js into CreateProject.js

    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 5)
            ProjectSummary.js           (Topic 5)
        src 
            App.js                      (Topic 7)

    CreateProject.js                                                      
        import React, {Component} from 'react'                 //01. Paste content from SignIn.js
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                console.log(this.state);    
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                //<input type="password" id="password" onChange={this.handleChange} />                            //02. No longer in use. Textarea will be used instead
                                //<textarea id="content" className="materialize-textare"></textarea>                              //03. Add textarea
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   //04. Add handleChange event
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        export default CreateProject

    App.js
        import React, {Component} from 'react';
        import {BrowserRouter, Switch, Route} from 'react-router-dom'   
        import Navbar from './components/layout/Navbar'
        import Dashboard from './components/dashboard/Dashboard' 
        import ProjectDetails from './components/projects/ProjectDetails' 
        import SignIn from './components/auth/SignIn'          
        import SignUp from './components/auth/SignUp'    
        import CreateProject from './components/projects/CreateProject'                  //05. Import CreateProject.js
        
        class App extends Component {
            render() {
                return(
                    <BrowserRouter>
                        <div className="App">
                            <Navbar />
                            <Switch>
                                <Route exact path='/' component={Dashboard} /> 
                                <Route path='/project/:id' component={ProjectDetails} />  
                                <Route path='/signin' component={SignIn} />             
                                <Route path='/signup' component={SignUp} />       
                                <Route path='/create' component={CreateProject} />       //06. Add CreateProject route
                            </Switch> 
                        </div>
                    </BrowserRouter>                
                );
            }
        }    
        export default App;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Nav Links and CSS
    
    Create image folder (img) under public folder and add a background *.png for background
        ../project/public/img/bg.png
    
    App Structure
        src/components/auth
            SignIn.js                       (Topic 7)
            SignOut.js                      (Topic 7)
        src/components/dashboard
            Dashboard.js                    (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                       (Topic 3)
            SignedInLinks.js                (Topic 3)
            SignedOutLinks.js               (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js               (Topic 6)
            ProjectList.js                  (Topic 5)
            ProjectSummary.js               (Topic 5)
        src 
            App.js                          (Topic 7)
            index.css

    SignedInLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedInLinks = () => {
            return (
                <ul className="right">
                    //<li><NavLink to ='/'>New Project</NavLink></li>
                    <li><NavLink to ='/create'>New Project</NavLink></li>
                    <li><NavLink to ='/'>Log Out</NavLink></li>
                    <li><NavLink to ='/' className='btn btn-floating pink lighten-1'>Icon</NavLink></li>
                </ul>
            )
        }
        export default SignedInLinks

    SignedOutLinks.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        
        const SignedOutLinks = () => {
            return (
                <ul className="right">
                    //<li><NavLink to ='/'>Signup</NavLink></li>
                    //<li><NavLink to ='/'>Login</NavLink></li>
                    <li><NavLink to ='/signup'>Signup</NavLink></li>
                    <li><NavLink to ='/signin'>Login</NavLink></li>
                </ul>
            )
        }
        export default SignedOutLinks

    index.css
        html{
            min-height: 100%;                          //Set minimum height of background image
        }
        body{
            margin: 0;
            padding: 0;
            font-family: sans-serif;
            background: url(/img/bg.png) no-repeat;   //Add background path
            background-size: 100%;                    //Image full size
            background-position: bottom;              //Image starts at bottom
            background-color: #95e8f3;                //Background base color behind image (Skyblue)
            min-height: 100%;                         //Set minimum height of background image
        }
        form{
            padding: 20px;                            //Add paddings around Input text boxes
            margin-top: 60px;                         //Add top margins on Input text boxes
        }
        form button, form h5{
            margin: 20px 0;                           //Add margin to submit button
        }
        input[type=text]:not(.browser-default):focus:not([readonly]),
        input[type=email]:not(.browser-default):focus:not([readonly]),
        input[type=password]:not(.browser-default):focus:not([readonly]),
        textarea.materialize-textarea:focus:not([readonly]){
            border-color: #ec407a;
            box-shadow: none;
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Add Redux and combinedReducers

    Install Redux and React Redux
        Enter project folder in terminal
            E:\ABCD\reactapp\
        Type in "npm install redux react-redux"

    App Structure
        src/components/auth
            SignIn.js                       (Topic 7)
            SignOut.js                      (Topic 7)
        src/components/dashboard
            Dashboard.js                    (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                       (Topic 3)
            SignedInLinks.js                (Topic 3)
            SignedOutLinks.js               (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js               (Topic 6)
            ProjectList.js                  (Topic 5)
            ProjectSummary.js               (Topic 5)
        src 
            App.js                          (Topic 7)
            index.css
    
    Using Multiple Reducers and combine all reducers as one single rootReducer.js
        Refer to React Fundamentals, Topic 38
        https://github.com/Izaat/references/blob/main/React%20Fundamentals
        Create "store/reducers" under src
            ../src/store/reducers
            Add "authReducer.js"
            Add "projectReducer.js"
            Add "rootReducer.js"
        
    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        import {createStore} from 'redux'                                  //01. Import createStore function
        import rootReducer from './store/reducers/rootReducer'             //10. Import rootReducer.js
        import {Provider} from 'react-redux'                               //12. This is the binder for redux with react
        
        //const store = createStore();                                     //02. Create a store with createStore function and save in "store"
        const store = createStore(rootReducer);                            //11. Add in "rootReducer"
        
        //ReactDOM.render(<App />, document.getElementById('root'));
        //ReactDOM.render(<Provider><App /></Provider>, document.getElementById('root'));              //13. Wraps App tag with Provider tag
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  //14. Adds the store
        registerServiceWorker();
        
    authReducer.js
        const initState = {}                                                //05. Create "initState" as empty state
        
        //const authReducer = (state, action) => {}                         //03. Add authReducer function
        //const authReducer = (state = initState, action) => {}             //04. If no state present, then "initState" will be used
        const authReducer = (state = initState, action) => {
            return state
        }
        export default authReducer

    projectReducer.js
        const initState = {}   
        
        const projectReducer = (state = initState, action) => {
            return state
        }
        export default projectReducer

    rootReducer.js
        import authReducer from './authReducer'                               //06. Import authReducer.js
        import authReducer from './projectReducer'                            //07. Import projectReducer.js
        import {combinedReducers} from 'redux'                                //08. Import combinedReducers to combine both reducers as one to form rootReducer
        
        //const rootReducer = combinedReducers({});                           //09. The "{}" is to mention which reducers to be combined
        const rootReducer = combinedReducers({
            auth: authReducer,
            project: projectReducer
        });                          
        export default rootReducer

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Adding Dummy Beta
    
    Read 16 points
    Create dummy data in ProjectReducer
    Retrieve data inside ProjectList from Dashboard (container component)
    Pass data to ProjectSummay as props via ProjectList from Dashboard

    App Structure
        src/components/auth
            SignIn.js                 (Topic 7)
            SignOut.js                (Topic 7)
        src/components/dashboard
            Dashboard.js              (Topic 4)
            Notifications.js
        src/components/layout
            Navbar.js                 (Topic 3)
            SignedInLinks.js          (Topic 3)
            SignedOutLinks.js         (Topic 3)
        src/components/project
            CreateProject.js
            ProjectDetails.js         (Topic 6)
            ProjectList.js            (Topic 5)
            ProjectSummary.js         (Topic 5)
        src 
            App.js                    (Topic 7)
            index.css                 (Topic 9)
            index.js                  (Topic 10)
        src/store/reducers
            authReducer.js            (Topic 10)
            projectReducer.js         (Topic 10)
            rootReducer.js            (Topic 10)

    projectReducer.js
        //const initState = {}   
        //const initState = {projects:[]}                                  //01. Create an empty array
        const initState = {
            projects: [
                {id: '1', title: 'title 1', content: 'content 1'},         //02. Add arrays
                {id: '2', title: 'title 2', content: 'content 2'},
                {id: '3', title: 'title 3', content: 'content 3'}
            ]
        }   
        
        const projectReducer = (state = initState, action) => {
            return state
        }
        export default projectReducer

    Dashboard.js
        import React, {Component} from 'react'
        import Notifications from './Notifications'
        import ProjectList from '../project/ProjectList'   
        import {connect} from 'react-redux'                                //03. Adding the binder as mentioned in topic 10
        
        class Dashboard extends Component {
            render() {
                //console.log(this.props);                                 //08. Test point, "Projects" property with 3 elements will appear in console > object
                const {projects} = this.props;                             //09. To push data to ProjectList.js, first need to retrieve projects data from props
                return(
                    <div className="dashboard container">
                        <div className="row">
                            <div className="col s12 m6">
                                //<ProjectList />        
                                <ProjectList projects={projects} />        //10. Pushing data to ProjectList
                            </div>
                            
                            <div className="col s12 m5 offset-m1">
                                <Notifications />
                            </div>
                        </div>
                    </div>
                )
            }
        }
        
        //const mapStateToProps = (state) => {}                //05. Add Map state from the store to the props
        const mapStateToProps = (state) => {
            return {
                projects: state.project.projects               //06. "project" from rootReducer, "projects" from projectReducer
            }
        }     
        
        //export default Dashboard
        //export default connect()(Dashboard)                  //04. Wraps Dashboard function with connect
        export default connect(mapStateToProps)(Dashboard)     //07. Define which component "connect" will be connected to

    ProjectList.js (Functional component)
        import React from 'react'
        import ProjectSummary from './ProjectSummary'      

        //const ProjectList = () => {
        const ProjectList = ({projects}) => {                                      //11. To retrieve data from Dashboard.js
            return (
                <div className="project-list section"> 
                    //<ProjectSummary />                                           //12. No longer needed since reducers will be used
                    //<ProjectSummary />
                    //<ProjectSummary />
                    
                    //{projects && projects.map(project => {})}                    //13. Mapping through the project. If there data exists in "projects", then do "project => {}"
                    {projects && projects.map(project => {
                        return(
                            <ProjectSummary project={project} key={project.id} />  //14. Pushes "project" to ProjectSummary and assign key value to individual project
                        )
                    })}
                </div>
            )
        }
        export default ProjectList

    ProjectSummary.js                 
        import React from 'react'

        //const ProjectSummary = () => {
        const ProjectSummary = ({project}) => {                                //15. Receives "project" from ProjectList
            return (  
                <div className="card z-depth-0 project-summary">
                    <div className="card-content grey-text text-darken-3">
                        //<span className="card-title">Project Title</span>
                        <span className="card-title">{project.title}</span>    //16. Output the title name into display
                        <p>Posted by ...</p>
                        <p className="grey-text">Date</p>
                    </div>
                </div>
            )
        }
        export default ProjectSummary

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Async code with Redux (Using Redux Thunk)
    
    Read 17 points
    Manipulating external database (external to the app) requires time to retrieve and React reducer may already have loaded before retrieval
    Therefore performing data retrieval from the reducer is eliminated 
    Using components on the other hand can't handle external database manipulation
    The only method is to use dispatch action and run asynchronous code to grab data from external database, continues with dispatch, pass to reducer
        Dispatch Action > Asynchronous Code > Reducer > Updates Central State
        Note that in Redux, Dispatch Action directly pass an action to Reducers, Refer to React Fundamentals, Topic 33 Redux Map
        The Asynchronous code is called Redux-Thunk
    
    Thunk:
        Halts the Dispatch Action
        Then it performs an async request
        And then resumes the dispatch
        
    Install Thunk to App Project directory
        Enter project folder in terminal
            E:\ABCD\reactapp\
        Type in "npm install redux-thunk"        
    
    Create a new folder "actions" in ../src/store
        src/store/actions
            projectActions.js
    
    App Structure
        src/components/auth
            SignIn.js                   (Topic 7)
            SignOut.js                  (Topic 7)
        src/components/dashboard
            Dashboard.js                (Topic 11)
            Notifications.js
        src/components/layout
            Navbar.js                   (Topic 3)
            SignedInLinks.js            (Topic 3)
            SignedOutLinks.js           (Topic 3)
        src/components/project
            CreateProject.js            (Topic 8)
            ProjectDetails.js           (Topic 6)
            ProjectList.js              (Topic 11)
            ProjectSummary.js           (Topic 11)
        src 
            App.js                      (Topic 7)
            index.css                   (Topic 9)
            index.js                    (Topic 10)
        src/store/reducers
            authReducer.js              (Topic 11)
            projectReducer.js           (Topic 11)
            rootReducer.js              (Topic 10)

    index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        //import {createStore} from 'redux'  
        import {createStore, applyMiddleware} from 'redux'                 //02. Import applyMiddleware from redux
        import rootReducer from './store/reducers/rootReducer'       
        import {Provider} from 'react-redux'           
        import thunk from 'redux-thunk'                                    //01. Import Thunk
        
        //const store = createStore(rootReducer);   
        const store = createStore(rootReducer, applyMiddleware(thunk));    //03. Apply Thunk as the Middleware. This enhances the store and also able to add multiple middlewares
        
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));  
        registerServiceWorker();

    projectActions.js
        export const createProject = (project) => {
            //return {                                                     //04. Returns an object but with Thunk, a function can be returned
            //    type: 'ADD_PROJECT',
            //    project: project
            //}
            
            //return () => {}                                              //05. To return a function
            //return (dispatch, getState) => {}                            //06. Add getState and dispatch (send to reducer). 
            return (dispatch, getState) => {
                //EMPTY                                                    //07. Make async call to database
                dispatch({type: 'CREATE_PROJECT', project});               //08. Continues the dispatch action to reducer
            }
        };

    CreateProject.js                                                      
        import React, {Component} from 'react'    
        import {connect} from 'react-redux'                                //10. Add binder as mentioned in topic 10
        import {createProject} from '../../store/actions/projectActions'   //09. Import projectActions.js
        
        class CreateProject extends Component {
            state = {
                title:'',              
                content:''
            }
            handleChange = (e) => {   
                this.setState({                 
                    [e.target.id]: e.target.value  
                })
            }
            handleSubmit = (e) => {    
                e.preventDefault();       
                //console.log(this.state);    
                this.props.createProject(this.state)                         //15. Add createProject props to pass into "project" in point 13
            }
            render() {
                return(
                    <div className="container">
                        <form onSubmit={this.handleSubmit} className="white">   
                            <h5 className="grey-text text-darken-3">Create new project</h5>
                            <div className="input-field">
                                <label htmlFor="title">Title</label>
                                <input type="text" id="title" onChange={this.handleChange} /> 
                            </div>
                            <div className="input-field">
                                <label htmlFor="content">Project Content</label>
                                <textarea id="content" className="materialize-textare" onChange={this.handleChange}></textarea>   
                            </div>
                            <div className="input-field">
                                <button className="btn pink light-1 z-depth-0">Create</button>
                            </div>
                        </form>
                    </div>
                )
            }
        }
        
        //const mapDispatchToProps = (dispatch) => {}                          //12. Map dispatch to props
        const mapDispatchToProps = (dispatch) => {
            return {
                createProject: (project) => dispatch(createProject(project))   //13. Takes in individual project "(project) =>" and dispatch an action creator that takes in the "(project) =>"
            }
        }
        
        //export default CreateProject
        //export default connect()(CreateProject)                              //11. Wrap CreateProject with binder
        export default connect(null, mapDispatchToProps)(CreateProject)        //14. Add mapDispatchToProps as the second parameter where the first parameter is null since mapStateToProps is not available

    projectReducer.js
        const initState = {
            projects: [
                {id: '1', title: 'title 1', content: 'content 1'},        
                {id: '2', title: 'title 2', content: 'content 2'},
                {id: '3', title: 'title 3', content: 'content 3'}
            ]
        }   
        
        const projectReducer = (state = initState, action) => {
            //switch()                   
            //switch(action.type) {}                                          //16. Detects createProject
            switch(action.type) {
                case 'CREATE_PROJECT':
                    console.log('created project', action.project)            //17. Prints out "Created project" and project action received
            }  
            return state
        }
        export default projectReducer

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Create Firebase Project
    
    Sign up and create project
        firebase.google.com
        Go to Console
        Add a new project
            Project Name: reactapp
        Click on "Create Project"
        
    Setup (From App Dashboard)
        Click on "Add Firebase to webapp"
        Copy "Initialize Firebase" script

    Install Firebase in VSCode
        In Terminal, enter application directory (reactapp folder) and install firebase
        Type in "npm install firebase"
    
    Create "config" folder in src folder
        ../src/config/fbConfig.js                              //01. Create Firebase configuration file

    fbConfig.js
        import firebase from 'firebase/app'                    //03. Import firebase core features. 
        import 'firebase/firestore'                            //04. Import Firebase database features
        import 'firebase/auth'                                 //05. Import firebase authentication features
        
        //Initialize Firebase                                  //02. Paste in the copied scripts from Firebase
        var config = {
            apiKey = "code",
            authDomain: "reactapp.firebaseapp.com",
            databaseURL: "https://reactapp.firebaseio.com",
            projectId: "reactapp",
            storageBucket: "reactapp.appspot.com",
            messagingSenderId: "code"
        };
        firebase.initializeApp(config);
        //firebase.firestore()                               //06. Initialize firestore
        //firebase.firestore().settings({})                  //07. Add settings with object
        firebase.firestore().settings({timestampsInSnapshots: true}); //08. Firebase works with timestamps to work properly
        
        export default firebase;                             //08. Enable exporting of firebase for interaction within the app

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Firestore Data & Collections
    
    Continued from Topic 13
    
    Firestore is a NoSQL database
    The database deals with documents and collections of documents (projects)
    Each document has key value pairs
        Title:            //Key
        'Book title'      //Value in String
    Each project contains 3 collections
        Project Collection
            Title, content, authorFirstName, authorLastName, authorId, timestamps
        Users Collection  
            Info about app users
        Notifications Collection
            Info about notifications
        
    Create Database
        In Firebase main dashboard, click on "Database"
        Left panel Project Overview > Develop > Database
        Create database
        Select "Start in test mode" and click on "enable"
        Firestore database dashboard will open
    
    Firestore database dashboard
        Rules Tab is where the database can be locked and made inaccessible to public after publishing the project
        Data Tab 
            Click on "Add collection"
            Set collection
                Collection ID: projects
            Add first document 
                Document ID: *Leave black as it auto generates*
                    Field#1: 
                        Field: title
                        Type: string
                        Value: Book Title 01
                    Field#2: 
                        Field: content
                        Type: string
                        Value: Book 01 Content
                    Field#3: 
                        Field: authorFirstName
                        Type: string
                        Value: Author01a
                    Field#4: 
                        Field: authorLastName
                        Type: string
                        Value: Author01b
                Click on save and "project" appears in collection directory column 
            Click on "projects" in collection column and a "document id" appears in "document column"    
            Click on "document id" and a list of fields (authorFirstName, title, content, etc) appear in field column
    
    To add collection, document and field via React instead of physically logging into Firebase to create them

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Connecting Redux to Firebase





















