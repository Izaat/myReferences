///////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Basics
02. Add a Dictionary, Sub section within a tab, and sub folder within a section
03. Installing your own script
04. Shader Library
05. Keyframe and Modifier
06. Popup Dialog Box
07. Text Tool
08. Custom Node Group
09. Custom Drawing / Layout Improvements / Texts with Extrude
10. Custom Keymap (3 Parts)
11. Updated Registration Method
12. Scripting Tips
13. Numerator / Drop Down Menu

///////////////////////////////////////////////////////////////////////////////////
01. Basics
    Enable Pyhton Tooltips (Shows the python code when you hover over everything)
        Main Menu > Edit > Preferences > Interface > Python Tooltip
    Open 3 way Split screen in viewport 
    Leave 1 viewport as 3D view
    Set the other viewport to Python Editor (Use Text editor)
        Viewport > Top left hand corner > Scripting > Text Editor
        Save this file as *.py
    Set the another to info view
        Viewport > Top left hand corner > Scripting > Info

    //Program - Basic Structure    
        bl_info = {
            "name": "Add Mesh Cube",
            "author": "Your Name"
            "version": (1,0)
            "blender": (2, 91, 0),
            "location": "View3D > Toolshelf",
            "description": "Adds new Mesh object",
            "warning": "",
            "wiki_url": "",
            "category": "Add Mesh",
        }

        import bpy
        
        class addMesh(bpy.types.Panel):
            bl_label = "Text Tool"
            bl_idname = "OBJECT_PT_TextTool"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            bl_category = 'Text Tool' 
            
            def draw(self, context):
                layout = self.layout    #NOTE: layout works by adding object in a new row
                
                row = layout.row()      #NOTE: row works by adding objects side by side
                row.operator("mesh.primitive_cube_add")
        
        def register():
            bpy.utils.register_class(addMesh)
            
        def unregister():
            bpy.utils.unregister_class(addMesh)
            
        if __name__=="__main__":
            register()    

    //Program - Add New Tab or New Category in a Tab
        import bpy
        
        class TestPanel(bpy.types.Panel):
            bl_label = "Test Panel"
            bl_idname = "PT_TestPanel"
            bl_space_type = 'VIEW_3D'    #Space type represents the "ui name", see the name in Info panel
            bl_region_type = 'UI'   #UI means the hidden panel in 3D viewport
            #bl_category = 'Tool'    #Tool means the Tab name in the hidden panel.
            bl_category = 'New Tab'     #This line just creates a new tab in the hidden panel. Use 'Tool' instead of 'New Tab'
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()      #This creates a new row in the new panel
                row.label(text= "Add an object", icon='CUBE')     #This adds menu title in the new Ui
                row = layout.row()      #This creates another row in the new panel (for the action button) below
                row.operator("mesh.primitive_cube_add")     #This adds an action button. 
                
                #To find another action name class, see in info panel when you add an object traditionally. (~.mesh.primitive_uv_sphere_add = Add UV Sphere)
                row = layout.row()
                row.operator("mesh.primitive_uv_sphere_add", icon='SPHERE')
                
                #Similar for adding text where is is an object instead of mesh
                row = layout.row()
                row.operator("object.text_add", icon="FILE FONT", text = "Font Button")
                

        def register():     
            bpy.utils.register_class(TestPanel)     #This registers the new class in Blender

        def unregister():
            bpy.utils.unregister_class(TestPanel)     #This unregisters the new class in Blender
        
        #From Python Menu > Templates > Python > Ui Panel
        if __name__ == "__main__":
            register()
            
        #Save and run script. New tab will appear in 3D viewport's hidden panel
    
    //Controls
        Save Script
            ALT+S
        Open Icon Viewer (Needs to be installed): 
            Main menu > Edit > Preferences > Add-Ons > Search Bar: icon > Install Icon Viewer
            CTRL+T
            Icon viewer will appear as dropdown menu
        Run script
            In editor menu, scroll through the right and click on "Run Sript" button            
        Check Error
            Main Menu > Windows > Toggle System Console

///////////////////////////////////////////////////////////////////////////////////
02. Add a Dictionary, Sub section within a tab, and sub folder within a section

    //Program - Add New Tab or New Category in a Tab
        
        bl_info = {
            "name" : "Object Adder",
            "author" : "Author Name",
            "version": (1, 0),   #Version of the script
            "blender": (2, 91, 0), #Current version of Blender used
            "location": "View3D > Hidden Panel",
            "warning": "",  #blank
            "wiki_url": "", #Your link
            "category": "Add Mesh",
        }
        
        import bpy
        
        class TestPanel(bpy.types.Panel):
            bl_label = "Test Panel"
            bl_idname = "PT_TestPanel"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            #bl_category = 'Tool' 
            bl_category = 'New Tab'
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()  
                row.label(text= "Add an object", icon='CUBE') 
                row = layout.row()  
                row.operator("mesh.primitive_cube_add") 
                
                row = layout.row()
                row.operator("mesh.primitive_uv_sphere_add", icon='SPHERE')
                
                #Similar for adding text where is is an object instead of mesh
                row = layout.row()
                row.operator("object.text_add", icon="FILE FONT", text = "Font Button")
                
        class SubPanelA(bpy.types.Panel):
            bl_label = "Sub Panel A"
            bl_idname = "Sub_Panel_A"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            bl_category = 'New Tab'
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()  
                row.label(text= "This is Sub Panel A", icon='OBJECT_ORIGIN')                 

        class SubPanelB(bpy.types.Panel):
            bl_label = "Sub Panel B"
            bl_idname = "Sub_Panel_B"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            bl_category = 'New Tab'
            bl_parent_id = 'PT_TestPanel' #Parents this subfolder to a main folder
            bl_options = {'DEFAULT_CLOSED'} #Close subtree by default
            
            def draw(self, context):
                layout = self.layout
                obj = context.object        #Used for the shorter version to add scaling below
                
                row = layout.row()  
                row.label(text= "This is Sub Panel A", icon='OBJECT_ORIGIN')                
                
                row = layout.row()      
                row.prop(context.object, "scale")      #Adds scaling method from properties tab
                
                row = layout.row()      
                row.prop(obj, "scale")      #Shorter version to add scaling method 
                
                col = layout.column()      
                col.prop(obj, "scale")      #Scaling method but in a  column
                
                layout.scale_y = 1.4    #Scaling the buttons
                
        def register():     
            bpy.utils.register_class(TestPanel)
            bpy.utils.register_class(SubPanelA)
            bpy.utils.register_class(SubPanelB)
        def unregister():
            bpy.utils.unregister_class(TestPanel)
            bpy.utils.unregister_class(SubPanelA)
            bpy.utils.unregister_class(SubPanelB)
        if __name__ == "__main__":
            register()

///////////////////////////////////////////////////////////////////////////////////
03. Installing your own Script
    
    Main Menu > Edit > Preferences > Add-Ons > Click on Install (Directory window will appear)
    Navigate to the folder the file being saved at
    Select the file and click install
    Python script will appear in the add-on list
    Check box and click install
    Now everytime Blender starts, the addon will activate automatically

///////////////////////////////////////////////////////////////////////////////////
04. Shader Library

    Split view to 3 
        View #1: Shader Editor (Node Editor)
        View #2: 3D view
        View #3: Text Editor
    Create ShaderLibrary.py
    In Text Editor
        Addon Add Object
            Menu > Templates > Python > Addon Add Object
            Copy "bl_info" dictionary from "addon_add_object.py" and then unlink by clicking on "X"
            Paste the "bl_info" into the ShaderLibrary.py
        Ui Panel
            Menu > Templates > Python > Ui Panel Simple
            Copy line1 to line 13 from "ui_panel_simple.py" and then unlink by clicking on "X"
            Paste the copied text into the ShaderLibrary.py
            Change class name to ShaderMainPanel
                bl_label : Shader Library
                bl_idname = "SHADER_PT_MAINPANEL"
                bl_space_type = 'VIEW_3D' #Change to NODE_EDITOR if you want it to be displayed in the node editor
                bl_region_type = 'UI'
            Change bl_context to bl_category    
                bl_category = 'Shader Library'
        Edit draw() function
            def draw(self, context):
                layout = self.layout
                row = layout.row()
                row.label(text="Select a shader to be added.")
                row .operator('')
 
    //Program   
        bl_info = {
            "name": "Shader Library",
            "author": "Your Name"
            "version": (1,0)
            "blender": (2, 91, 0),
            "location": "View3D > Toolshelf",
            "description": "Adds new shader to your object",
            "warning": "",
            "wiki_url": "",
            "category": "Add Shader",
        }
        
        import bpy
        
        class ShaderMainPanel(bpy.types.Panel):
            bl_label = "Shader Library"
            bl_idname = "SHADER_PT_MAINPANEL"
            bl_space_type = 'VIEW_3D' #Change to NODE_EDITOR if you want it to be displayed in the node editor
            bl_region_type = 'UI'
            bl_category = 'Shader Library'
            
            def draw(self, context):
                layout = self.layout
                row = layout.row()
                row.label(text="Select a shader to be added.")
                row .operator('shader.diamond_operator')            
                
        #Create a custom Operator for the Diamond Shader
        class SHADER_OT_DIAMOND(bpy.types.Operator):
            bl_label : "Diamond"
            bl_idname = 'shader.diamond_operator'            
            
            def execute(self, context):                
                material_diamond = bpy.data.materials.new(name="Diamond")                                                                     #Create new shader diamond
                material_diamond.use_nodes = True                                                                                                                #Enable Use Nodes
                material_diamond.node_tree.nodes.remove(material_diamond.node_tree.nodes.get('Principled BSDF'))    #Remove Principled Node
                material_output = material_diamond.node_tree.nodes.get('Material Output')                                               #Add Material Output node                
                material_output.location = (400,0)                                                                                                                    #Set Node location inside Node Editor (Horizontal axis = 400, Vertical axis = 0)
                
                #Glass 1
                glass1_node = material_diamond.node_tree.nodes.new('ShaderNodeBsdfGlass')       #Add Glass BSDF
                glass1_node = (-600, 0)                                                                                                  #Set Node location
                glass1_node.inputs[0].default_value = (1, 0, 0, 1)                                                         #Set RGBA (Red, Green, Blue, Alpha) to the node
                glass1_node.inputs[2].default_value = 1.450                                                                #Set IOR Value

                #Glass 2
                glass2_node = material_diamond.node_tree.nodes.new('ShaderNodeBsdfGlass')       #Add Glass BSDF
                glass2_node = (-600, -150)                                                                                             #Set Node location
                glass2_node.inputs[0].default_value = (0, 1, 0, 1)                                                         #Set RGBA (Red, Green, Blue, Alpha) to the node
                glass2_node.inputs[2].default_value = 1.450                                                                #Set IOR Value to default

                #Glass 3
                glass3_node = material_diamond.node_tree.nodes.new('ShaderNodeBsdfGlass')       #Add Glass BSDF
                glass3_node = (-600, -300)                                                                                             #Set Node location
                glass3_node.inputs[0].default_value = (0, 0, 1, 1)                                                         #Set RGBA (Red, Green, Blue, Alpha) to the node
                glass3_node.inputs[2].default_value = 1.450                                                                #Set IOR Value to default
                
                #Add1 Shader Node
                add1_node = material_diamond.node_tree.nodes.new('ShaderNodeAddShader')        #Add Shader
                add1-node.location = (-400, -50)                                                                                    #Set location
                add1_node.label = "Add 1"                                                                                             #Set label
                add1_node.hide = True                                                                                                   #Minimize the node
                add1_node.select = False                                                                                               #Deselect Node

                #Add2 Shader Node
                add2_node = material_diamond.node_tree.nodes.new('ShaderNodeAddShader')        #Add Shader
                add2-node.location = (-100, 0)                                                                                       #Set location
                add2_node.label = "Add 2"                                                                                             #Set label
                add2_node.hide = True                                                                                                   #Minimize the node
                add2_node.select = False                                                                                               #Deselect Node

                #Glass 4
                glass4_node = material_diamond.node_tree.nodes.new('ShaderNodeBsdfGlass')       #Add Glass BSDF
                glass4_node = (-150, -150)                                                                                             #Set Node location
                glass4_node.inputs[0].default_value = (1, 1, 1, 1)                                                         #Set RGBA (Red, Green, Blue, Alpha) to the node
                glass4_node.inputs[2].default_value = 1.450                                                                #Set IOR Value to default
                glass4_node.select = False
                
                #Mix Shader Node as Mix1
                mix1_node = material_diamond.node_tree.nodes.new('ShaderNodeMixShader')
                mix1_node.location = (200, 0)
                mix1_node.select = False
                
                #linking the nodes
                material_diamond.node_tree.links.new(glass1_node.outputs[0], add1_node.inputs[0])
                material_diamond.node_tree.links.new(glass2_node.outputs[0], add1_node.inputs[1])
                material_diamond.node_tree.links.new(add1_node.outputs[0], add2_node.inputs[0])
                material_diamond.node_tree.links.new(glass3_node.outputs[0], add2_node.inputs[1])
                material_diamond.node_tree.links.new(add2_node.outputs[0], mix1_node.inputs[1])
                material_diamond.node_tree.links.new(glass4_node.outputs[0], mix1_node.inputs[2])
                material_diamond.node_tree.links.new(mix1_node.outputs[0], material_output.inputs[0])
                
                bpy.context.object.active_material = material_diamond
                
                return{'FINISHED'}
                
        
        def register():
            bpy.utils.register_class(ShaderMainPanel)
            bpy.utils.register_class(SHADER_OT_DIAMOND)
        def unregister():
            bpy.utils.unregister_class(ShaderMainPanel)
            bpy.utils.unregister_class(SHADER_OT_DIAMOND)
        if __name__=="__main__":
            register()

    //Add Extras Menu
        Main Menu > Edit > Preferences > Addons > Search Bar: Extra
            Enable Add Mesh: Extra Objects

    //Add Extras
        Add Object > Mesh > Extras >  Diamonds > Gem
    

///////////////////////////////////////////////////////////////////////////////////
05. Keyframe and Modifier - 12:00
    //Program

        import bpy
        
        class MainPanel(bpy.types.Panel):
            bl_label = "Main Panel"
            bl_idname = "OBJECT_PT"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = 'New Tab'
            
            def draw(self, context):
                layout = self.layout
                obj = context.object
                row = layout.row()
                row .operator('shader.neon_operator')           
                
        class SHADER_OT_NEON(bpy.types.Operator):
            bl_label = "Add Neon Shader"
            bl_idname = 'shader.neon_operator'            

            def execute(self, context):                
                cur_frame = bpy.context.scene.frame_current
                
                material_neon = bpy.data.materials.new(name="Neon")                                                                     #Create new shader neon
                material_neon.use_nodes = True                                                                                                          #Enable Use Nodes
                
                tree =  material_neon.node_tree
                
                material_neon.node_tree.nodes.remove(material_neon.node_tree.nodes.get('Principled BSDF'))    #Remove Principled Node
                material_output = material_neon.node_tree.nodes.get('Material Output')                                         #Add Material Output node                
                material_output.location = (400,0)                                                                                                        #Set Node location inside Node Editor (Horizontal axis = 400, Vertical axis = 0)
                
                #Emission Modifier
                emiss_node = material_neon.node_tree.nodes.new('ShaderNodeEmission')              #Add Emission
                emiss_node = (200, 0)                                                                                                   #Set Node location
                emiss_node.inputs[0].default_value = (0.59, 0.76, 1, 1)                                              #Set RGBA (Red, Green, Blue, Alpha) to the node
                emiss_node.inputs[1].default_value = 2                                                                       #Set Strength Value
                
                emiss_node.inputs[1].keyframe_insert("default_value", frame=cur_frame)              #Keyframe
                data_path = f'nodes["{emiss_node.name}"].inputs[1].default_value'                         #Add modifier
                    #Similar to:
                    #In Graph editor, Open modifier tab in hidden panel > Add modifier > Noise 
                fcurves = tree.animation_data.action.fcurves
                fc = fcurves.find(data_path)
                if fc:
                    new_mod = fc.modifiers.new('NOISE')
                    new_mod.strength = 10
                    new_mod.depth = 1
                
                
                material_neon.node_tree.links.new(emiss_node.outputs[0], material_output.inputs[0])
                bpy.context.object.active_material = material_neon
                
                return{'FINISHED'}

        def register():
            bpy.utils.register_class(MainPanel)
            bpy.utils.register_class(SHADER_OT_NEON)
        def unregister():
            bpy.utils.unregister_class(MainPanel)
            bpy.utils.unregister_class(SHADER_OT_NEON)
        if __name__=="__main__":
            register()        

///////////////////////////////////////////////////////////////////////////////////
06. Popup Dialog Box
    //Program - Structure
        import bpy
        class WM_OT_myOp(bpy.types.Operator):
            """Open the Add Cube Dialog box"""
            bl_label = "Add Cube Dialog Box"
            bl_idname = "wm.myop"   #TAKE NOTE OF THIS NAME ID FOR IMPLEMENTATION
            
            #Type in "bpy.ops." in console and entire list will appear
            text = bpy.props.StringProperty(name="Enter Text", default="")
            number = bpy.props.FloatProperty(name="scale Z Axis", default=1)
            
            def execute(self, context):
                bpy.ops.mesh.primitive_cube_add() #Cube will be added when the button is pressed
                return {'FINISHED'}

            def invoke(self, context, event):
                return context.window_manager.invoke_props_dialog(self)
                
        def register():
            bpy.utils.register_class(WM_OT_myOp)
        def unregister():
            bpy.utils.unregister_class(WM_OT_myOp)
            
        if __name__=="__main__":
            register()      
            bpy.ops.wm.myop('INVOKE_DEFAULT')

    //Program - Dialog Box That Affects the Cube
        import bpy
        class WM_OT_myOp(bpy.types.Operator):
            """Open the Add Cube Dialog box"""
            bl_label = "Add Cube Dialog Box"
            bl_idname = "wm.myop"            #TAKE NOTE OF THIS NAME ID FOR IMPLEMENTATION
            
            #Type in "bpy.ops." in console and entire list will appear
            text = bpy.props.StringProperty(name="Enter Text", default="")
            #number = bpy.props.FloatProperty(name="scale Z Axis", default=1)  #If using number variable
            scale = bpy.props.FloatProperty(name="Scale:", default=(1, 1, 1))       #Scale in Y
            
            def execute(self, context):
                text1 = self.text
                #n1 = self.number           #If using number variable
                s1 = self.scale
                
                bpy.ops.mesh.primitive_cube_add() #Cube will be added when the button is pressed
                obj = bpy.context.object
                obj.name = text1
                
                #obj.scale[2] = n1  #Where 0=Xaxis, 1=Yaxis, 2=Zaxis #If using number variable
                obj.scale[0] = s1[0] 
                obj.scale[1] = s1[1] 
                obj.scale[2] = s1[2] 
                
                return {'FINISHED'}

            def invoke(self, context, event):
                return context.window_manager.invoke_props_dialog(self)
                
        def register():
            bpy.utils.register_class(WM_OT_myOp)
        def unregister():
            bpy.utils.unregister_class(WM_OT_myOp)
            
        if __name__=="__main__":
            register()      
            bpy.ops.wm.myop('INVOKE_DEFAULT')

    //Implementation
        #To add script above into another python file
        #In another program, find the class and add into the function
        
        import bpy
        class TestPanel(bpy.types.Panel):
            bl_label = "Test Panel"
            bl_idname = "PT_TestPanel"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            #bl_category = 'Tool' 
            bl_category = 'New Tab'
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()  
                row.label(text= "Add an object", icon='CUBE') 
                row = layout.row()  
                #row.operator("mesh.primitive_cube_add", icon='CUBE', text,'Cube')  //the example original line to be replaced
                row.operator("wm.myop", icon='CUBE', text,'Cube')     //Replace "mesh.ube_add" to "wm.myop"

///////////////////////////////////////////////////////////////////////////////////
07. Text Tool
    /////////////////////////////////////////////////////////////////
    //Program - TextTool.py
        bl_info = {
            "name": "Text Tool",
            "author": "Your Name"
            "version": (1,0)
            "blender": (2, 91, 0),
            "location": "View3D > Toolshelf",
            "description": "Adds new Mesh object",
            "warning": "",
            "wiki_url": "",
            "category": "Add Mesh",
        }

        import bpy
        
        class OBJECT_PT_TextTool(bpy.types.Panel):
            bl_label = "Text Tool"
            bl_idname = "OBJECT_PT_TextTool"
            bl_space_type = 'VIEW_3D' 
            bl_region_type = 'UI' 
            bl_category = 'Text Tool' 
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()  
                row.operator("wm.textop", text="Add Text", icon='')
                
        class WM_OT_textOP(bpy.types.Operator):       
            bl_label = "Text Tool Operator"
            bl_idname = "wm.textop"                
            
            text = bpy.props.StringProperty(name="Enter Text")
            scale = bpy.props.FloatProperty(name="Scale:", default=1)
            
            center = bpy.props.BoolProperty(name="Center Origin", default=False)
            extrude = bpy.props.BoolProperty(name="Extrude", default=False)
            extrude_amout = bpy.props.FloatProperty(name="Extrude Amount:", default=0.06)
            
            def execute(self, context):
                
                t1 = self.text
                s = self.scale
                c = self.center
                e = self.extrude
                ea = self.extrude_amount
                
                #bpy.ops.object.text_add(enter_editmode=False, location=(0, 0, 0))
                bpy.ops.object.text_add(enter_editmode=True, location=(0, 0, 0))    #Enter edit mode upon button press
                #bpy.ops.font.delete(type='PREVIOUS_OR_SELECTION)   #Deletes letter
                bpy.ops.font.delete(type='PREVIOUS_WORD)   #Deletes entire word
                bpy.ops.font.tet_insert(text=t1)
                bpy.ops.object.editmode_toggle()
                
                if e == True:
                    bpy.context.object.data.extrude = ea
                
                if c == True:
                    bpy. context.object.data.align_x = 'CENTER'
                    bpy. context.object.data.align_y = 'CENTER'
                
                return {'FINISHED'}
        
            def invoke(self, context, event):
                return context.window_manager.invoke_props_dialog(self)
        
        def register():
            bpy.utils.register_class(OBJECT_PT_TextTool)
            bpy.utils.register_class(WM_OT_textOP)
            
        def unregister():
            bpy.utils.unregister_class(OBJECT_PT_TextTool)
            bpy.utils.unregister_class(WM_OT_textOP)
            
        if __name__=="__main__":
            register()    
    
    ///////////////////////////////////////////////////////////////////////////////////
    //TextTool.py Original v2
        bl_info = {
            "name": "Text Tool",
            "author": "Your Name",
            "version": (1, 0),
            "blender": (2, 91, 0),
            "location": "View3D > UI > Text Tool Tab",
            "description": "Adds a new Text Object with user defined properties",
            "warning": "",
            "wiki_url": "",
            "category": "Add Text",
        }
         
        import bpy
         
        class OBJECT_PT_TextTool(bpy.types.Panel):
            bl_label = "Text Tool"
            bl_idname = "OBJECT_PT_texttool"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            
            def draw(self, context):
                layout = self.layout
         
                row = layout.row()
                row = layout.row()
                row.label(text= "Click the button to add text to")
                row = layout.row()
                row.label(text= "the 3D View.")
                row = layout.row()
                row = layout.row()
                
                row = layout.split(factor= 0.45)
                row.label(text= "")
                row.operator("wm.textopbasic", text= "Add Text", icon= 'OUTLINER_OB_FONT')
                
        class OBJECT_PT_Spacing(bpy.types.Panel):
            bl_label = "Spacing"
            bl_idname = "OBJECT_PT_spacing"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            bl_parentid = "OBJECT_PT_texttool"
            bl_options = {"DEFAULT_CLOSED"}
            
            def draw(self, context):
                layout = self.layout
                text = context.object.data
         
                row = layout.row()
                row.label(text= "Set the Spacing Options")
                
                row = layout.split(factor= 0.45)
                row.label(text= "Character:")
                row.prop(text, "space_character", text= "")
         
                row = layout.split(factor= 0.45)
                row.label(text= "Word:")
                row.prop(text, "space_word", text= "")
                
                row = layout.split(factor= 0.45)
                row.label(text= "Line:")
                row.prop(text, "space_line", text= "")
                
        class WM_OT_textOpBasic(bpy.types.Operator):
            """Open the Text Tool Dialog Box"""
            bl_idname = "wm.textopbasic"
            bl_label = "                            Text Tool Operator"
              
            text : bpy.props.StringProperty(name="Enter Text", default="")
            scale : bpy.props.FloatProperty(name= "Scale", default= 1)
            rotation : bpy.props.BoolProperty(name= "Z up", default= False)
            center : bpy.props.BoolProperty(name= "Center Origin", default= False)
            extrude : bpy.props.BoolProperty(name= "Extrude", default= False)
            extrude_amount : bpy.props.FloatProperty(name= "Extrude Amount", default= 0.06)
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
                
            def execute(self, context):
                
                t = self.text
                s = self.scale
                c = self.center
                e = self.extrude
                ea = self.extrude_amount
                r = self.rotation
                
                bpy.ops.object.text_add(enter_editmode=True)
                bpy.ops.font.delete(type='PREVIOUS_WORD')
                bpy.ops.font.text_insert(text= t)
                bpy.ops.object.editmode_toggle()
                bpy.context.object.data.size = s            
                
                if r == True:
                    bpy.context.object.rotation_euler[0] = 1.5708
                            
                if e == True:
                    bpy.context.object.data.extrude = ea
                
                if c == True:
                    bpy.context.object.data.align_x = 'CENTER'
                    bpy.context.object.data.align_y = 'CENTER'
         
                return {'FINISHED'}
         
        def register():
            bpy.utils.register_class(OBJECT_PT_TextTool)
            bpy.utils.register_class(OBJECT_PT_Spacing)
            bpy.utils.register_class(WM_OT_textOpBasic)
         
        def unregister():
            bpy.utils.unregister_class(OBJECT_PT_TextTool)
            bpy.utils.unregister_class(OBJECT_PT_Spacing)
            bpy.utils.unregister_class(WM_OT_textOpBasic)
         
        if __name__ == "__main__":
            register()    

///////////////////////////////////////////////////////////////////////////////////
08. Custom Node Group
    //In Scripting Tab, change 3D view to Compositor
        3D viewport > Top Left Hand Corner > Editor Type > General > Compositor
        
    //CustomNodeGroup.py

        import bpy
        
        class NODE_PT_MAINPANEL(bpy.types.Panel):
            bl_label = "Custom Node Group"
            bl_idname = "NODE_PT_MAINPANEL"
            bl_space_type = 'NODE_EDITOR' 
            bl_region_type = 'UI' 
            bl_category = 'Node Editor' 
            
            def draw(self, context):
                layout = self.layout
                
                row = layout.row()  
                row.operator('node.test_operator')
                
        def create_test_group(context, operator, group_name):
            bpy.context.scene.use_nodes = True                                                                     #Enable "Use Nodes" (Checkbox ticked)
            test_group = bpy.data.node_groups.new(group_name, 'CompositorNodeTree') #Similar to CTRL+G in Node Editor
            
            group_in = test_group.nodes.new('NodeGroupInput')                                          #Adds group input node
            group_in.location = (-200, 0)
            test_group.inputs.new('NodeSocketFloat', 'Factor Value')                                   #Or NodeSocketFloatFactor
            test_group.inputs.new('NodeSocketColor', 'Color Input')   
            
            group_out = test_group.nodes.new('NodeGroupOutput')                                    #Adds group input node
            group_out.location = (400, 0)
            test_group.inputs.new('NodeSocketColor', 'Color Input')   
            
            mask_node = test_group.nodes.new(type='CompsitorNodeBoxMask')
            mask_node.location = (0,0)
            mask_node.rotation = 1
            
            mix_node = test_group.nodes.new(type='CompositorNodeMixRGB')
            mix_node.location = (200,0)
            mix_node.use_clamp = True   #Enable 'Clamp' checkbox in Mix Node
            mix_node.blend_type = 'OVERLAY'
            
            #Linking between nodes
            link = test_group.links.new
            link(mask_node.outputs[0], mix_node.inputs[1])
            link(group_in.outputs[0], mix_node.inputs[0])
            link(group_in.outputs[1], mix_node.inputs[2])
            link(mix_node.outputs[0], group_out.inputs[0])
            return test_group
        
        class NODE_OT_TEST(bpy.types.Operator):
            bl_label = "Add Custom Node Group"
            bl_idname = "node.test_operator"
            
            def execute(self, context):
                custom_node_name = "Test Node"
                my_group = create_test_group(self, context, custom_node_name)
                test_node = context.scene.node_tree.nodes.new('CompositorNodeGroup')
                test_node.node_tree = bpy.data.node_groups[my_group.name]   #Rename node
                test_node.use_custom_color = True
                test_node.color = (0.5, 0.4, 0.3)
                
                return {'FINISHED'}
            
        
        def register():
            bpy.utils.register_class(NODE_PT_MAINPANEL)
            bpy.utils.register_class(NODE_OT_TEST)
            
        def unregister():
            bpy.utils.unregister_class(NODE_PT_MAINPANEL)
            bpy.utils.unregister_class(NODE_OT_TEST)
            
        if __name__=="__main__":
            register() 


///////////////////////////////////////////////////////////////////////////////////
09. Custom Drawing / Layout Improvements / Texts with Extrude
    //TextTool.py Original v2
        bl_info = {
            "name": "Text Tool",
            "author": "Your Name",
            "version": (1, 0),
            "blender": (2, 91, 0),
            "location": "View3D > UI > Text Tool Tab",
            "description": "Adds a new Text Object with user defined properties",
            "warning": "",
            "wiki_url": "",
            "category": "Add Text",
        }
         
        import bpy
         
        class OBJECT_PT_TextTool(bpy.types.Panel):
            bl_label = "Text Tool"
            bl_idname = "OBJECT_PT_texttool"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            
            def draw(self, context):
                layout = self.layout
         
                row = layout.row()
                row = layout.row()
                row.label(text= "Click the button to add text to")
                row = layout.row()
                row.label(text= "the 3D View.")
                row = layout.row()
                row = layout.row()
                
                row = layout.split(factor= 0.45)
                row.label(text= "")
                row.operator("wm.textopbasic", text= "Add Text", icon= 'OUTLINER_OB_FONT')
                
        class OBJECT_PT_Spacing(bpy.types.Panel):
            bl_label = "Spacing"
            bl_idname = "OBJECT_PT_spacing"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            bl_parentid = "OBJECT_PT_texttool"
            bl_options = {"DEFAULT_CLOSED"}
            
            def draw(self, context):
                layout = self.layout
                text = context.object.data
         
                row = layout.row()
                row.label(text= "Set the Spacing Options")
                
                row = layout.split(factor= 0.45)
                row.label(text= "Character:")
                row.prop(text, "space_character", text= "")
         
                row = layout.split(factor= 0.45)
                row.label(text= "Word:")
                row.prop(text, "space_word", text= "")
                
                row = layout.split(factor= 0.45)
                row.label(text= "Line:")
                row.prop(text, "space_line", text= "")
                
        class WM_OT_textOpBasic(bpy.types.Operator):
            """Open the Text Tool Dialog Box"""
            bl_idname = "wm.textopbasic"
            bl_label = "                            Text Tool Operator"
              
            text : bpy.props.StringProperty(name="Enter Text", default="")
            scale : bpy.props.FloatProperty(name= "Scale", default= 1)
            rotation : bpy.props.BoolProperty(name= "Z up", default= False)
            center : bpy.props.BoolProperty(name= "Center Origin", default= False)
            extrude : bpy.props.BoolProperty(name= "Extrude", default= False)
            extrude_amount : bpy.props.FloatProperty(name= "Extrude Amount", default= 0.06)
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
            
            def draw(self, context):
                layout = self.layout        
                layout.label(text="Sample Text")
                
                layout.prop(self, "text")
                layout.prop(self, "scale")
                
                layout.seperator(factor=10) #Add space between the rows
                
                box = layout.box()  #Add box outline
                
                row = box.row()
                row.prop(self, "rotation")  #Z-Up
                if self.rotation == True:
                    row.label(text="Orientation: Z UP", icon='EMPTY_SINGLE_ARROW')
                elif self.rotation == False:
                    row.label(text="Orientation: Default", icon='ARROW_LEFTRIGHT')
                    
                
                row = box.row()
                row.prop(self, "center")    #Center Origin
                if self.center == True:
                    row.label(text="Alignment: Center", icon='ALIGN_CENTER')
                elif self.center == False:
                    row.label(text="Alignment: Default", icon='ALIGN_LEFT')    
                
                row = box.row()
                row.prop(self, "extrude")   #Extrude
                if self.extrude == True:        #Activates extrude amount when check box is ticked 
                    row.prop(self, "extrude_amount")    #Extrude Amount
                
            def execute(self, context):
                
                t = self.text
                s = self.scale
                c = self.center
                e = self.extrude
                ea = self.extrude_amount
                r = self.rotation
                
                bpy.ops.object.text_add(enter_editmode=True)
                bpy.ops.font.delete(type='PREVIOUS_WORD')
                bpy.ops.font.text_insert(text= t)
                bpy.ops.object.editmode_toggle()
                bpy.context.object.data.size = s            
                
                if r == True:
                    bpy.context.object.rotation_euler[0] = 1.5708
                            
                if e == True:
                    bpy.context.object.data.extrude = ea
                
                if c == True:
                    bpy.context.object.data.align_x = 'CENTER'
                    bpy.context.object.data.align_y = 'CENTER'
         
                return {'FINISHED'}
         
        def register():
            bpy.utils.register_class(OBJECT_PT_TextTool)
            bpy.utils.register_class(OBJECT_PT_Spacing)
            bpy.utils.register_class(WM_OT_textOpBasic)
         
        def unregister():
            bpy.utils.unregister_class(OBJECT_PT_TextTool)
            bpy.utils.unregister_class(OBJECT_PT_Spacing)
            bpy.utils.unregister_class(WM_OT_textOpBasic)
         
        if __name__ == "__main__":
            register()     


///////////////////////////////////////////////////////////////////////////////////
10. Custom Keymap (3 Parts)
    //Add new keymap
        Adds new section under 3D view (Global) tree
        Main Menu > Edit > Preference > Keymap > 3DView > 3D View (Global)
        
    //Keymap.py
        import bpy
        
        class WM_OT_dialogop(bpy.types.Operator):
            """Custom Operator - Add txt here """
            bl_label = "Add Cube Menu"
            bl_idname = "wm.dialogop"
            
            name = bpy.props.StringProperty(name= "Name", default= "")
            scale = bpy.props.FloatVectorProperty(name= "Scale: X,Y,Z", default= (1,1,1))
            bool = bpy.props.BoolProperty(name= "Array?", default= False)
            array = bpy.props.IntProperty(name= "Array Count", default = 1)
            bool2 = bpy.props.BoolProperty(name= "Rotate?", default= False)           
            
            def execute(self, context):
                
                n = self.name
                s = self.scale
                b = self.bool
                i = 0
                a = self.array
                b2 = self.bool2
                
                bpy.ops.mesh.primitive_cube_add()
                obj = bpy.context.object
                
                obj.name = n
                obj.scale[0] = s[0]
                obj.scale[1] = s[1]
                obj.scale[2] = s[2]
                
                if b == True:
                    i = 0
                    n = self.name
                    s = self.scale
                    b = self.bool
                    b2 = self.bool2
                    while i < a:
                        
                        bpy.ops.mesh.primitive_cube_add()
                        bpy.ops.transform.translate(value= (i*2,0,0))
                        obj = bpy.context.object
                        obj.name = n
                        obj.scale[0] = s[0]
                        obj.scale[1] = s[1]
                        obj.scale[2] = s[2]
                        if b2 == True:
                            
                            bpy.ops.transform.rotate(value= i*0.3, orient_axis = 'X')
                        i = i + 1         
                
                bpy.ops.object.select_all(action= 'DESELECT')
                
                return {'FINISHED'}
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
        
        #For Keymapping part 1
        addon_keymaps = []
            
        def register():
            bpy.utils.register_class(WM_OT_dialogop)
            
            #For Keymapping part 2
            wm = bpy.context.window_manager
            kc = wm.keyconfigs.addon
            if kc:
                km = kc.keymaps.new(name='3D View', space_type= 'VIEW_3D')  #Add new keymap
                kmi = km.keymap_items.new("wm.dialogop", type= 'F', value= 'PRESS', shift= True) 
                    #kmi = keymap input, 
                    #wm.dialogop = id name for class WM_OT_dialogop
                    #F = selected key to implement the new action
                    #Shift is True mean holding shift and F to activate the new action
                addon_keymaps.append((km, kmi))
         
        def unregister():
            #For Keymapping part 3
            for km,kmi in addon_keymaps:
                km.keymap_items.remove(kmi)
            addon_keymaps.clear()
            
            bpy.utils.unregister_class(WM_OT_dialogop)
            
        if __name__ == "__main__":
            register()
            
            #Add to open the popup box instantly when 'Run Script' is clicked
            #Remove to not open popup             
            #bpy.ops.wm.dialogop('INVOKE_DEFAULT') 


///////////////////////////////////////////////////////////////////////////////////
11. Updated Registration Method

    //Program.py (Old method)
        def register():
            bpy.utils.register_class(YOUR_CLASS_NAME1)
            bpy.utils.register_class(YOUR_CLASS_NAME2)
        def unregister():
            bpy.utils.unregister_class(YOUR_CLASS_NAME1)   
            bpy.utils.unregister_class(YOUR_CLASS_NAME2)     
        if __name__ == "__main__":
            register()        
            
    //Program.py (New method)
        classes = [YOUR_CLASS_NAME1, YOUR_CLASS_NAME2]
        def register():
            for cls in classes:
                bpy.utils.register_class(cls)    
        def unregister():
            for cls in classes:
                bpy.utils.unregister_class(cls)    
        if __name__ == "__main__":
            register()

///////////////////////////////////////////////////////////////////////////////////
12. Scripting Tips
    Link: https://docs.blender.org/api/current/info_quickstart.html
    
    Using Autocomplete function in console panel
        Type in "bpy.types.NodeSocket" and then click on Autocomplete to list down all the functions
        
    List down all objects in the scene
        In Console, type in "list(bpy.data.objects)"

    List down all materials in the scene
        In Console, type in "list(bpy.data.materials)"

    Test single line of code in console
        Type in "bpy.data.materials['My Material'].use_nodes = True"
        Check whether the new material is being added and is using node from properties tab

    Open hidden Text Editor's tool menu
        CTRL + T


///////////////////////////////////////////////////////////////////////////////////
13. Numerator / Drop Down Menu
    /////////////////
    //Enum.py
        #5Parts
        import bpy
         
        class ADDONNAME_PT_TemplatePanel(bpy.types.Panel):
            bl_label = "Name of the Panel"
            bl_idname = "ADDONNAME_PT_TemplatePanel"
            bl_space_type = "VIEW_3D"
            bl_region_type = 'UI'
            bl_category = "Template Tab"
            
            def draw(self, context):
                layout = self.layout
                
                layout.operator("wm.template_operator")
         
        class ADDONAME_OT_TemplateOperator(bpy.types.Operator):
            bl_label = "Template Operator"
            bl_idname = "wm.template_operator"
            
            preset_enum : bpy.props.EnumProperty(                                            #Part1
                name="",
                description="Select an option",
                items= [
                    ('OP1', "Cube", "Add a cube to the scene"),
                    ('OP2', "Sphere", "Add a sphere to the scene"),
                    ('OP3', "Suzanne", "Add a Suzanne to the scene")
                ]
            )
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
            
            def draw(self, context):
                layout = self.layout
                layout.prop(self, "preset_enum")                                                      #Part2
            
            def execute(self, context):
                
                if self.preset_enum == 'OP1' :                                                            #Part3
                    bpy.ops.mesh.primitive_cube_add()
                
                if self.preset_enum == 'OP2' :                                                            #Part4
                    bpy.ops.mesh.primitive_uv_sphere_add()
                
                if self.preset_enum == 'OP3' :                                                            #Part5
                    bpy.ops.mesh.primitive_monkey_add()
                
                return {'FINISHED'} 
         
        classes = [ADDONNAME_PT_TemplatePanel, ADDONAME_OT_TemplateOperator]
         
        def register():
            for cls in classes:
                bpy.utils.register_class(cls)
         
        def unregister():
            for cls in classes:
                bpy.utils.unregister_class(cls)
         
        if __name__ == "__main__":
            register()
    
    ///////////////////
    //Program
        bl_info = {
            "name": "Text Tool",
            "author": "Your Name",
            "version": (1, 3),
            "blender": (2, 91, 0),
            "location": "View3D > UI > Text Tool Tab",
            "description": "Adds a new Text Object with user defined properties, Typewriter / Scrolling Text Animation, Radial Curve tool",
            "warning": "",
            "wiki_url": "",
            "category": "Add Text",
        }

        import bpy
        from bpy.types import (Panel, Operator)

        class OBJECT_PT_TextTool(Panel):
            bl_label = " "
            bl_idname = "OBJECT_PT_texttool"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            
            def draw_header(self, context):
                layout = self.layout
                row = layout.row()
                row.label(text="Text Tool", icon= 'EVENT_T')    

            def draw(self, context):
                layout = self.layout
                
                layout.label(text= "Click the button to add text to")
                layout.label(text= "the 3D View.")        
                
                row = layout.split(factor= 0.45)
                row.label(text= "")
                row.operator("wm.textopbasic", text= "Text Tool", icon= 'OUTLINER_OB_FONT')
                
                row = layout.split(factor= 0.45)
                row.label(text= "")
                row.operator("wm.textopcurveradial", text= "Radial Curve", icon= 'CURVE_BEZCIRCLE')
                
                row = layout.row()
                row.operator("wm.textopcurveradialborder", text= "Radial Border Tool", icon= 'CURVE_NCIRCLE') 

        class OBJECT_PT_Spacing(Panel):
            bl_label = "Spacing"
            bl_idname = "OBJECT_PT_spacing"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            bl_parentid = "OBJECT_PT_texttool"
            bl_options = {"DEFAULT_CLOSED"}    
            
            @classmethod
            def poll(cls, context):
                return (context.object != None)
            
            def draw(self, context):
                layout = self.layout
                text = context.object.data
                
                row = layout.row()
                row.label(text= "Set the Spacing Options")        
                
                row = layout.row()
                row = layout.split(factor= 0.45)
                row.label(text= "Offset X")
                row.prop(text, "offset_x", text= "")
                
                row = layout.split(factor= 0.45)
                row.label(text= "           Y")
                row.prop(text, "offset_y", text= "")
                
                row = layout.row()
                
                row = layout.split(factor= 0.45)
                row.label(text= "Character:")
                row.prop(text, "space_character", text= "")

                row = layout.split(factor= 0.45)
                row.label(text= "Word:")
                row.prop(text, "space_word", text= "")
                
                row = layout.split(factor= 0.45)
                row.label(text= "Line:")
                row.prop(text, "space_line", text= "") 

        class OBJECT_PT_Animations(Panel):
            bl_label = "Animations"
            bl_idname = "OBJECT_PT_Animation"
            bl_space_type = 'VIEW_3D'
            bl_region_type = 'UI'
            bl_category = "Text Tool"
            bl_parentid = "OBJECT_PT_texttool"
            bl_options = {"DEFAULT_CLOSED"}
            
            def draw(self, context):
                layout = self.layout
                
                layout.separator(factor=1)
                layout.label(text= "Select your Text then add an")
                layout.label(text= "Animated Effect.")
                layout.separator(factor=1)
                layout.operator("wm.textoptypewriter", text= "Typewriter / Scrolling Text", icon= 'TRACKING_FORWARDS_SINGLE')
                
        class WM_OT_textOpBasic(Operator):
            """Open the Text Tool Dialog Box"""
            bl_idname = "wm.textopbasic"
            bl_label = "                            Text Tool Operator"
            
            text : bpy.props.StringProperty(name="", default="")
            scale : bpy.props.FloatProperty(name= "", default= 1)
            rotation : bpy.props.BoolProperty(name= "Orientation", default= False)
            center : bpy.props.BoolProperty(name= "Alignment", default= False)
            extrude : bpy.props.BoolProperty(name= "Extrude", default= False)
            extrude_amount : bpy.props.FloatProperty(name= "Extrude Amount", default= 0.06)
            italic : bpy.props.BoolProperty(name= "Auto Italic", default = False)
            options : bpy.props.BoolProperty(name= "Options", default = False)
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
            
                
            def draw(self, context):
                layout = self.layout
                layout.separator(factor= 1)
                
                row = layout.row()
                row.label(text= "Enter Text:", icon = 'FILE_TEXT')
                row.prop(self, "text")
                
                row = layout.row()
                row.label(text= "Scale:", icon = 'EMPTY_ARROWS')
                row.prop(self, "scale")
                
                layout.separator(factor= 1)
                
                box = layout.box()
                
                row = box.row()
                row.prop(self, "options")
                if self.options == True:
                
                    row = box.row()
                    row = box.row()
                    row.prop(self, "italic")
                    if self.italic == True:
                        row.label(text= "Italic: Enabled", icon = 'ITALIC')
                    else: 
                        row.label(text= "Italic: Not Enabled", icon = 'DRIVER_DISTANCE')
                            
                    row = box.row()
                    row.prop(self, "rotation")
                    if self.rotation == True:
                        row.label(text= "Orientation: Z UP", icon= 'EMPTY_SINGLE_ARROW')
                    else:
                        row.label(text= "Orientation: Default", icon= 'ARROW_LEFTRIGHT')
                    
                    row = box.row()
                    row.prop(self, "center")
                    if self.center == True:
                        row.label(text= "Alignment: Center", icon= 'ALIGN_CENTER')
                    else:
                        row.label(text= "Alignment: Default", icon= 'ALIGN_LEFT')
                        
                    row = box.row()
                    row.prop(self, "extrude")
                    if self.extrude == True:
                        row.prop(self, "extrude_amount")
                    
                layout.separator(factor= 1)

            def execute(self, context):
                
                t = self.text
                s = self.scale
                c = self.center
                e = self.extrude
                ea = self.extrude_amount
                r = self.rotation
                
                bpy.ops.object.text_add(enter_editmode=True)
                bpy.ops.font.delete(type='PREVIOUS_WORD')
                bpy.ops.font.text_insert(text= t)
                bpy.ops.object.editmode_toggle()
                bpy.context.object.data.size = s
                if r == True:
                    bpy.context.object.rotation_euler[0] = 1.5708    
                if e == True:
                    bpy.context.object.data.extrude = ea
                if c == True:
                    bpy.context.object.data.align_x = 'CENTER'
                    bpy.context.object.data.align_y = 'CENTER'
                    
                if self.italic == True:
                    bpy.context.object.data.shear = 0.38
                
                bpy.context.object.name = self.text + " : (font)"    
            
                return {'FINISHED'}

        class WM_OT_textOpCurve_Radial(Operator):
            """Open the Curve Text Tool Dialog Box"""
            bl_idname = "wm.textopcurveradial"
            bl_label = "                 Text Tool Operator (Radial Curve)"
            
            text : bpy.props.StringProperty(name="", default="")
            scale : bpy.props.FloatProperty(name= "", default= 1)
            rotation : bpy.props.BoolProperty(name= "Orientation", default= False)
            extrude : bpy.props.BoolProperty(name= "Extrude", default= False)
            extrude_amount : bpy.props.FloatProperty(name= "Extrude Amount", default= 0.06)
            flip : bpy.props.BoolProperty(name= "Text Position", default= False)
            options : bpy.props.BoolProperty(name= "Options", default = False)
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
                
            def draw(self, context):
                layout = self.layout
                layout.separator(factor= 1)
                
                row = layout.row()
                row.label(text= "Enter Text:", icon = 'FILE_TEXT')
                row.prop(self, "text")
                
                row = layout.row()
                row.label(text= "Scale:", icon = 'EMPTY_ARROWS')
                row.prop(self, "scale")
                
                layout.separator(factor= 1)
                
                box = layout.box()
                row = box.row()
                row.prop(self, "options")
                if self.options == True:
                    row = box.row()
                    row = box.row()
                    row.prop(self, "flip")
                    if self.flip == True:
                        row.label(text= "Text on Bottom", icon= 'MOD_CURVE')
                    else:
                        row.label(text= "Text on Top", icon= 'SPHERECURVE')
                    
                    row = box.row()
                    row.prop(self, "extrude")
                    if self.extrude == True:
                        row.prop(self, "extrude_amount")
                    
                layout.separator(factor= 1)

            def execute(self, context):
                
                t = self.text
                s = self.scale
                e = self.extrude
                ea = self.extrude_amount
                f = self.flip
                
                bpy.ops.curve.primitive_bezier_circle_add()
                obj1 = bpy.context.object
                obj1.name= "Radial Rotation Curve"
                obj1.scale[0] = 3.5
                obj1.scale[1] = 3.5
                obj1.scale[2] = 3.5
                
                bpy.ops.object.text_add(enter_editmode=True)
                font1 = bpy.context.object
                bpy.ops.font.delete(type='PREVIOUS_WORD')
                bpy.ops.font.text_insert(text= t)
                bpy.ops.object.editmode_toggle()
                bpy.context.object.data.size = s
                
                if e == True:
                    bpy.context.object.data.extrude = ea            
                
                bpy.context.object.name = self.text + " : (font)"        
                bpy.ops.object.modifier_add(type='CURVE')
                bpy.context.object.modifiers["Curve"].object = obj1           
                
                if f == True:
                    bpy.context.object.data.offset_x = -1.48
                    bpy.context.object.data.offset_y = -0.98
                    bpy.context.object.rotation_euler[0] = 3.14159
                    bpy.context.object.rotation_euler[1] = 3.14159

                else:
                    bpy.context.object.data.offset_x = 9.48
                    bpy.context.object.data.offset_y = 0.37

                return {'FINISHED'}

        class WM_OT_textOpCurve_Radial_Border(Operator):
            """Open the Curve Text Tool Dialog Box"""
            bl_idname = "wm.textopcurveradialborder"
            bl_label = "                 Text Tool Operator (Radial Border)"

            preset_enum : bpy.props.EnumProperty(
                name="",
                description="Select a Style to be used.",
                items=[ ('OP1', "Solid Line ________", ""),
                        ('OP2', "Dots .........", ""),
                        ('OP3', "Arrows  ^^^^^^^", ""),
                        ('OP4', "Circles  OoOoOoOoOoOo", ""),
                       ]
                )
                
            text : bpy.props.StringProperty(name = "")
            use_custom : bpy.props.BoolProperty(name = "Use Custom Character")
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)    
                
            def draw(self, context):
                layout = self.layout
                layout.separator(factor= 1)
                
                row = layout.row()
                row.label(text= "Select Border Style:", icon = 'RESTRICT_SELECT_OFF')
                row = layout.row()
                if self.use_custom != True:
                    row.prop(self, "preset_enum")   
                
                layout.separator(factor= 1)
                
                box = layout.box()
                row = box.row()
                row.prop(self, "use_custom")
                if self.use_custom == True: 
                    row = box.row()
                    row.label(text= "Enter Character:")
                    row.prop(self, "text")
                    row = box.row()
                    
                layout.separator(factor= 1)

            def execute(self, context):        
                
                bpy.ops.curve.primitive_bezier_circle_add()
                obj = bpy.context.object
                obj.name= "Radial Rotation Curve"
                obj.scale[0] = 3.5
                obj.scale[1] = 3.5
                obj.scale[2] = 3.5
                
                bpy.ops.object.text_add(enter_editmode=True)
                font = bpy.context.object
                bpy.ops.font.delete(type='PREVIOUS_WORD')
                
                if self.use_custom == True:
                    bpy.ops.font.text_insert(text= self.text)
                    
                else:    
                    if self.preset_enum == 'OP1':
                        bpy.ops.font.text_insert(text= "_")
                        font.data.offset_y = -7.23
                        
                    if self.preset_enum == 'OP2':
                        bpy.ops.font.text_insert(text= ".")

                        bpy.context.object.data.offset_y = -7.23
              
                    if self.preset_enum == 'OP3':
                        bpy.ops.font.text_insert(text= "^")
                        bpy.context.object.data.space_character = 0.907
                        bpy.context.object.data.offset_y = -0.2
                    
                    if self.preset_enum == 'OP4':
                        bpy.ops.font.text_insert(text= "Oo")
                        bpy.context.object.data.space_character = 0.907
                        bpy.context.object.data.offset_y = -0.2
                        bpy.context.object.data.size = 0.3985
                
                bpy.ops.object.editmode_toggle()        
                bpy.ops.object.modifier_add(type='ARRAY')
                bpy.context.object.modifiers["Array"].fit_type = 'FIT_CURVE'
                bpy.context.object.modifiers["Array"].curve = obj        
                bpy.ops.object.modifier_add(type='CURVE')
                bpy.context.object.modifiers["Curve"].object = obj
                
                if self.preset_enum == 'OP2':            
                    bpy.context.object.modifiers["Array"].relative_offset_displace[0] = 1.696            
                    bpy.ops.object.transform_apply(location=False, rotation=False, scale=True)
                return {'FINISHED'}

        class WM_OT_textOpTypewriter(Operator):
            """Open the Typewriter / Scrolling Text Dialog Box. Note: The Text will be Converted to a Mesh"""
            bl_idname = "wm.textoptypewriter"
            bl_label = "             Text Tool Operator (Typewriter Effect)"
            start_frame : bpy.props.IntProperty(name= "", default= 1)
            anim_duration : bpy.props.IntProperty(name= "", default= 25)
            
            def invoke(self, context, event):
                wm = context.window_manager
                return wm.invoke_props_dialog(self)
            
                
            def draw(self, context):
                layout = self.layout
                layout.separator(factor= 1)        
                
                row = layout.row()
                row.label(text= "Start Frame:", icon = 'FRAME_NEXT')
                row.prop(self, "start_frame")
                
                row = layout.row()
                row.label(text= "Duration (frames):", icon = 'TIME')
                row.prop(self, "anim_duration")
                
                layout.separator(factor= 2)

            def execute(self, context):   
                    
                obj = bpy.context.object    
                
                bpy.ops.object.convert(target='MESH')
                bpy.ops.object.modifier_add(type='BUILD')
                obj.modifiers["Build"].frame_start = self.start_frame
                obj.modifiers["Build"].frame_duration = self.anim_duration

                bpy.ops.object.editmode_toggle()
                bpy.ops.mesh.select_all(action='SELECT')
                bpy.ops.mesh.sort_elements(type='VIEW_XAXIS', elements={'FACE'})
                bpy.ops.object.editmode_toggle()
                
                return {'FINISHED'}

        classes = [OBJECT_PT_TextTool, OBJECT_PT_Animations, OBJECT_PT_Spacing, WM_OT_textOpBasic, WM_OT_textOpCurve_Radial, WM_OT_textOpTypewriter, WM_OT_textOpCurve_Radial_Border]

        def register():
            for cls in classes:
                bpy.utils.register_class(cls)

        def unregister():
            for cls in classes:
                bpy.utils.unregister_class(cls)

        if __name__ == "__main__":
            register()








