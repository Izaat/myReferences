import 'dart:io'; //something like iostream

Whenever you see '>' it means that it has to be inside the bracket.
Example: Class1(); > Class2() > function1, function2 
Meaning: Class1(Class2(function1, function2));

NOTE: everything in dart is object, the instance of class
Run dart file by typing in "dart filename.dart" in the console (similar to Python)

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONTENTS//
01. ORIENTATE VIRTUAL PHONE TO LANDSCAPE
02. OUTPUT, STRINGS AND PRINTING
03. COMMENTING
04. DECLARATIONS
05. DATA TYPES
06. CONVERTING STRING TO INTEGER AND BACK
07. DEFINING A CONSTANT
08. STANDARD OPERATORS
09. SHORTCUT
10. ADD AND REMOVE FROM ARRAY
11. CLASSES
12. CLASSES WITH PRIVATE INSTANCE / SECURITY
13. CLASS INHERITENCE
14. NULL AWARE OPERATOR - ?. , ?? , ??=
15. TERNARY OPERATOR  
16. TYPE TEST OPERATOR
17. CONDITIONAL STATEMENT
18. LOOP STATEMENT
19. COLLECTION CLASSES [LIST, SET, MAP]
20. FUNCTIONS [Anonymous, Positional, Named, Hybrid, Optional]
21. CLASSES (Basic Structure, Constructors, Inheritence, Override, Getters and Setters)
22. EXCEPTION HANDLING (throw, try, catch)


01 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ORIENTATE VIRTUAL PHONE TO LANDSCAPE
//main.dart//
void main(){
    SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft]); //You can use .landscapeRight doesnt matter
}

02 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//OUTPUT, STRINGS AND PRINTING
    //main.dart
        main(){
            stdout.writeIn('What is your name: ');
            String name = stdin.readLineSync(); //box to type in your name
            print('My name is $name'); //Outputs my name is whatever
        }
        
    //Note
        //main() and main(List<String> args) provide the same function

03 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//COMMENTING
//In-line comment
/*Block comment*/
///Documentation


04 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//DECLARATIONS
Strongly type Programming Lang. Variable is known at compile time. (C++, Java, Swift)
Dynamic type programming Lang. Variable is know at run time. (Python, Ruby, Javascript)

//strongly type//
int, double, string, bool. //var can be any of these 4 declarations
//Dynamic type//
dynamic


//calling the variables is similar to PHP $variable


05 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//DATA TYPES
    //Note:  main() and main(List<String> args) provide the same function
    //INTEGER
        main(List<String> args) {} >
            int myint = 5000;
            print('$myint');                    //Output:5000
            print('${myint.sign}');         //Output: 1
            print('${myint.isOdd}');        //Output: False (True if Odd )
            print('${myint.abs}');         //Convert number to absolute
            print(myint.toString());        //Convert Integer to String
        
    //DOUBLE - also check out 'num' data types
        #Basics
            main(List<String> args) {}  >
                double mydouble = 45.454545;
                double mydouble2 = 45.454545;
                print('$mydouble');                    //Output:45.454545
                print('${mydouble.sign}');         //Output: 1
                print(mydouble.round());        //Output: 45
                print(mydouble.round().runtimeType)     //Output: int
                print(mydouble.toString());        //Convert Integer to String
                print(mydouble.truncate());        //Output: 45
                
                #Compare - Returns a negative number if this is less than the number in bracket, 
                #zero if they are equal, and a positive number if this is greater than  in the bracket.
                #Can also be used on strings to compare length
                print(mydouble.compareTo(mydouble2));  //Output:  1 (Match = 1, Not matched = -1)
            
        #integer to Double
            main(List<String> args) {}  >
                double mydouble = 45.454545;
                int myint = 599;
                var res = mydouble + myint;
                print(res.tuntimeType);     //Output: All integers will return as double after calculation
                
    //BOOLEAN
        main(List<String> args) {}  >
            bool mybool = false;
            print(mybool.toString());       //'false'
            print(mybool.hashCode);     //1237
            
    //STRING
        main(List<String> args) {}  >
            String mystring1 = 'This is a single quote string';
            String mystring2 = "This is a double quote string";
            String mystring3 = '''This is multiline 
                text for testing''';
            String mystring4 = """This is another multiline string
                This is another multiline string
                This is another multiline string""";
            String mystring5 = 'This is a single quote string';
                
            print('$mystring3');
            print(mystring3.length);        //Output: 51
            print(mystring1.codeUnitAt(0));      //Output:   84 (Returns the 16-bit UTF-16 code unit at the given index.)
            print(mystring1.hashCode);        //Output: 338476741
            print(mystring1.compareTo(mystring5));  //Output:  1 (Match = 1, Not matched = -1)
            print(mystring1.substring(6, 12)); //Prints out string starting at index and ends at index. This is similar to [:] in Python

    //DYNAMIC   - See Topic 20 Function
        //Dynamic data types can read any type of number value (float, int, double, num)
        void main() {} > 
            dynamic mynum = 6;
            dynamic mybool = true;
            dynamic mydouble = 45.4545;
            dynamic mystring = 'dart';
            
            print(mynum);
            print(mybool);
            print(mydouble);
            print(mystring);


06 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONVERTING STRING TO INTEGER AND BACK
    main(){
        var one = int.parse('1');
        assert(one == 1); //String to Int
        
        var oneDotOne = double.parse('1.1');
        assert(oneDotOne == 1); //String to double
        NOTE: cannot convert letters andwords into int or double
        
        String oneAsString = 1.toString();
        assert(oneAsString == '1'); //int to string
        
        String piAsString = 3.14.toStringAsFixed(2); //'2' means 2 floating point number or 2 decimal places
        assert(piAsString == '3.14'); //double to String
        
    }



07 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//DEFINING A CONST
    main(){
        const aConstNum = 0; // int constant
        const aConstBool = true; //bool constant
        const aConstString = 'hello'; //string constant
        
        print(aConstNum); //output 0
        print(aConstBool); //output true
        print(aConstString); //output hello
        
        print(aConstNum.runtimeType); //output int
        print(aConstBool.runtimeType); //output bool
        print(aConstString.runtimeType); //output string
        
        //runtimeType is compile during runtime
    }


08 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//STANDARD OPERATORS
    void main() {
        int num = 10 + 22;
        num = num - 2;
        
        print(num);
        
        num = num % 5; //remainder
        print(num);    
        
        //relational 
        num (num == 0) {    // ==, !=, >=, <=
            print('Zero');
        }
        
        num = 100;
        num *= 2;       //shortcut 100*2
        print(num);

        //unary operator
        ++num; //pre-increment
        num++; //post-increment
        num += 1; //similar to ++
        num -= 1; //similar to --
        print(num);
        
        //logical && and logical ||
        if (num > 200 && num < 203){
            print('200 to 202');
        }
        
    }


09 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//SHORTCUT
    void main(){
        String greet = greeting();
        print(greet);
    }
    
    //instead of doing this
    String greeting(){
        return 'hello';
    }
    
    //do this instead
    String greeting() => 'hello';


10 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ADD AND REMOVE FROM ARRAY
    void main(){
        List <String> names = ['one', 'two', 'three'];      //adding "<String>"  disables any other datatype like numbers to enter into the array
        
        names.add('four');          //output ['one', 'two', 'three', 'four']
        names.remove('five');   //output ['two', 'three', 'four']
        
        print(names);

    }

11 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASSES
    void main(){
        User userOne = User();
        print(userOne.name);       //output mario
        print(userOne.Age);         //output 25
        userOne.login();               //output user login    
        
    }

    class User {
        String username = 'mario';
        int age = 25;
           
        void login(){
            print ('user logged in');
        }
    }


12 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASSES WITH PRIVATE INSTANCE / SECURITY
    void main(){
        User userOne = User('luigi', 25);
        print(userOne.username);      //Output luigi
        
        User userTwo = User('mario', 30);
        print(userTwo.username);  //Output mario
        
    }

    class User {
        String username = 'mario';
        int age = 25;
        
        User(String username, int age){
            this.username = username;       // ... = username is the variable from the bracket User(String username, ...)
            this.age = age;
        }
        
    }


13 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS INHERITENCE
    void main(){
        User userOne = User('luigi', 25);
        print(userOne.username);      //Output luigi
        
        User userTwo = User('mario', 30);
        print(userTwo.username);  //Output mario
        
        SuperUser userThree = SuperUser('yoshi', 20);
        print(userThree.username);  //output yoshi
        userThree.publish();        //output published update
        
    }

    class User {
        String username = 'mario';
        int age = 25;
        
        User(String username, int age){
            this.username = username;       // ... = username is the variable from the bracket User(String username, ...)
            this.age = age;
        }
        
    }
    
    class SuperUser extends User{
        SuperUser(String username, int age) : super(username, age)   //assigning zero argument constructor to the superclass
                                                                                                            //this modifies the value of the variable in User()
        //
        void publish() {
            print('published update');
        }
    }


14 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//NULL AWARE OPERATOR
    //(?.)
    If the variable/function is not defined, then output 'null'. 
    If contains value, then proceed
    Usually it'll output error messages if variable is not defined
        
        class Num {
            int num = 10;
        }   
        main() {
            var n = Num();
            int number;
            if (n != null){     // the entire if-function can be replaced with: number = n?.num;
                number = n.num;
            }      
            print(number); //Output 10 if everything is defined, 'null' if 'Num()' being removed from 'var n'
        }

    // (??)
    If the variable/function is not defined, this will output a value instead of null shown ablove
    Instead of,
        number = n?.num; //outputs value 'null' if 'Num()' being removed from 'var n'
    We use this,
        number = n?.num ?? 0;   //outputs value '0' if 'Num()' being removed from 'var n'


    //(??=)
    This statement adds in a default value the variable if the variable has no value in it
    This avoids program to crash if there is no value assigned to the variable.
    
        main(){
            int number;
            print(number ??= 100);
        }
        
    Output: value will be 100


15 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//TERNARY OPERATOR

    void main() {
        int x = 100;
        var result = x % 2 == 0 ? 'Even' : 'Odd';       //100 divide by 2, //if remainder is 0, print even. If remainder is not 0, print odd
        print(result);
    }


16 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//TYPE TEST OPERATOR
    void main(){
        var x = 100;
        if (x is int){
            print('integer'); //prints integer if x = 100, but if x = 100.00, it wont print integer as the variable is not defined as 'int'
        }
    }


17 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONDITIONAL STATEMENT
    IF Statement
        void main() {
            int number = 100;
            
            if (number % 2 == 0) {
                print('Even');
            }
            else if (number % 3 == 0) {
                print('Odd');
            }
            else {
                print('Confused');
            }
        }
    
    SWITCH STATEMENT
        void main() {
            int number = 0;
            
            switch(number) {
                case 0:
                    print('Even');
                    break;
                case 1:
                    print('Odd');
                    break;
                default:
                    print('Confused');    
            }
        }


18 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOOP STATEMENT
    FOR
        void main () {
            for (var i = 1; i <= 10; ++i) {
                print(i);
            }
        }

    FOR-IN
        void main () {
            var numbers = [1,2,3];
            
            for (var n in numbers) {
                print(n);
            }
            
            for (var i = 0; i< numbers.length; ++i) {
                print(numbers[i]);
            }
            
        }
        
    FOR-EACH
        void main() {
            var numbers = [1, 2, 3];
            
            numbers.forEach( (n) => print(n) );
        }

    WHILE
        void main() {
            int num = 5;
            while (num > 0){    //Also see 'do' loop
                print(num);
                num -= 1;
            }
        } //prints out 5,4,3,2,1


19 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//COLLECTION CLASSES

    LIST //See Flutter topic 14.
        ///////////
        void main() {
            List names = ['Name01', 'Name02'];  //If 'List <String> names', then no other data types other than String can be used
            print (names[0]);       //Outputs Name01
            print(names.length); //Outputs 2
        }
        
        ///////////
        void main() {
            var names = ['Name01', 'Name02'];   //This automatically turns into String. If add in 10 and 10.01, it changes from String into object
            for (var n in names) {
                print(n);       //Name01, Name02
            }
        }
        ///////////
        void main() {
            List <String> names = ['Name01', 'Name02'];     //if "const ['Name01', 'Name02']" is used, nothing can be changed
            names[1] = 'Name03';        
            for (var n in names) {
                print(n);       //Name01, Name03
            }
        }
        ///////////
        void main() {
            List <String> names = ['Name01', 'Name02'];
            var names2 = [...names]; //the triple dots uses the original array, similar to javascript
            names[1] = 'Name03';        
            for (var n in names2) {
                print(n);       //Name01, Name02
            }
        }
    SET
        ///////////
        void main() {
            var variable1 = {};
            print(variable1.runtimeType);   //Output _InternalLinkedHashMap<dynamic, dynamic>
        }
        ///////////
        void main() {
            var variable1 = <String> {};
            print(variable1.runtimeType);   //Output _CompactLinkedHashSet<String>
        }
        ///////////
        void main() {
            Set <String> variable1 = {};
            print(variable1.runtimeType);   //Output _CompactLinkedHashSet<String>
        }

    MAP
        ///////////
        void main() {
            var variable1 = {
                //Key       :   Value
                'first'       :   'variable1',
                'second'  :   'variable2',
                'third'      :   'variable3',
                4             :   'variable4' 
            };
            print (variable1['third']);      //Output: variable3
            print (variable1[4]);              //Output: variable4
        }
        ///////////
        void main() {
            var variable1 = Map();
            variable1 ['first'] = 'Number1';
            print (variable1['first']);      //Output: Number1
        }
        ///////////
        void main() {
            var variable1 = {'first': 'Number1', 'second': 'Number2'};
            print (variable1['second']);      //Output: Number2
        }
        ///////////                                         -----Use for routing
        void main() {
            Map student = {'name': 'name01', 'age': 25};
            print (student['name']); //Outputs name01
        }


20 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//FUNCTIONS

    /////////////
    //Dynamic Functions
        void main() {
            showOutput(square(2.5));
        }
        dynamic square (var num) {      //dynamic can read any type of number value (float, int, double, num)
            return num*num;
        }
        void showOutput(var msg) {
            print msg;
        }   //Output: 4
        
    ///////////////
    //Anonymous Functions
        /////
        //Without anonymous
        main() {
            var list = ['var1', 'var2', 'var3'];
            list.forEach(printF);
        }
        void printF(item){
            print(item); 
        }
        Output: var1, var2, var3
        
        //////
        //With anonymous function       //A function without any name (see missing printF)
        main() {
            var list = ['var1', 'var2', 'var3'];
            list.forEach((item) {
                print(item);
            });
        }
        Output: var1, var2, var3

    /////////////////
    //Positional Parameter
        //Example 1
            void main() {
                print(sum(10, 20));
            }
            dynamic sum(var num1, var num2) => num1 + num2;     //Where num1 is 10 and num2 is 20
        
        //Example 2
            String posParam(String name, int age, int year) {} >
                return "name: $name - age: $age - year: $year";
            
            main (List<String> args) {} >
                var res = posParam("dart", 10, 2000);
                print(res);
    
    /////////////////
    //Named Parameter
        //Example 1
            void main() {
                print(sum (num1: 10, num2: 20) );
            }
            dynamic sum({var num1, var num2}) => num1 + num2;
            
        //Example 2
            String namedParam({String name, int age, int year}) {} >
                return "name: $name - age: $age - year: $year";
            
            main (List<String> args) {} >
                var res = namedParam(age: 20, year: 3000, name:"dart");
                print(res);

     /////////////////
     //Hybrid of Positional and Named Parameters
        //Example 1
            void main() {
                print(sum (10, num2: 20) );
            }
            dynamic sum(var num1, {var num2}) => num1 + num2;
            
        //Example 2
            String hybridParam(String name, int age, {int year = 2000} ) {} >
                return "name: $name - age: $age - year: $year";
            
            main (List<String> args) {} >
                var res = hybridParam("dart", 20);                      //Note: If the year has no input, by default it will be 2000 
                //var res = hybridParam("dart", 20, year:4000); //To input value to the year
                print(res);                                                            //Output: Dart, 20, 2000

    /////////////////
     //Hybrid of Positional and Named Parameter shortcut
        void main() {
            print(sum (10) );
            print(sum(10, num2: 20));
        }
        dynamic sum(var num1, {var num2}) => num1 + (num2 ?? 0);         //OR
        dynamic sum(var num1, {var num2=0}) => num1 + num2;                //Provides same function as the line above
        //Output: 10
        //Output: 30
    
    /////////////////
     //Optional Parameter
        String optionalParam(String name, int age, [int year]) {} >
            return "name: $name - age: $age - year: $year";
            
        main (List<String> args) {} >
            var res = optionalParam("dart", 30);    //Note: Without providing value for the year, the year will return null as default
            print(res);
    
    /////////////////
     //Make Positional as Optional Parameter
        void main() {
            print(sum (10, 20) );
            print(sum(20));
        }        
        dynamic sum(var num1, [var num2]) => num1 + ( num2 ?? 0 );   
        //Output: 30
        //Output: 20
        

21 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
https://www.youtube.com/watch?v=afXXvBOWq14         -- 32:32
//CLASSES
    a. Basic Structure
    b. Constructors (Default, Named, Defined)
    c. Inheritence
    d. Override (Basic Structure, Override a Defined Constructor)
    e. Getters and Setters

    //////////////////////////////
    //Basic Structure
        class Person {
            String name;
            int age;
            
            //method
            void showOutput() {
                print(name);
                print(age);
            }
        }
        void main() {
            //object
            Person person1 = Person();
            person1.name = 'Name';
            person1.age = 35;
            person1.showOutput();
        }
        Output: Name, 35
        
    //////////////////////////
    //Constructors
        
        //Constructor (Default)//////////
            class Person {} >
                String name;
                int age;
                
                Person(String name, [int age = 18]) {} >
                    this.name = name;
                    this.age = age;                
                
                //method
                void showOutput() {} >
                    print(name);
                    print(age);                
            
            void main() {} >
                Person person1 = Person('Name'); //if adds the age value it will overwrite the age of 18
                person1.showOutput();
            
            Output: Name, 18
    
        //Constructor (Default) Shortcut//////////
            class Person {} >
                String name;
                int age;
                
                Person(this.name, [this.age = 18]);
                
                //method
                void showOutput() {} >
                    print(name);
                    print(age);                
            
            void main() {} >
                Person person1 = Person('Name1'); //if adds the age value it will overwrite the age of 18
                person1.showOutput();                
                Person person2 = Person('Name2', 25)
                person2.showOutput();
            
            Output: Name1, 18, Name2, 25
    
        //Named Constructor #1//////////
            class Person {} >
                String name;
                int age;
                
                Person(this.name, [this.age = 18]);
                
                //named constructor
                Person.guest() {} >                            //className.constructorName()
                    name = 'Guest';
                    age  = 18;                
                
                //method
                void showOutput() {} >
                    print(name);
                    print(age);
                
            
            void main() {} >
                Person person1 = Person('Name1'); //if adds the age value it will overwrite the age of 18
                person1.showOutput();
                
                Person person2 = Person('Name2', 25)
                person2.showOutput();
                
                var person3 = Person guest();
                person3.showOutput();
            
            Output: Name1, 18, Name2, 25, Guest, 18

        //Named Constructor #2//////////
            class X {} >
                final name;                         
                static const int age = 10;   
                X(this.name);
            
            main() {} >
                var x = X('Jack');
                print(x.name);
                
                //x.name = 'Jill';     //Changes name to Jill but "name" must be defined as "var" instead of "final". Or it will cause an error.
                //print(x.name);
                
                //print(x.age);       //can't call age because it is static, the only way to access 'age' is by calling the class
                print(X.age);          //Outputs 10
                
                var y = X('Jill');       //Outputs Jill
                print(y.name);            

        //Named Constructor #3//////////  
            main() {} >
                final name = 'Jack';        //the name value can't be changed
                const age = 30;             //age value cant be changed
                
                print(name);
                print(age);    
                
        //Named Constructor #4 //////////  
            main() {} >
                People person = People("John", 1990, false);                
                    print(person);

                People person2 = People.birthYear1(2000);
                    print(person2);         //Output: null, 2000, null      
            
            class People{}  >
               String name;
               int birthYear;
               bool status;

               People(this.name, this.birthYear, this.status);
               People.birthYear1(this.birthYear);
               
               @override
                String toString(){} >
                    return "${this.name}, ${this.birthYear}, ${this.status}";                  
        
        //Defined Constructor//////////
            main() {}   >
                People person = People("John", 1990, false);
                person.printPersonProperties();
            
            class People{}  >
                String name;
                int birthYear;
                bool status;
                
                People(this.name, this.birthYear, this.status);
                #This code above is the shorter version of the code below
                #People(name, birthYear, status) {}  >   
                #    this.name = name;
                #    this.birthYear = birthYear;
                #    this.status = status;
                
                void printPersonProperties() {} >
                    print("${this.name}, ${this.birthYear}, ${this.status}");
    
    //////////////////////////
    //Class Inheritence
    
        class Vehicle {} >
            String model;
            int year;
            
            Vehicle(this.model, this.year) {} >
                print(this.model);
                print(this.year);                
            
            void showOutput() {} >
                print(model);       //this.model can also be used here
                print(year);                    

        class Car extends Vehicle {} >
            double price;
            
            Car(String model, int year, this.price) : super(model, year);       //'super' calls the Vehicle Class for the value of model and year
            
            void showOutput() {} >
                super.showOutput();             //'super' calls the showOutput() from the Vehicle Class
                print(this.price);              

        void main() {} >
            var car1 = Car('Accord', 2014, 150000);     //injects value into Car class
            car1.showOutput();
        
        //OUTPUT: Accord, 2014, Accord, 2014, 150000.0
    
    //////////////////////////
    //Override 
        also read Topic7 in flutter.txt (@override)
        
        //Basic Structure//////////
            class X {} >
                String name;            
                X(this.name);
                
                void showOutput() {} >
                    print(this.name);
                
                dynamic square(dynamic val) {} >
                    return val * val;                
            
            class Y extends X {} >
                Y(String name) : super(name);
                
                @override                       //so this enables the showOutput() of Y instead of the one in X
                void showOutput() {} >
                    print(this.name);
                    print('Hello');                
    
        //Override a Defined Constructor//////////
            main() {}   >
                People person = People("John", 1990, false);
                print(person);
            
            class People{}  >
                String name;
                int birthYear;
                bool status;
                
                People(this.name, this.birthYear, this.status);
                
                @override
                String toString(){} >       //Coverts values to strings
                    return "${this.name}, ${this.birthYear}, ${this.status}";
    
    //////////////////////////
    //Getters and Setters    
        //Similar to Javascript

        //Structure 1 //////////  
            class Rectangle {}  >
                num left, top, width, height;   //num can be int or double
                
                Rectangle(this.left, this.top, this.width, this.height);
                
                //Define 2 calculated properties: right and bottom.
                num get right => left + width;                                      
                set right(num value) => left = value - width;               //How Setter being used
                num get bottom => top + height;
                set bottom(num value) => top = value - height;            
            
            void main() {} >
                var rect = Rectangle(3, 4, 20, 15);
                assert(rect.left == 3);
                rect.right = 12;
                assert(rect.left == -8);

            void main() {}  >
                var rect = Rectangle(3, 4, 20, 15);
                print(rect.left);                                                           //Output 3
                rect.right = 12;                                                           //How Getter being used
                print(rect.left);                                                          //Output -8             
        
        //Get-Set on Named Constructor //////////  
            //See Named Constructor #4
            main() {
                People person = People("John", 1990, false);                
                    print(person);

                People person2 = People.birthYear(2000);
                    person2.setYear = 2001;
                    print(person2.getYear);
            }

            class People{
               String name;
               int birthYear;
               bool status;

               People(this.name, this.birthYear, this.status);
               People.name(this.name);
               People.birthYear(this.birthYear);
               People.status(this.status);
               
                int get getYear{
                    if(birthYear == null)
                        return 1990;
                    return birthYear;
                }

                set setYear(int sYear){
                    if(sYear < 2001){
                        birthYear = 2000;
                        return;
                    }
                }
               
                @override
                String toString(){
                    return "${this.name}, ${this.birthYear}, ${this.status}";
                }
            }


22 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//Exception Handling - Check whether there is runtime error
    //throw, try, catch
    int mustGreaterThanZero(int val) {
        if (val <= 0) {
            throw Exception ('Value must be greater than zero');
        }
        return val;
    }
    void letVerifyTheValue(var val) {
        var valueVerification;
        
        try {
            valueVerification = mustGreaterThanZero(val);
        }
        catch(e) {
            print(e);
        }
        finally {
            if (valueVerification == null) {
                print('Value is not accepted');
            }
            else {
                print('Value verified: $valueVerification');
            }
        }
    }
    void main() {
        letVerifyTheValue(10);      //Without Error, Output 10
        //letVerifyTheValue(0);     //With Error
    }


    //To catch a particular exception type follow this
    try {
        breedMoreLlamas();
    } 
    
    on OutOfLlamasException {
        //A specific Exception
        buyMoreLlamas();
    } 
    
    on Exception catch (e) {
        //Anything else that is an exception
        print('Unknown exception: $e');
    } 
    
    catch (e) {
        //No specified type, handles all
        print('Something really unknown: $e');
    }






















