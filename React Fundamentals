https://github.com/iamshaunjp/react-redux-complete-playlist/branches/stale
React Fundamentals
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Introduction
02. React Setup (with CDN)
03. Creating React Components
04. State
05. React Development Tools
06. DOM Events
07. Changing State and 'this'
08. Introduction to Forms
09. Create React App
10. Single Page Apps
11. Nesting Components
12. Props
13. Outputting Lists
14. Stateless Components
15. Conditional Output
16. Forms Revisited
17. Functions as Props
18. Deleting Data
19. Recap & Virtual DOM
20. CSS Files
21. Lifecycle Methods
22. Simple Todo App
23. Simple Todo App (Part 2)
24. The React Router                  **Installation required "npm install react-router-dom"
25. Links and NavLinks
26. Programmatic Redirects
27. Higher Order Components
28. Using Axios                       **Installation required "npm install axios"
29. Route Parameters (Part 1)
30. Route Parameters (Part 2)
31. Switch Tag (Route Parameters Part 3)
32. Importing Images
33. Introduction to Redux
34. Redux Stores
35. Redux Actions
36. Redux Reducers
37. Store Subscriptions
38. Setting up Redux in React       **Installation required "npm install redux react-redux", and registerServiceWorker.js
39. Mapping State to Props
40. Blog Detail Page
41. Map Dispatch To Props

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Introduction
    
    Redux
        > A layer on top of react
        > Helps with state management of the app
            - data management
            - UI state of the app
            
    Fundamentals
        React Basics - components, events, templates, props and forms
        React Router - routes, route parameters, redirects
        Redux - stores, actions and reducers
        
    How it works
        React's components is the same as Flutter's widgets
        DOM (Doc Object Model) is an interface ie Web Browser
        Virtual DOM (VDOM) is 
            Native to React where it will render the document before sending to the actual DOM
            When program update takes place, VDOM will render and compare between the old and new render
            It will then update the affected area, instead of reloading entire page
            VDOM method saves page loading time

        Components
            Contains JSX (Javascript XML) Looks similar to HTML + JS
            Contains state (data or UI state)
            Contains JS for functionality

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. React Setup (with CDN)
    Go to link: https://reactjs.org/docs/cdn-links.html
    Get the script: 
        <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    In VSCode:
        Create a new file and save as empty html file
        Type in : "doc" and then press tab
            html structure will appear
        Insert the scripts below the meta tags
        Inside body tag, type in "div.#app"
            <div class="" id="app"></div>  //This line will appear and remove -> class=""

    Packages to be installed into VSCode:
        ES7 React/Redux/GraphQL/React-Native snippets      //Contains libraries
        Live Server                                        //Similar to Xampp to run React
        Sublime Babel                                      //Syntax highlighting
        Monokai++                                          //Sublime theme for VSCode

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Creating React Components
    
    JSX:
        Unlike html/php, JSX can only handle single root tags. Example: <div><ul><li><a></a></li></ul></div> where div is the root tag
        "Class" keyword can't be used. Example: <div class="">. Instead, use "className". Example: <div className="">
        <App /> where App is the class name and / is the closing tag similar to "</App>"
        JSX is not supported by web browsers.
            Solution is to add in babel loading script into the program, Link: https://babeljs.io/setup#installation
            <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    CODE: - Static
        <body>
            //<div class="" id="app"></div>                   //Class need to be removed
            <div id="app"></div>
            //<script>                                        //Create script tags inside of body tag
            <script type="text/babel">                        //type="text/babel" must be added once the babel loading script is inserted
                class App extends React.Component {           //class name to be used in the ReactDOM function
                    render() {                                //This function is responsible for rendering the template
                        return (                              //To return JSX template. JSX enables html code to be written in JS
                            <div className="app-content">
                                <h1> Hello </h1>              //JSX testing
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    //*.render(<class>, where to render)
            </script>
        </body>

    Running the program:
        Right click and select "Open with Live Server"
        Note that the html file MUST be inside the workspace folder

    CODE: - Dynamic with Javascript
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                <p>{ Math.random()*10 }</p>                    //JS codes can be inserted into the curly braces
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. State
    
    What is Component State
        > A JavaScript Object
        > Describes the current state of the components
            - data, UI-state
        > The state of a component can be updated over time
            - a model could close
            - the data we output could change

    Example 01: 
        Shopping cart component in JS
            {
                items: [
                    {name: 'navy jumper', price: 9.99},
                    {name: 'ninja mask', price: 19.99}
                ]
            }

        Updated shopping cart component in JS
            {
                items: [
                    {name: 'navy jumper', price: 9.99},
                    {name: 'ninja mask', price: 19.99},
                    {name: 'black cloak', price: 29.99}    //This will be added to reflect the update
                ]
            }    

    Example 02: 
        Popup enabled:
            {
                showPopup: true
            }

        Popup disabled:
            {
                showPopup: false
            }


    CODE: -cont'd on html
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    state = {                                     //This adds the JS object
                        name: 'Ryu',                              //But the 2 lines wont update what being output to the browser
                        age: 30
                    }
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                //<p>{ Math.random()*10 }</p> 
                                <p>My name is: { this.state.name } 
                                    and I am {this.state.age}</p>   //This means this current line. State means the state. Name means the element in the state.
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>        



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. React Development Tools

    React Developer Tools - Download from Chrome Web Store
        Assist to keep track of the states and components
        After installing, if the browser lands on any website that uses React, the icon will light up

    Usage
        In React website, open browser inspection tool
        Main Menu > React
            By selecting the parent tree, the state of that tree will show up on the right hand panel
            Values in the right hand panel can be change by just typing the new value (Website will updated in real time)
            Also note that the "<App>...</App>" corresponds to the "App Class" covered in earlier topic. See Topic 3 or 4
        There are 2 types of React icons: 
            Production: Blue
            Developer: Red


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. DOM Events
    
    Events:
        onClick is an event
        Follow link to see entire list: https://reactjs.org/docs/events.html#supported-events
    
    Create a Clickable event
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }
                handleClick(e)  {                                  //Defining the JS function. "e" is the event on page by default
                    console.log(e.target)                          //"e" is event. "Target" is property of the event (what triigger element that causes the event -> onClick)
                }
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>    
                                Click Me    //Use the already defined JS function (handleClick). Note that if "this.handleClick()" is used, the function will be automatically triggered when the page loads
                            </button> 
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>

    Create a Mouse over event
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }
                handleClick(e)  {        
                    console.log(e.target)   
                }
                handleMouseOver(e)  {        
                    console.log(e)   
                }                
                //handleMouseOver(e)  {        
                //    console.log(e.target, e.pageX)            //pageX can be found in inspection, list in components > console   
                //}                 
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>Click Me </button> 
                            <button onMouseOver={this.handleMouseOver}>Hover Me </button> 
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


    Create an onCopy event - When user tries to highlight a text and copy, another text will appear in console
        <script type="text/babel">           
            class App extends React.Component {       
                state = { ... }
                handleClick(e)  { ... }
                handleMouseOver(e)  { ... }                           
                handleCopy(e) {                                                                     //The event
                    console.log('Try being original for once');
                }
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>Click Me </button> 
                            <button onMouseOver={this.handleMouseOver}>Hover Me </button> 
                            <p onCopy={this.handleCopy}>What we think, we become</p>                //The target
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Changing State and 'this'

    Undefined "this" function
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    state = {                 
                        name: 'Ryu',       
                        age: 30
                    }                  
                    handleClick(e) {                
                        //console.log(e.target);                      //Original code
                        console.log(this.state);                      //Should have the same result but it's not defined
                    }
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                <p>My name is: { this.state.name } and I am {this.state.age}</p> 
                                <button onClick={this.handleClick}>Click Me </button> 
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>    

    The "this" keyword
        The keyword is determined by how and when the function is called and not by where the location of the function
        Therefore, the keyword in onClick has lost its function in "this.state". Similar to public/private class
        For new version of react, keyword must be binded to the function

    Solution: -Use arrow function        
        handleClick = (e) => {                         //This will make the keyword "public"
            console.log(this.state);
        }

    Changing the property value: Name to another name
        handleClick = (e) => {            
            //this.state.name = 'yoshi'                //This is a bad practice
            //this.setState({ });                      //use the setState function and '{}' object represents the state
            this.setState({ 
                name: 'Yoshi',
                age: 25
            });  
            console.log(this.state);
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Introduction to Forms

    Code:
        <div id="app"></div>
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }                  
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> My name is {this.state.name}</h1>      
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>

    Code: - With input box
        <div id="app"></div>
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }                  
                
                handleChange = (e) => {
                    this.setState({
                        name: e.target.value                                         //Retrieves value from the textbox
                    });
                }
                handleSubmit = (e) => {
                    e.preventDefault();                                              //This disables the page from refreshing to default when pressing on submit button
                    console.log('form submitted', this.state.name);                  //Diplay in console
                }
                
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> My name is {this.state.name} </h1>      
                            //<form>                                                 //Without onSubmit, the button will refresh to default (Ryu)
                            <form onSubmit={this.handleSubmit}>                      //With onSubmit, event will be called either by pressing enter or clicking. Changes will take place ONLY upon Submit
                                //<input type="text" />                              //Adds in basic text input box
                                <input type="text" onChange={this.handleChange}/>    //Adding an event to retrieve the text being typed in
                                <button>Submit</button>                              //If using "button onClick", if users press enter, it will refresh  to default (Ryu)
                            </form>
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Create React App

    A command line tool to create react apps
        Development server
        Use ES6 features which are not normally supported
        Keep our code modular
        Use build tools to create optimized code

    Installation
        npx create-react-app my-app
        cd my-app
        npm start
        Open http://localhost:3000/ to see app
        To deploy to production, create minifield bundle with "npm run build"

    Command after installations
        npm start
            Starts the development servier
        
        npm run build
            Bundles the app into static files for production
        
        npm test
            Starts the test runner
            
        npm run eject
            Removes this tool and copies build dependencies, configuration files
            and scripts into the app directory. If you do this you can't go back.
            
        Recommended: Begin by typing
            cd myapp
            npm start


    Folders
        > node_modules : Libraries, dependencies
        > public : For the browser
        > src : Contains files to be programmed
        > package.json : installed packages
        > package-lock.json : Installed packages that are locked

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Single Page Apps
    
    React apps are typically Single Page Applications
    Only on HTML page served to the browser
    React then controls what a suser sees on that page
    
    Traditionally, server will handle the index.html and every other pages of the website upon request.
    In React, server handles the index.html BUT React (external to the server) will handle every other pages of the website as components.
    
    Main Components:
        ../src/App.js  -> This contains the "App class/render() function", see code above for reference
        ../src/index.js -> This contains the "ReactDOM.render(<App />, document.getElementById('root'))", see code above for reference
            Technically, the code above will be split into separate components within the app
        ../src/registerServiceWorker.js -> Website cache
        ../src/index.css -> CSS stylings

    Starting the App:
        From Terminal, enter "myapp" folder
        Then, npm start
        This will start the website in the browser

    Delete ../src/App.test.js
    Delete ../src/App.css
    Remove "import ./App.css" from ../src/App.js
    Remove contents within "div className=App" for App.js. 
        Add <h1>My App</h1>
        Add<p>Hello</p>

    Save file and this will automatically updates the page in the browser


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Nesting Components
    
    |                       App.js(Root Component)
    |          |-----------------------------------------------|
    |    Navbar.js                                        ContactForm.js
    |
    |Multiple components can be nested under the root component
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';                     //This will import the Ninjas.js file
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p>
                      <Ninjas />                           //This will call out the Ninja class from Ninjas.js
                    </div>
                );            
            }
        }
        export default App;

    Create a new file ../src/Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                return (
                    <div className="ninja">
                        <div>Name: Ryu</div>
                        <div>Age: 30</div>
                        <div>Black: Black</div>
                    </div>
                );            
            }
        }
        export default Ninjas;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Props (Properties)

    Props is a method to pass a parent (App.js) component to child component (Ninjas.js)
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p>
                      <Ninjas name="Ryu" age="30" belt="black" />    
                      <Ninjas name="Ken" age="25" belt="black" />       //Extra line when the const {} line exists in child component
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                //console.log(this.props);                       //This will print out the components from the parent into the console
                const {name, age, belt} = this.props             //This is another method to call other than using "console.log"
                return (
                    <div className="ninja">
                        //<div>Name: {this.prop.name} </div>
                        //<div>Age: {this.prop.age} </div>
                        //<div>Belt: {this.prop.belt} </div>
                        <div>Name: {name} </div>                 //This line can only be used when the const {} line exists
                        <div>Age: {age} </div>                   //This line can only be used when the const {} line exists
                        <div>Belt: {belt} </div>                 //This line can only be used when the const {} line exists
                    </div>
                );            
            }
        }
        export default Ninjas;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Outputting Lists
    
    Output an entire list of Ninjas
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';                          //ClassName - FileName
        
        class App extends Component {
            state = {                                           //The new created array
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />     //Calls the ninja array
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                const { ninjas } = this.props;                   //Similar to "const ninjas = this.props.ninjas"
                
                //const ninjaList = ninjas.map(ninja)            //arrayName.map(individualNinja)
                //const ninjaList = ninjas.map(ninja => {})      //Cycling through the individual ninja
                const ninjaList = ninjas.map(ninja => {
                    return (
                        //<div className="ninja">                //This doesn't contain any key therefore will prompt a key error into the console
                        <div className="ninja" key={ninja.id}>   //This will activate the key by calling the id number in App.js (id=1, id=2, etc)
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                })
                
                return (
                    //<div className="ninja">      //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Name: {name} </div> //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Age: {age} </div>   //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Belt: {belt} </div> //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //</div>                       //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    
                    <div className="ninja-list">
                        { ninjaList }
                    </div>  
                    
                );            
            }
        }
        export default Ninjas;                      //Filename

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Stateless Components

    Container VS UI Components
    
        Container Components
            Contain state
            Contain lifecycle hooks
            Not concerned with UI
            Use classes to create
            
        UI Components
            Dont contain state
            Receive data from props or container components
            Only concerned with UI (How data is presented on the screen)
            Use functions to create

        |                               App.js
        |                         Container Component
        |           |----------------------|------------------------|
        |     Navbar.js              Ninjas.js                ContactForm.js
        |    UI component            UI Compnent            Container Component
        |
        Container components can parent a UI component and/or another container component


    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        
        class App extends Component {     //Container Component
            state = {                                      //This is the state and it requires to be inside a class
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        //import React, {Component} from 'react';  //The {Component} can be removed
        import React from 'react';

        //class Ninjas extends Component {         //Since this does not contain any state, the class can be removed and use a function instead
        //const Ninjas = () => {                   //This will be the function holding the UI compnent
        //const Ninjas = (props) => {              //And this function will take in the props
        //const Ninjas = (ninjas) => {             //Using ninjas as direct prop. You may remove "const {ninjas} = props" below.
        const Ninjas = ({ninjas}) => {             //Also note that multiple props can be called by the function -> "const Ninjas = ({ninjas, age, shop, name}) => {}"
            //render () {                          //This can be removed since render method is only for a class
                //const { ninjas } = this.props;   //Since functions dont take "this.*" method, it will be removed
                //const { ninjas } = props;        //This entire line can be removed IF "const Ninjas = (ninjas) => {}" is being used above
                
                const ninjaList = ninjas.map(ninja => {
                    return (
                        <div className="ninja" key={ninja.id}> 
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                })
                
                return (
                    
                    <div className="ninja-list">
                        { ninjaList }
                    </div>  
                    
                );            
            //}
        }
        export default Ninjas;   


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Conditional Output
    
    Showing something to the user based on certain condition
    Example: 
        Show discount only when the user adds 5 or more items to a shopping basket
        Show ninjas with age above 20
    If statement:
        If (ninjas.age > 20) { return(...) } else { return null }
    Ternary operator can be used (Indirect Output)
        condition ? ( return(...) ) : null;   //Where "null" is the else statement
    Ternary operator can be used (Direct Output)
        

    Ninjas.js (IF Statement)
        import React from 'react';

        const Ninjas = ({ninjas}) => {                      
            const ninjaList = ninjas.map(ninja => {
                if (ninja.age > 20) {                                   //Only shows ninjas that are above 20
                    return (
                        <div className="ninja" key={ninja.id}> 
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                } else {
                    return null
                }
            })
            
            return (                    
                <div className="ninja-list">
                    { ninjaList }
                </div>                      
            );            
        }
        export default Ninjas;   

    Ninjas.js (Ternary Operator 01)
        import React from 'react';

        const Ninjas = ({ninjas}) => {                      
            const ninjaList = ninjas.map(ninja => {            
                //condition ? () : ();                                 // (if true) : (if false)
                //return condition ? () : ();                          //map function always expects a return value
                //return ninja.age > 20 ? (JSXCode) : null;            //JSX code to be added into the bracket                
                return ninja.age > 20 ? (
                    <div className="ninja" key={ninja.id}> 
                        <div>Name: {ninja.name} </div>
                        <div>Age: {ninja.age} </div>   
                        <div>Belt: {ninja.belt} </div>    
                    </div>                      
                ) : null;
            });                                                        //Semicolon needed
            
            return (                
                <div className="ninja-list">
                    { ninjaList }
                </div>                  
            );            
        }
        export default Ninjas; 

    Ninjas.js (Ternary Operator 02)
        import React from 'react';

        const Ninjas = ({ninjas}) => {       
            
            return (                
                <div className="ninja-list">
                    {
                        //const ninjaList = ninjas.map(ninja => {       //"const ninjaList = " not in use since this is direct
                        ninjas.map(ninja => {         
                            return ninja.age > 20 ? (
                                <div className="ninja" key={ninja.id}> 
                                    <div>Name: {ninja.name} </div>
                                    <div>Age: {ninja.age} </div>   
                                    <div>Belt: {ninja.belt} </div>    
                                </div>                      
                            ) : null;
                        })                                              //Semicolon not needed
                    }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16. Forms Revisited
    A Form to add in new ninja into the list
    Create a new form in ../src/AddNinja.js
    This new file will be a class base component since it has to locally store whatever the user types in 
    Data entered will be stored in AddNinja.js as a state component and be displayed in the console
    
    AddNinja.js
        import React, {Component} from 'react';
        
        class AddNinja extends Component {  
        
            state = {
                name: null,                     //Here, whenever there's value in textbox, it will update the 'null' but did not store the value
                age: null,                      //Therefore another function is required to for storing. So add handleChange event
                belt: null
            }
            
            handleChange = (e) => {
                
                //name[2]                      //This is the example square bracket to get name from index 2
                //ninja['name']                //This is the example square bracket to get objects
                //['name']                     //In setState(), only the square bracket is written
                //[e.target.id]                //This is the example square bracket to get string from an event under setState()
                
                this.setState({
                    //[e.target.id]                 //Getting the id name from JSX and refer to its state
                    [e.target.id] : e.target.value  //To replace the current value with the new value
                })
            }
            
            handleSubmit = (e) => {
                e.preventDefault();         //Preventing the default action that refreshes the entire page
                console.log(this.state);    //Prints state into console
            }
            
            render(){
                return(
                    <div>
                        //<form>
                        <form onSubmit={this.handleSubmit}>                   //calling a function when submit
                            <label htmlFor="name">Name:</label>               //Jsx version for "for" attribute in HTML
                            <input type="text" id="name" onChange={this.handleChange} />
                            <label htmlFor="name">Age:</label>    
                            <input type="text" id="age" onChange={this.handleChange} />
                            <label htmlFor="name">Belt:</label>  
                            <input type="text" id="belt" onChange={this.handleChange} />
                            <button>Submit</button>
                        </form>
                    </div>
                )
            }        
        }
        
        export default AddNinja;

    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        import AddNinja from './AddNinja';      
        
        class App extends Component {    
            state = {                         
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                      <AddNinja />                                            //Retrieve data from AddNinja
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js (Ternary Operator 02)
        import React from 'react';

        const Ninjas = ({ninjas}) => {       
            
            return (                
                <div className="ninja-list">
                    {
                        ninjas.map(ninja => {         
                            return ninja.age > 20 ? (
                                <div className="ninja" key={ninja.id}> 
                                    <div>Name: {ninja.name} </div>
                                    <div>Age: {ninja.age} </div>   
                                    <div>Belt: {ninja.belt} </div>    
                                </div>                      
                            ) : null;
                        })
                    }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
17. Functions as Props
    
    A Form to add in new ninja into the list (Continued)
    Instead of the new ninja being displayed in the console, the data will instead be stored and displayed in the browser
    Data will be taken from the state component of AddNinja.js and pushed into the state component of App.js
    Read 1 thru 15 steps


    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        import AddNinja from './AddNinja';      
        
        class App extends Component {    
            state = {                         
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            
            //addNinja = ()                 //1. Create a new variable and call it "addNinja" which will take in a parameter
            //addNinja = (ninja)            //2. Create another variable that retrieves the state component data in addNinja.js
            //addNinja = (ninja) => {}      //3. Arrow function to set the state
            addNinja = (ninja) => {
                //console.log(ninja);                       //9. For testing: This will retrieve the state component objects from AddNinja.js and display into the console
                ninja.id = Math.random();                   //10. This will add an id tag to the user input ninja and assign a random number to its id
                
                //this.ninjas.push(ninja)                   //11. This pushes the new data into the ninjas array hence disrupting the array. Therefore can't be used. A bad practice
                //let ninjas = []                           //12. This creates a new empty array so the original ninjas array can be duplicated
                //let ninjas = [...this.state.ninja]        //13. This will retrieve the data from ninjas array, spread them out and paste into the empty array
                let ninjas = [...this.state.ninjas, ninja]  //14. This adds the new ninja element into the array
                
                this.setState({
                    ninjas : ninjas                         //15. Set the new updated/duplicated ninjas arrays as the current array state
                })
            }
            
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                      //<AddNinja />      
                      //<AddNinja addNinja={} />             //4. Create another function and this will enable the function to be accessed by AddNinja.js
                      <AddNinja addNinja={this.addNinja} />  //5. Run the code from the "addNinja" function above   
                    </div>
                );            
            }
        }
        export default App;

    
    AddNinja.js
        import React, {Component} from 'react';
        
        class AddNinja extends Component {          
            state = {
                name: null,    
                age: null,   
                belt: null
            }
            
            handleChange = (e) => {   
                this.setState({
                    [e.target.id] : e.target.value 
                })
            }
            
            handleSubmit = (e) => {
                e.preventDefault();    
                //console.log(this.state);              //6. Instead of diplaying in console directly, a function will be called from App.js
                //this.props.addNinja();                //7. This will call the "<AddNinja addNinja={this.addNinja} />" function in App.js
                this.props.addNinja(this.state);        //8. This will call the "ninja" in "addNinja = (ninja) => {}" in App.js
            }
            
            render(){
                return(
                    <div>
                        <form onSubmit={this.handleSubmit}>        
                            <label htmlFor="name">Name:</label>     
                            <input type="text" id="name" onChange={this.handleChange} />
                            <label htmlFor="name">Age:</label>    
                            <input type="text" id="age" onChange={this.handleChange} />
                            <label htmlFor="name">Belt:</label>  
                            <input type="text" id="belt" onChange={this.handleChange} />
                            <button>Submit</button>
                        </form>
                    </div>
                )
            }        
        }
        
        export default AddNinja;

    Ninjas.js (No changes)
        import React from 'react';

        const Ninjas = ({ninjas}) => { ... }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18. Deleting Data (PROBLEM)
    Adding a delete button for each ninja and remove the array from the stored state array
    
    App.js
            import React, {Component} from 'react';
            import Ninjas from './Ninjas';         
            import AddNinja from './AddNinja';      
            
            class App extends Component {    
                state = {                         
                    ninjas : [
                        {name: 'Ryu', age: 30, belt: 'black', id: 1},
                        {name: 'Ken', age: 20, belt: 'green', id: 2},
                        {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                    ]
                }
                
                addNinja = (ninja) => {
                    ninja.id = Math.random();            
                    let ninjas = [...this.state.ninjas, ninja]                 
                    this.setState({
                        ninjas : ninjas    
                    })
                }
                
                deleteNinja = (id) => {                                  //01. Selecting the id in the array
                    //console.log(id)                                    //08. To printout the id number into the console for testing
                    //let ninjas = this.state.ninjas.filter()            //09. This will filter out the the array based on id number
                    let ninjas = this.state.ninjas.filter(ninja => {     //10. This will cycle through the duplicated array
                        //return true/false                              //11. For true, the ninja object will remain in the new array. For false, this will filter out from the array
                        //return false                                   //12. In order to filter out, it has to return false
                        return ninja.id !== id                           //13. If id = ninja object "ninja => {", then return false
                    });
                    this.setState({
                        ninjas : ninjas                                  //14. Set the updated array as current array 
                    })
                }
                
                render () {
                    return (
                        <div className="App">
                          <h1>My App</h1>
                          <p>Hello</p> 
                          //<Ninjas ninjas={this.state.ninjas} />  
                          <Ninjas deleteNinja={this.deleteNinja} ninjas={this.state.ninjas} />       //02. Giving access Ninjas.js to run deleteNinja function
                          <AddNinja addNinja={this.addNinja} /> 
                        </div>
                    );            
                }
            }
            export default App;

    Ninjas.js
        import React from 'react';

        //const Ninjas = ({ninjas}) => {                      
        const Ninjas = ({ninjas, deleteNinja}) => {                                                 //03. This to add the deleteNinja function in App.js
            const ninjaList = ninjas.map(ninja => {                      
                if (ninja.age > 20) {
                    return (
                        <div className="ninja" key={ninja.id}>                                      //06. Point 05. is referring to the "ninja.id" in this line
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                            //<button onClick={deleteNinja}>Delete ninja</button>                   //04. This to add the button to every ninja in the browser
                            //<button onClick={deleteNinja(ninja.id)}>Delete ninja</button>         //05. This to call up the id number of the displayed ninja via key. NOTE: Adding (ninja.id) enables automatic trigger
                            <button onClick={() => {deleteNinja(ninja.id)}}>Delete ninja</button>   //07. This will disable the auto mode. Known as anonymous function
                        </div>                   
                    )    
                } else {
                    return null
                }
            });     
            
            return (                
                <div className="ninja-list">
                    { ninjaList }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
19. Recap & Virtual DOM
    
    Current Application structure
        |
        |                         App.js
        |                    Container Component
        |                            |
        |                 |----------|------------|
        |    deleteNinja  |                       |     
        |  ninjas (prop)  |                       | addNinja
        |                 |                       |
        |              Ninjas.js              AddNinjas.js
        |             UI Compnent         Container Component
        |    

    Virtual DOM
        |                     
        |     props  / ninjas
        |       |        |
        |  |------------------|
        |  |    Ninjas.js     |
        |  |------------------|                                              |----------------|
        |           |                     |-----------|  |-----------|       |                |
        |           |---------------------|  Virtual  |  |  Virtual  |       |    The DOM     |
        |               jsx template      |    DOM    |  |    DOM    |       |   (BROWSER)    |
        |                                 |   (new)   |  | (current) |       |                |
        |                                 |-----------|  |-----------|       |----------------|
        |                                       |              |                      |
        |                                       |--------------|                      |
        |                                              |------------------------------|
        |                                                    differences updated
        |
        | The browser will always show the current VDom
        | If there is differences between the new and current VDom, the new becomes the current VDom 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20. CSS Files
    
    There are few different ways to use CSS files in React 
    Methods:
        1. Create CSS file for individual component - This will only affect the component individually
        2. Using 'index.css' - This will affect ALL components and no need to import to every single component file
        3. Using CSS modules - Need to setup the configuration file, https://blog.pusher.com/css-modules-react/
    
    CSS file for individual component
        Ninjas.css
            body{                                   //This will actually affect Ninjas.js as well as App.js since they are shared BUT
                background: pink;                   //when another component is updated, it will only affect that particular component
            }       
        
        Ninjas.js
            import React from 'react';
            import './Ninjas.css'                   //Just import the file

            const Ninjas = ({ninjas, deleteNinja}) => {...}
            export default Ninjas;         


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
21. Lifecycle Methods
    
    React Lifecycle Methods Diagram
        https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

    |      |--------------------------------|     |----------------------------------------------------------|    |------------------------------------| 
    |      |          MOUNTING              |     |                         UPDATING                         |    |             UNMOUNTING             |  
    |      |                                |     |                                                          |    |                 |                  |  
    |      |   |------------------------|   |     |                                                          |    |                 |                  |  
    |      |   |     constructor        |   |     |                                                          |    |                 |                  |  
    |      |   |------------------------|   |     |    New props     setState()    forceUpdate()             |    |                 |                  |  
    |      |                 |              |     |        |             |              |                    |    |                 |                  |  
    |      |                 V              |     |        V             V              V                    |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |  
    |      |   |                              getDerivedStateFromProps                                |      |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |  
    |      |                 |              |     |        |                     |             |             |    |                 |                  |     "Render phase"
    |      |                 |              |     |        V                     V             |             |    |                 |                  |  Pure and has no side
    |      |                 |              |     |   |----------------------------------|     |             |    |                 |                  | effects. May be paused,
    |      |                 |              |     |   |         shouldComponentUpdate    |     |             |    |                 |                  | aborted or restarted by
    |      |                 |              |     |   |----------------------------------|     |             |    |                 |                  |         React
    |      |                 |              |     |                        |                   |             |    |                 |                  |  
    |      |                 V              |     |                        V                   V             |    |                 |                  |  
    |      |  |-----------------------------------------------------------------------------------------|    |    |                 |                  |  
    |      |  |                                            render                                       |    |    |                 |                  |  
    |      |  |-----------------------------------------------------------------------------------------|    |    |                 |                  |  
    |      |                 |              |     |                                |                         |    |                 |                  | ======================
    |      |                 |              |     |                                V                         |    |                 |                  | 
    |      |                 |              |     |   |------------------------------------------------|     |    |                 |                  |  "Pre-Commit phase"
    |      |                 |              |     |   |             getSnapshotBeforeUpdate            |     |    |                 |                  |   Can read the DOM
    |      |                 |              |     |   |------------------------------------------------|     |    |                 |                  |  
    |      |                 |              |     |                                |                         |    |                 |                  | ======================
    |      |                 V              |     |                                V                         |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |    "Commit phase"
    |      |   |                          React updates DOM and refs                                  |      |    |                 |                  |  Can work with DOM,
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |   run side effects,
    |      |                 |              |     |                                |                         |    |                 |                  |   schedule updates
    |      |                 V              |     |                                V                         |    |                 V                  |  
    |      | |----------------------------| |     |    |------------------------------------------------|    |    |  |-------------------------------| |  
    |      | |     componentDidMount      | |     |    |              componentDidUpdate                |    |    |  |        componentWillMount     | |
    |      | |----------------------------| |     |    |------------------------------------------------|    |    |  |-------------------------------| |  
    |      |                                |     |                                                          |    |                                    |  
    |      |--------------------------------|     |----------------------------------------------------------|    |------------------------------------|

    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        import AddNinja from './AddNinja';      
        
        class App extends Component {    
            state = {                         
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            
            addNinja = (ninja) => {
                ninja.id = Math.random();            
                let ninjas = [...this.state.ninjas, ninja]                 
                this.setState({
                    ninjas : ninjas    
                })
            }
            
            deleteNinja = (id) => {      
                let ninjas = this.state.ninjas.filter(ninja => {      
                    return ninja.id !== id            
                });
                this.setState({
                    ninjas : ninjas    
                })
            }
            
            componentDidMount() {
                console.log('component mounted')         //Will show DOM is mounted and this will only be mounted ONCE unless page being refreshed
            }
            
            componentDidUpdate(prevProps, prevState) {   //When the state/props changes, 
                console.log('component updated');        //prevProps/prevState = props/state AFTER the change, will show when a ninja being deleted or added
                console.log(prevProps, prevState');      //prevProps/prevState = props/state BEFORE the change, will show previous state in console - See "{ninjas: Array(#)}"
            }
            
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas deleteNinja={this.deleteNinja} ninjas={this.state.ninjas} /> 
                      <AddNinja addNinja={this.addNinja} /> 
                    </div>
                );            
            }
        }
        export default App;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
22. Simple Todo App (Part 1)
    
    Creating a new app
        In Terminal, type in "npx create-react-app yourappname"
        Therefore: npx create-react-app todoapp
        Once created, just enter the folder "cd todoapp"
        And then start the app "npm start"
        
    CSS library
        https://materializecss.com
        In CDN section, copy this lines
            <!-- Compiled and minified CSS -->
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/css/materialize.min.css">

    Paste the copied CSS
        Explporer > React > todoapp > public > index.html
        
        index.html
            <!DOCTYPE html>
            <html lang="en">
                <head> 
                    .
                    .
                    .
                    <!-- Compiled and minified CSS -->
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/css/materialize.min.css">
                    <title> ... </title>
                </head>
                <body> ... </body>
            </html>

    Remove few files from src folder
        ../todoapp/src/ >
            App.css
            App.test.js
            logo.svg
            
    App.js (Starting a clean slate)
        import React, {Component} from 'react';
        //import logo from './logo.svg';                    //Removed
        //import './App.css';                               //Removed
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                        **REMOVED**
                    </div>
                );            
            }
        }
        export default App;

    App.js (CODING)
        import React, {Component} from 'react';
        import Todos from './Todos';                        //Import Todo.js
        
        class App extends Component {
            state = {
                todos: [
                    {id: 1, content: 'buy some milk'},
                    {id: 2, content: 'play games'}
                ]
            }
            
            deleteTodo = (id) => {
                //console.log(id);                                //Prints id number into the console when clicking on the list
                const todos = this.state.todos.filter(todo => {   //Adds a delete event in order to delete the an element from the list
                    return todo.id !== id                         //IF ".filter(todo)" is not equal to "deleteTodo=(id)", then return true
                });
                this.setState({
                    //todos: todos                                //"Current todos" to absorb "const todos"
                    todos                                         //Shorter version of "todos:todos" since both share the same name
                })
            }
            
            render () {
                return (
                    //<div className="App">
                    <div className="todo-app container">                                    //Adding simple styling
                        //h1.center.blue                                                    //Type this in to add h1 tag
                        <h1 className="center blue-text">Todo's</h1>
                        //<Todos todos={this.state.todos}/>                                 //Nesting component from Todos.js and referencing to state array
                        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />     //Reference to deleteTodo event
                    </div>
                );            
            }
        }
        export default App;

    Todos.js (Create a functional component)
        import React from 'react'
        
        const Todos = ({todos, deleteTodo}) => {                             //{todos} received as prop
            
            const todoList = todos.length ? (
                todos.map(todo => {
                    return(
                        //div.collection-item                               //creates div tag with "collection-item" as className
                        <div className="collection-item" key={todo.id} >    //Calling the state key
                            //<span>{todo.content}</span>                                       //Calling the state content
                            //<span onClick={deleteTodo(id)}>{todo.content}</span>              //Calling deleteTodo event from App.js and delete by id, but note that this is automatically triggered
                            <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>   //Disabling auto trigger by anonymous function
                        </div>
                    )
                })
            ) : (
                <p className="center">You have no todo's left</p>
            )
        
            return (
                //div.todos.collection                  //Type this line in to add in a div tag
                <div className="todos collection">
                    {todoList}                          //Output the todoList
                </div>
            )
        }

        export default Todos;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
23. Simple Todo App (Part 2 - Form) >> 19 points

    Create a new file under "src" folder
        ../appname/src/AddForm.js
        Since we need a state in the component, so this will be a class base comonent
        
    AddTodo.js
        import React, {Component} from 'react'
        
        class AddTodo extends Component {
            
            state = {
                content: ''                                                          //03. Set state content as an Empty string
            }
             
            handleChange = (e) => {
                this.setState({                                                      //04. Updates the state content
                    content: e.target.value                                          //05. Syncing the value of state
                })
            }
            
            handleSubmit = (e) => {
                e.preventDefault();                                                  //06. Preventing the default which is auto refresh of page
                //console.log(this.state)                                            //07. Submit to console (To test if the form works)
                this.props.addTodo(this.state);                                      //12. This will run the event function code in App.js (addTodo function)
                this.setState({
                    content: ''                                                      //18. This clears the state in AddTodo.js after submitting content into the state in App.js
                })
            }            
            
            render () {
                return(
                    <div>
                        <form onSubmit={this.handleSubmit}>                          //01. Since the form contains submit button
                            <label>Add new todo:</label>
                            //<input type="text" onChange={this.handleChange} />     //02. Handles event handler and sync user inputs with the state
                            <input type="text" onChange={this.handleChange} value={this.state.content} />  //19. Clears the user textbox field using the event in point 18
                        </form>
                    </div>
                )
            }
        }
    
        export default AddTodo

    App.js (CODING)
        import React, {Component} from 'react';
        import Todos from './Todos';   
        import AddTodo from './AddTodo';                                              //08. Importing AddTodo.js
        
        class App extends Component {
            state = {
                todos: [
                    {id: 1, content: 'buy some milk'},
                    {id: 2, content: 'play games'}
                ]
            }
            
            deleteTodo = (id) => {
                const todos = this.state.todos.filter(todo => {  
                    return todo.id !== id   
                });
                this.setState({
                    todos      
                })
            }
            
            addTodo = (todo) => {                                                        //10. Syncing state from AddTodo.js with state from App.js
                todo.id = Match.random();                                                //13. Add id number to the new todo
                //let todos                                                              //14. Creates a new set of state in App.js state
                //let todos = [...this.state.todos]                                      //15. Copy the contents of the state and duplicate over into the newly created state
                let todos = [...this.state.todos, todo];                                 //16. Adds in the user defined todo into the duplicated state
                this.setState({
                    //todos: todos                                                       //17. Update the todos (Not required since they are the same name)
                    todos
                })
            }
            
            render () {
                return (
                    <div className="todo-app container">
                        <h1 className="center blue-text">Todo's</h1>
                        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} /> 
                        //<AddTodo />                                                     //09. Sync with AddTodo.js file
                        <AddTodo addTodo={this.addTodo} />                                //11. Enable access for AddTodo.js
                    </div>
                );            
            }
        }
        export default App;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24. The React Router


    STEP 1 - 11 Points
    ///////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////
    The react router handles a website with multiple pages
    Creating a new app (Details are exactly the same as in Topic 22)
    App.js (Starting a clean slate exactly the same as in Topic 22)
    
    Once the new app has been configured,
    Create a new folder to store multiple component files and name this folder as "component"
        ../myapp/src/component/
    Create a new file under component folder and name this "Home.js"
        This is going to be a functional component since it won't contain any state array
        
    Home.js                                                       //01. The Home.js
        import React from 'react';
        
        const Home = () => {
            return (
                <div className="container">
                    <h4 className="center">Home</h4>
                    <p>Lorem Ipsum</p>                            //02. To add in lorem ipsum paragraph, type in "lorem" between the p tags and press Tab                    
                </div>
            )
        }
        export default Home
    
    Create another file (About.js + Contact.js) in component folder, copy the code from Home.js and paste into About.js and Contact.js
    
    About.js                                                      //03. The About.js and Contact.js
        import React from 'react';
        
        const About = () => {
            return (
                <div className="container">
                    <h4 className="center">About</h4>
                    <p>Lorem Ipsum paragraph</p>                 
                </div>
            )
        }
        export default About    
    
    Contact.js
        import React from 'react';
        
        const Contact = () => {
            return (
                <div className="container">
                    <h4 className="center">Contact</h4>
                    <p>Lorem Ipsum paragraph</p>                                     
                </div>
            )
        }
        export default Contact        
    
    Now we have created all the pages, we need to link them with a navber, therefore, create a navbar file under component folder and name it Navbar.js
    This is where the router sits
    Navbar.js doesnt contain states so it will be a functional component
    
    Navbar.js                                                //04. The Navbar.js
        import React from 'react';
        
        const Navbar = () => {
            return (
                //nav.nav-wrapper                             //05. This class comes from the imported materialize file
                //nav.nav-wrapper.red                         //06. Add background color
                //nav.nav-wrapper.red.darken-3                //07. Red will be darken by 3 shades
                
                <nav className="nav-wrapper red darken-3">
                    <div className="container">
                        <a className="brand-logo">My App</a>
                        <ul className="right">                //08. Display on the right hand side
                            <li><a href="/">Home</a></li>
                            //<li><a href="/home">Home</a></li>  //17c. Addressing problem 17 but not a good practice                            
                            <li><a href="/about">About</a></li>
                            <li><a href="/contact">Contact</a></li>                            
                        </ul>
                    </div>
                </nav>
            )
        }
        export default Navbar               

    App.js (Starting a clean slate)                           //09. Add "import" Navbar component to App.js 
        import React, {Component} from 'react';
        import Navbar from './component/Navbar'               //11. Sync Navbar.js to App.js             
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                        <Navbar />                            //10. Sync Navbar.js to App.js
                    </div>
                );            
            }
        }
        export default App;

    
    STEP 2 - Install router
    ///////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////
****In Terminal, inter the myapp folder and type in "npm install react-router-dom"
    Take note that the method shown here only reloads the page instead of having the router to intervene

    App.js (Continued from STEP 1)              
        import React, {Component} from 'react';
        import Navbar from './component/Navbar'     
        //import {BrowserRouter} from 'react-router-dom'      //12. After installation, add this line
        import {BrowserRouter, Route} from 'react-router-dom' //14. Add Route tag
        import Home from './component/Home'                   //16. Import Home file so this will be recognized by the router
        import About from './component/About' 
        import Contact from './component/Contact' 
        
        class App extends Component {
            render () {
                return (
                    //<div className="App">
                    //    <Navbar />      
                    //</div>
                    
                    <BrowserRouter>                                   //13. Wrap the div tag with the new BrowserRouter tag
                        <div className="App">
                            <Navbar />      
                            //<Route path='/' component={Home} />     //15a. Setup router to point to Home.js file but need to import the Home.js to App.js. 
                            //                                        //15b. Note that this will show up over the contact despite contact page is selected
                            //<Route path='/home' component={Home} /> //17a. This will get rid of the Home content when other page is selected, but Home content wont show up in Home screen
                            //                                        //17b. Changing the path link from '/' to '/home' in Navbar.js will solve this but not a good practice (See 17c)
                            <Route exact path='/' component={Home} /> //18. This will be the better method for problem 17
                            <Route path='/about' component={About} />
                            <Route path='/contact' component={Contact} />
                        </div>
                    </BrowserRouter>
                );            
            }
        }
        export default App;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
25. Links and NavLinks

    NOTE: Notice that the page in Topic 24 refreshes itself whenever another page is being called
    Refreshing the page repeatedly is a bad practice in React
    Using Link will prevent the repeated page refresh and let the DOM take over
    
    Navbar.js                         
        import React from 'react';
        import {Link, NavLink} from 'react-router-dom'            //This will import the Link and Navlink
        
        const Navbar = () => {
            return (               
                <nav className="nav-wrapper red darken-3">
                    <div className="container">
                        <a className="brand-logo">My App</a>
                        <ul className="right">        
                            //<li><a href="/">Home</a></li>                  //The 'a' tag is no longer used in order to use the "link" method
                            //<li><a href="/about">About</a></li>
                            //<li><a href="/contact">Contact</a></li>           
                            
                            <li><Link to="/">Home</Link></li>                //The "Link" method. 
                            <li><Link to="/about">About</Link></li>
                            <li><Link to="/contact">Contact</Link></li>                                         

                            //<li><NavLink to="/">Home</NavLink></li>                //The "NavLink" method. 
                            //<li><NavLink to="/about">About</NavLink></li>
                            //<li><NavLink to="/contact">Contact</NavLink></li>                    
                            
                        </ul>
                    </div>
                </nav>
            )
        }
        export default Navbar
        
    Difference between Link and NavLink
    If you use the "Link tag" and then open the browser's inspect feature, the "a tag" will be displayed. 
        The only exception is that the page will not be refreshed and the loading will be smoother.
    If you use the "NavLink tag" and then open the browser's inspect feature, the "a tag" will be displayed BUT will be as an "active" class. 
        This "active" class will toggle between the listed items
        Example, 
            if "about" being clicked, then the "about" will contain the "active" class whereas the "home" and "contact" will be similar to "Link" which is the "a tag"
            if "home" being clicked, then the "home" will contain the "active" class whereas the "about" and "contact" will be similar to "Link" which is the "a tag"



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
26. Programmatic Redirects

    Directing the user to another URL

    Contact.js
        import React from 'react';
        
        //const Contact = () => {
        const Contact = (props) => {                   //If "props" being added, the router information will also be automatically be loaded
            //console.log(props)                       //To check the router object elements, go to console (history, location, match)        
            return (
                <div className="container">
                    <h4 className="center">Contact</h4>
                    <p>Lorem Ipsum paragraph</p>                                     
                </div>
            )
        }
        export default Contact      

    To redirect to another page after 2 seconds (in props element above, use history>push)
    History > Push > push(path, state)

    Contact.js
        import React from 'react';
        
        const Contact = (props) => {       
            //setTimeout(() => {                        //To comment out in order to test on Navbar
            //    props.history.push('/about')          //Redirects to about
            //}, 2000);                                 //Set time at 2s or 2000ms
            
            return (
                <div className="container">
                    <h4 className="center">Contact</h4>
                    <p>Lorem Ipsum paragraph</p>                                     
                </div>
            )
        }
        export default Contact   

    Using redirect to Navbar

    Navbar.js                         
        import React from 'react';
        //import {Link, NavLink} from 'react-router-dom' 
        import {Link, NavLink, withRouter} from 'react-router-dom'    //Adds in a higher order component (a wrapper that adds in a feature to a feature ) since there is no element in Navbar
        
        //const Navbar = () => {
        const Navbar = (props) => {
            //console.log(props)                        //Notice that there is no history.push in the console and therefore a higher order component needs to be used
            //setTimeout(() => {                        //To comment out in order to test on Navbar
            //    props.history.push('/about')          //Redirects to about
            //}, 2000);                                 //Set time at 2s or 2000ms
            
            return (               
                <nav className="nav-wrapper red darken-3">
                    <div className="container">
                        <a className="brand-logo">My App</a>
                        <ul className="right">                                   
                            <li><NavLink to="/">Home</NavLink></li>          
                            <li><NavLink to="/about">About</NavLink></li>
                            <li><NavLink to="/contact">Contact</NavLink></li>                    
                        </ul>
                    </div>
                </nav>
            )
        }

        //export default Navbar
        export default withRouter(Navbar) //Wraps Navbar with the "withRouter"



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
27. Higher Order Components

    Higher component
    |                                             HOC                      Supercharged
    |         Component                 |----------------------|             Component
    |   |---------------------|         |  |----------------|  |         |-----------------|
    |   |    Navbar.js        |---------|  |    Navbar.js   |  |---------|    Navbar.js    |
    |   |---------------------|         |  |----------------|  |         |-----------------|
    |                                   |----------------------|
    |

    Create a "hoc" folder and create Rainbow.js file
        ../src/hoc/Rainbow.js
    This will HOC will randomly change the colour of the texts in About page
    
    Rainbow.js
        import React from 'react'
        
        const Rainbow = (WrappedComponent) => {                                  //01. WrappedComponent will be absorbing the js file and for this case, About.js
            const colours = ['red', 'pink', 'orange', 'blue', 'green', 'yellow']; //03. Creating array with 6 elements. Note the 6 elements and 0-5 in index
            const randomColour = colours[Math.floor(Math.random() * 5)];         //04. Get random number from 0 to 5 where Math.floor is rounding off the decimals to nearest whole number
            const className1 = randomColour + '-text';                           //05. Setting up the CSS style naming convention.  Example "blue-text"
            
            return(props) => {                                                   //06. props will pass through WrappedComponent together with About.js
                return (
                    <div className={className1}>
                        <WrappedComponent {...props} />                          //07. The {...props} gives access to About.js and return as supercharged component
                    </div>
                )
            }
        }

        export default Rainbow

    About.js  (Copied from React Router Topic 24)
        import React from 'react';
        import Rainbow from '../hoc/Rainbow'                                      //08. Import file from Rainbow.js 
        
        const About = () => {
            return (
                <div className="container">
                    <h4 className="center">About</h4>
                    <p>Lorem Ipsum paragraph</p>                 
                </div>
            )
        }
        export default Rainbow(About)                                            //02. The about will be turned into 'props' and be captured by "WrappedComponent"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
28. Using Axios
    
    Read 22 Points
    To grab data from somewhere else to make website more dynamic (ie RestAPI, Firebase)
    In this example, we'll use RestAPI using JSON placeholders
    Link: https://jsonplaceholder.typicode.com
    Example:
        fetch('https://jsonplaceholder.typicode.com/todos/1')  //See resources for alternatives for "todo" 
            .then(response => response.json())
            .then(json => console.log(json))
    Resources
        /todos           200 todos
        /posts           100 posts
        /comments   500 comments
        /albums        100 albums
        /photos       5000 photos
        /users             10 users
    Installation
        ../myapp> npm install axios
    Method
        Refer to Topic 21
        Will be using "componentDidMount" to retrieve external data where the component already mounted to DOM
        But first, convert component into a class based component since functional component cant use lifecycle method

    Home.js  (Conversion to Class Component)                                          
        //import React from 'react';
        import React, {Component} from 'react'                     //Convert to class component
        
        //const Home = () => {
        class Home extends Component {                              //Convert to class component
            //return (
            //    <div className="container">
            //        <h4 className="center">Home</h4>
            //        <p>Lorem Ipsum paragraph</p>                                                  
            //    </div>
            //)
            render () {                                                       //Wraps return in order to convert into a class component
                return (
                    <div className="container">
                        <h4 className="center">Home</h4>
                        <p>Lorem Ipsum paragraph</p>                                                  
                    </div>
                )            
            }
        }
        export default Home

    Home.js   (CODE)
        import React, {Component} from 'react' 
        import axios from 'axios'                                              //02. Import the installed axios library
        
        class Home extends Component {    
            state = {                                                          //07. This will store data from "res"
                posts:[]                                                       //08. Empty array to store the retrieved contents
            }        
            componentDidMount(){                                               //01. Used for calling axios to import data
                axios.get('https://jsonplaceholder.typicode.com/posts')   //03. Asynchronous. It takes some time to go and complete a task
                    //.then()                                                  //04. This function will run when the async function completes
                    //.then(res)                                               //05. The "res" or "response" takes async results as a parameter 
                    .then(res => {
                        console.log(res)                                       //06. Prints out in console [Config, data, headers, request, status, _proto_] - All data retrieved being stored in "data"
                        this.setState({
                            //posts: res.data                                  //09. Pushes ALL data into the state's empty array
                            posts: res.data.slice(0, 10)                       //10. Pushes 10/100 data into the state's empty array by slicing the data that contains 100 elements
                        })
                    })
            }
            render () {               
                const {posts} = this.state;                                    //11. Cycles through the state in the template (See 14). This line grabs the posts property from the state
                //const postList = posts.length  ?                             //12. If there's data, then return True, If empty or no length, then False. 
                const postList = posts.length ? (
                    //posts.map()                                              //14. Cycles through the posts property
                    //posts.map(post => {})                                    //15. Runs a function for each post
                    posts.map(post => {  
                        return (                                               //16. Returns a JSX for each post element
                            //<div className="post card"></div>                //17. Prints out as CSS stylized postcards
                            //<div className="post card" key={post.id}></div>  //18. Calls out every post by their key IDs
                            <div className="post card" key={post.id}>
                                <div className="card-content">
                                    <span className="card-title">{post.title}</span>  //19. Output the title content
                                    <p>{post.body}</p>                         //20. Output the body content
                                </div>
                            </div>
                        )
                    }) 
                ) : (
                    <div className="center">No posts yet</div>                 //13. When false, print "No posts yet"
                )            
                return (
                    <div className="container">
                        <h4 className="center">Home</h4>
                        //<p>Lorem Ipsum paragraph</p>                         //21. Not required since we are returning the cards
                        {postList}                                             //22. Prints out the cards
                    </div>
                )            
            }
        }
        export default Home

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
29. Route Parameters (Part 1)

    Part of a URL that can change
    Usually see them on URLs for individual records
    User Profile Route:
        mysite.com/users/yoshi
        mysite.com/users/mario
    Cooking recipe page:
        mysite.com/recipes/12345
        mysite.com/recipes/98765

    Continued from the website with Axiom
    Clicking on the cards redirects to another URL(Route Parameter)
    But part 1 will contain code that when a page extension is typed in,  example "mysite.com/12345", then "12345" will be printed onto the browser

    Create a file (Post.js) under "src/component" folder
        ../myapp/src/component/Post.js
        This file will contain state therefore, will be a class base component

    App.js (From Topic 21 Step 2)              
        import React, {Component} from 'react';
        import Navbar from './component/Navbar'     
        import {BrowserRouter, Route} from 'react-router-dom' 
        import Home from './component/Home'     
        import About from './component/About' 
        import Contact from './component/Contact' 
        import Post from './component/Post'                                     //03. Import Post.js into App.js
        
        class App extends Component {
            render () {
                return (
                    
                    <BrowserRouter>                
                        <div className="App">
                            <Navbar />      
                            <Route exact path='/' component={Home} />    
                            <Route path='/about' component={About} />
                            <Route path='/contact' component={Contact} />
                            //<Route path='' component={} />                    //01. Blank route path and function
                            //<Route path='/:post_id' component={} />           //02. If the route id "mysite.com/users/mario" then the "post_id" is "/mario"
                            <Route path='/:post_id' component={Post} />         //04. Linking post
                        </div>
                    </BrowserRouter>
                );            
            }
        }
        export default App;

    Post.js (The Route parameter skeleton to print "Route Param" on screen)
        import React, {Component} from 'react';
        
        class Post extends Component {
            render() {
                return (
                    <div className="container">
                        <h4>Route Param</h4>
                    </div>
                )
            }
        }
        export default Post;

    Post.js (CODE to fetch data)
        import React, {Component} from 'react';
        
        class Post extends Component {
            state = {                                            //08. To store the post_id in the state array
                id: null                                         //09. When the component first loads up, it will show as null
            }
            componentDidMount(){
                //console.log(this.props);                       //07. Prints out the prop object in console [Object: history, loc, match, _proto_], Note under Object>Match>params, you'll find the post_id
                //let id = this.props.match.params               //05. Grabs the prop object parameter
                let id = this.props.match.params.post_id;        //06. Based on App.js, the name of the parameter is "post_id"
                this.setState({                                  //10. When componentDidMount function runs, this will replace null value in state with the post_id value
                    id: id                                       //11. The first id refers to the state and the second refers to "let id". Meaning "state id : let id"
                })
            }
            render() {
                return (
                    <div className="container">
                        //<h4>Route Param</h4>
                        <h4>{this.state.id}</h4>                 //12. Prints out the id on the browser
                    </div>
                )
            }
        }
        export default Post;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
30. Route Parameters (Part 2)

    Continued from part 1
    Home (Home.js)
        Clicking on card and redirect to route parameter
        Method is to surround the card with clickable event link tag (Topic 25) and this will divert to a seperate component
        Therefore surround the "post.title" with a link tag
    New Page (Post.js)
        Grabbing the post data using Axios (Ref Topic 28)
    
    Home.js   (CODE)
        import React, {Component} from 'react' 
        import axios from 'axios'           
        import {Link} from 'react-router-dom'                                              //01. Import the Link tag router parameter (Ref Topic 25)
        
        class Home extends Component {    
            state = {                  
                posts:[]                     
            }        
            componentDidMount(){                                   
                axios.get('https://jsonplaceholder.typicode.com/posts')  
                    .then(res => {
                        console.log(res)                                   
                        this.setState({
                            posts: res.data.slice(0, 10)     
                        })
                    })
            }
            render () {               
                const {posts} = this.state;                      
                const postList = posts.length ? (
                    posts.map(post => {  
                        return (                     
                            <div className="post card" key={post.id}>
                                <div className="card-content">
                                    //<span className="card-title">{post.title}</span>      //02. This will be surrounded by a link tag
                                    //<Link>                                                //03. Wrapping with link tag
                                    //<Link to={''}>                                        //04. Add dynamic link but note that '/post.id' can't be used or react will take the link at face value
                                    <Link to={'/' + post.id}>                               //05. Concatenate link with 'post.id'. Therefore, "myapp.com/12345"
                                        <span className="card-title">{post.title}</span> 
                                    </Link>    
                                    <p>{post.body}</p>                                  
                                </div>
                            </div>
                        )
                    }) 
                ) : (
                    <div className="center">No posts yet</div>            
                )            
                return (
                    <div className="container">
                        <h4 className="center">Home</h4>
                        {postList}             
                    </div>
                )            
            }
        }
        export default Home

    Post.js (CODE to fetch data)
        import React, {Component} from 'react';
        import axios from 'axios'                                                             //06. Importing axios (Ref Tppic 28)
        
        class Post extends Component {
            state = {         
                //id: null                                                                    //09. Now that the state no longer store the id but it will store the post
                post: null                                                                    //10. This will store the post
            }
            componentDidMount(){
                let id = this.props.match.params.post_id;   
                //axios.get('https://jsonplaceholder.typicode.com/posts/')                     //07. Insert the axios post tag
                axios.get('https://jsonplaceholder.typicode.com/posts/' + id)                  //08. Concatenate post with the id from "let id". This will return a single json object
                    //.then(res => {} )                                                       //11. Add callback function (Ref Topic 28)
                    .then(res => {
                        this.setState({  
                            //id: id                                                          //13. id no longer in use. Now using post in the state
                            post: res.data                                                    //14. Post will be equal to the data inside the response callback function therefore "res.data"
                        })                        
                        //console.log(res)                                                    //15. Print out the response into console. //17. Not in use
                    })
                //this.setState({                                                             //12. Setting the state for the id no longer needed but transferred into callback function
                //    id: id         
                //})
            }
            render() {
                //const post = this.state.post ?  () : ()                                      //18. Using JSX and ternary operator. If there's post, then true. Else return false
                const post = this.state.post ? (
                    <div className="post">
                        <h4 className="center">{this.state.post.title}</h4>                    //20. If there is content in state, the print out title in browser
                        <p>{this.state.post.body}</p>                                          //21. If there is content in state, the print out body content in browser
                    </div>  
                ) : (
                    <div className="center">Loading post...</div>                              //19. If no post in state array, return as false and print "Loading post..." in browser
                )   
                return (
                    <div className="container">
                        //<h4>{this.state.id}</h4>                                             //16. No longer needed since no longer calling the id
                        //<h4></h4>
                        <h4>{post}</h4>                                                        //22. Prints out the "const post" onto browser screen
                    </div>
                )
            }
        }
        export default Post;

    NOTE: 
        Notice that when contact mene is being clicked, the body content of the card will also show up in the contact page
        This will be addressed in next Topic


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
31. Switch Tag (Route Parameters Part 3)

    In App.js, there is nothing to differentiate between the Route path tags, "/:post_id" and "/contact" || "/about"
        <BrowserRouter>                
            <div className="App">
                ...
                <Route path='/about' component={About} />
                <Route path='/contact' component={Contact} />
                <Route path='/:post_id' component={Post} />  
            </div>
        </BrowserRouter>    
        
    Solution (App.js)
        //<Route path='/:post_id' component={Post} />        //01. Change from '/:post_id' to '/posts/:post_id'
        <Route path='/posts/:post_id' component={Post} />

    Solution (Home.js)
        //<Link to={'/' + post.id}>                                          //02. Change from '/' to '/posts/'
        <Link to={'/posts/' + post.id}>

    But the URL above requires restructuring of URLs from 'myapp.com/12345' to 'myapp.com/posts/12345'
    Another solution is to use Switch Tags
    
    App.js (From Topic 29)              
        import React, {Component} from 'react';
        import Navbar from './component/Navbar'     
        //import {BrowserRouter, Route} from 'react-router-dom' 
        import {BrowserRouter, Route, Switch} from 'react-router-dom'          //03. Add Switch Tag
        import Home from './component/Home'     
        import About from './component/About' 
        import Contact from './component/Contact' 
        import Post from './component/Post'       
        
        class App extends Component {
            render () {
                return (                    
                    <BrowserRouter>                
                        <div className="App">
                            <Navbar />      
                            //<Route exact path='/' component={Home} />    
                            //<Route path='/about' component={About} />
                            //<Route path='/contact' component={Contact} />
                            //<Route path='/:post_id' component={Post} /> 
                            <Switch>                                                      //04a. Wrap up Route path tags with Switch Tag
                                <Route exact path='/' component={Home} />                 //04b. The Switch Tag property works the same way as switches in Python
                                <Route path='/about' component={About} />                 //04c. Therefore, each individual path will be separated from other paths
                                <Route path='/contact' component={Contact} />
                                <Route path='/:post_id' component={Post} />         
                            </Switch>
                        </div>
                    </BrowserRouter>
                );            
            }
        }
        export default App;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
32. Importing Images 

    Recap:
        ../src/component
            Home.js: Topic 30
            Post.js: Topic 30
            About,js: Topic 27
            Navbar.js: Topic 26
            Contact.js: Topic 26         
        ../src/hoc/
            Rainbow.js: Topic 27
        ../src/    
            App.js: Topic 31

    Adding a PNG file to every card (See 9 points)
        ../src/image.png
        To use the image, just import the image
    
    Home.js   (CODE)
        import React, {Component} from 'react' 
        import axios from 'axios'           
        import {Link} from 'react-router-dom'     
        import YoutubeLogo from '../image000.png'                            //01. Import the image
        
        class Home extends Component {    
            state = {                  
                posts:[]                     
            }        
            componentDidMount(){                                   
                axios.get('https://jsonplaceholder.typicode.com/posts')  
                    .then(res => {
                        console.log(res)                                   
                        this.setState({
                            posts: res.data.slice(0, 10)     
                        })
                    })
            }
            render () {               
                const {posts} = this.state;                      
                const postList = posts.length ? (
                    posts.map(post => {  
                        return (                     
                            <div className="post card" key={post.id}>         //04. The class "post card" where "post" will be used in CSS 
                                <img src={YoutubeLogo} alt="A YoutubeLogo" /> //02. Adding the image and the "img" class to be used in CSS
                                <div className="card-content">
                                    <Link to={'/' + post.id}>
                                        <span className="card-title red-text">{post.title}</span>       //09. Adds in text color in CSS
                                    </Link>    
                                    <p>{post.body}</p>                                  
                                </div>
                            </div>
                        )
                    }) 
                ) : (
                    <div className="center">No posts yet</div>            
                )            
                return (
                    //<div className="container">
                    <div className="container home">                     //03. Adding home CSS class to the container
                        <h4 className="center">Home</h4>
                        {postList}             
                    </div>
                )            
            }
        }
        export default Home


    Index.css (../src/index.css)
        body {
            margin: 0;
            padding: 0;
            font-family: sans-serif;
        }
        
        .home .post img {                                                 //05. The CSS class for line 2, 3, 4
            width:120px;                                                  //07. For Resizing the image proportionally
            height: auto;                                                 //08. For resizing the image proportionally
            position: absolute;
            top: 20px;
            left: -50px;
            opacity: 0.6;
        }

        .home .post{                                                      //06. Cuts away the logo that is outside the card (Only image on card will be seen)
            overflow: hidden;
            padding-left: 80px;
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
33. Introduction to Redux

    What is Redux
        A central data storage for all app data
        Any component can access data from it
        Managing state components will be easier

    Architecture of simple application
        |
        |                                  App.js
        |                      |------------------------------|
        |                   Blog                           Homepage
        |         |------------------|                |-----------------|
        |  Latest Blogs     Comments                Sidebar       Main Content
        | (Latest post)                          (Latest post) 
        |
        Explanation:
            In order to have the latest post to appear in both Sidebar and Latest Blog page,
            one would pass in props and store data in both the class components, Blog and Homepage components
            But this method is actually duplicating the data and is not the best practice as the solution.
            The best solution is to use Redux, which is an external storage component, external to the app.
            The storage component will then be shared between Class components and the UI components 
            This will avoid unnecessary duplication of data.

    Redux process
    |                   
    |                                                 Dispatch Action
    |                                         /                               \
    |                                        /                                 \
    |                                       /                                   \
    |                                      /                                     \
    |                                     /                                       \
    |                                    /                                         \
    |                                   /                                           \
    |                                  /                                             \
    |     Component                   /                                               \            Action passed     
    |    dispatches an               /                                                 \              to reducer
    |   action (Addpost)            /                                                   \                   
    |  Contains optional           /                                                     \                
    |      payload                /                                                       \              
    |                            /                                                         \            
    |                           /                                                           \           
    |                      Component ---->------------->----- REDUX ---->------------->----- Reducer
    |                                       component                        reducer
    |                                      subscribes                      updates the
    |                                      to changes                     central state




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
34. Redux Stores
    
    Role of the Reducers
        There are many different type of reducers
        The reducer gets the action from the "Dispatch Action" node
        Only the reducer is able to update or retrieve the component in Redux and send back to the Dispatch action node

    Use Codepen.io to test Redux functionality
    In JS settings, make sure to include the following URLs
        JS Preprocessor: Babel
        https://cdnjs.cloudflare.com/ajax/libs/redux/4.0.0-rc.1/redux.js
        https://codepan.io/username/pen/aBcDef
   
    Code
        const {createStore} = Redux;                //01. Get createStore from Redux library
        
        const initState = {                         //06. Create an initial state for the reducer to initialize with
            todos: [],
            posts: []
        }
        
        //function myreducer(){                     //04. Creating a reducer function
        //function myreducer(state){                //05. Create an initial state parameter for the store
        function myreducer(state = initState){      //07. Adding the initState to the state parameter
        
        }
        
        //const store = createStore();              //02. Create a store from the 'createStore' and note that 'createStore' is a function
        const store = createStore(myreducer);       //03. Adding a reducer to the 'store'. Note the reducers are functions that need to be created
    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
35. Redux Actions
    
    To edit the data in the store, a process needs to be achieved since they can't be edited directly
    The process requires an action to be dispatched into the reducer
    Here, the code dispatches an action    
    
    Code
        const {createStore} = Redux;   
        
        const initState = {       
            todos: [],
            posts: []
        }
        
        //function myreducer(state = initState){ 
        function myreducer(state = initState, action){           //01.  Creates an action, which is an object with a type property that describes the action
            //console.log(action);                               //08. Prints out the action received
            console.log(action, state);                          //09. Prints out the updated state array
        }
        
        const store = createStore(myreducer);     

        //const todoAction                                       //02. Create a new action variable to add in a new 'todos' into the initState
        //const todoAction  = { }                                //03. Set as an object
        //const todoAction  = {type: 'ADD_TODO'}                 //04. Set the object property
        const todoAction  = {type: 'ADD_TODO', todo: 'buy milk'};           //05. Include the element to be added into the initState

        //store.dispatch()                                       //06. This adds the dispatch for the action to be executed 
        store.dispatch(todoAction)                               //07. Runs the action by adding the action name. We have the only action hence, todoAction 

    Console Output
        Object {                                                 //This will be the initialization stage where the arrays are empty
            type: "@@redux/INITx.7.5.h.i.j"
        } Object {
            posts: [],
            todos: []
        }

        Object {                                                //The second pass where the action runs
            todo: "buy milk",
            type: "ADD_TODO"
        } Object {
            posts: [],
            todos: []
        }
    
    NOTE: Another action is required to update the array

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
36. Redux Reducers
    
    Make the reducer interact with the state and change the state

    Code
        const {createStore} = Redux;   
        
        const initState = {       
            todos: [],
            posts: []
        }
        
        function myreducer(state = initState, action){        
            //console.log(action, state);     
            if (action.type == 'ADD_TODO'){                       //01. Perform an If-Check
                return {                                          //02. If true, return a new state
                    //todos: state.todos.push()                   //03. This directly changes the initState and destroys the initialization stage when loading up
                    //todos: []                                   //04. Create a new todo array
                    //todos: [state.todos]                        //05. Add in the current todo state into the array (Meaning duplicating the array)
                    //todos: [...state.todos]                     //06. Spread the elements
                    todos: [...state.todos, action.todo]          //07. Add the action as element (ie, "buy milk")
                }
            }
        }
        
        const store = createStore(myreducer);     

        const todoAction  = {type: 'ADD_TODO', todo: 'buy milk'};    

        store.dispatch(todoAction)         

    NOTE: The code here wont do anything at the moment unless React subscribes to changes in order to update the store

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
37. Store Subscriptions

    Subscribe to the store and reacting to the changes in the store
    Normally this is done in a component
    Since there is no component in Codepen.io, this code will just do a simple subscription
    Then print out to console whenever there is a change
    See the 12 points
    
    //////////////////
    Code
        const {createStore} = Redux;   
        const initState = {       
            todos: [],
            posts: []
        }
        
        function myreducer(state = initState, action){        
            if (action.type == 'ADD_TODO'){      
                return {                     
                    ...state,                               //08. Add this line so it will process both todos and posts and the todos will be overwritten with the new element
                    todos: [...state.todos, action.todo]    //07. Since there is no action for the posts array, the program deletes of the array 
                }
            }
        }
        
        const store = createStore(myreducer);     
        
        //store.subscribe()                                  //01. This will be the function
        //store.subscribe(() => {})                          //02. The function will take in parameter
        store.subscribe(() => {                              //03. Function will run everytime there's change
            console.log('state update');                     //04. Prints out "state updated" in console
            console.log(store.getState());                   //05. Can't use initState since it's empty. Need to call "createStore(myReducer)" which was saved as "store"
        })   
        
        const todoAction  = {type: 'ADD_TODO', todo: 'buy milk'};    
        store.dispatch(todoAction)        

        Console1:
            "state updated"
            Object {
                todos: ["buy milk"]                           //06. The problem here is that the "posts:[]" wasn't printed out in the console
            }

        Console2:
            "state updated"
            Object {
                posts: [],                                    //09. Notice the posts array is added
                todos: ["buy milk"]             
            }
    
    ////////////////////////////
    Code (With multiple actions)
        const {createStore} = Redux;   
        const initState = {       
            todos: [],
            posts: []
        }
        
        function myreducer(state = initState, action){        
            if (action.type == 'ADD_TODO'){      
                return {                     
                    ...state,          
                    todos: [...state.todos, action.todo]   
                }
            }
            if (action.type == 'ADD_POST'){                     //12. This will be the action for post
                return {                     
                    ...state,          
                    posts: [...state.posts, action.post]   
                }
            }
        }
        
        const store = createStore(myreducer);     
        store.subscribe(() => {                    
            console.log('state update');     
            console.log(store.getState());       
        })   
        
        //const todoAction  = {type: 'ADD_TODO', todo: 'buy milk'};    
        //store.dispatch(todoAction)        
        store.dispatch({type: 'ADD_TODO', todo: 'buy milk1'});             //10. A direct dispatch instead of using 'todoAction'
        store.dispatch({type: 'ADD_TODO', todo: 'buy milk2'});
        store.dispatch({type: 'ADD_POST', post: 'buy milk3'});             //11. This will add an element to post array


        Console:
            "state updated"
            Object {
                posts: [],                   
                todos: ["buy milk1"]             
            }

            "state updated"
            Object {
                posts: [],                   
                todos: ["buy milk1", "buy milk2"]             
            }

            "state updated"
            Object {
                posts: ["buy milk3"],                   
                todos: ["buy milk1", "buy milk2"]             
            }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
38. Setting up Redux in React
    
    Install Redux store and React Redux
        npm install redux react-redux
    Create Redux store in Index.js
    Create a new folder "reducers" under ../src/ and add in a file  "rootReducer.js"
    Create registerServiceWorker.js in src folder if it didn't exist when installing a project app (../src/registerServiceWorker.js)
    Read 9 points
    
    registerServiceWorker.js
        //Taken from: https://gist.github.com/camwhite/2f33f7c33e2495b01614f209399703ee
        // In production, we register a service worker to serve assets from local cache.

        // This lets the app load faster on subsequent visits in production, and gives
        // it offline capabilities. However, it also means that developers (and users)
        // will only see deployed updates on the "N+1" visit to a page, since previously
        // cached resources are updated in the background.

        // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.
        // This link also includes instructions on opting out of this behavior.

        const isLocalhost = Boolean(
          window.location.hostname === 'localhost' ||
            // [::1] is the IPv6 localhost address.
            window.location.hostname === '[::1]' ||
            // 127.0.0.1/8 is considered localhost for IPv4.
            window.location.hostname.match(
              /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
            )
        )

        export default function register () {
          if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
            // The URL constructor is available in all browsers that support SW.
            const publicUrl = new URL(process.env.PUBLIC_URL, window.location)
            if (publicUrl.origin !== window.location.origin) {
              // Our service worker won't work if PUBLIC_URL is on a different origin
              // from what our page is served on. This might happen if a CDN is used to
              // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374
              return
            }

            window.addEventListener('load', () => {
              const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`

              if (!isLocalhost) {
                // Is not local host. Just register service worker
                registerValidSW(swUrl)
              } else {
                // This is running on localhost. Lets check if a service worker still exists or not.
                checkValidServiceWorker(swUrl)
              }
            })
          }
        }

        function registerValidSW (swUrl) {
          navigator.serviceWorker
            .register(swUrl)
            .then(registration => {
              registration.onupdatefound = () => {
                const installingWorker = registration.installing
                installingWorker.onstatechange = () => {
                  if (installingWorker.state === 'installed') {
                    if (navigator.serviceWorker.controller) {
                      // At this point, the old content will have been purged and
                      // the fresh content will have been added to the cache.
                      // It's the perfect time to display a "New content is
                      // available; please refresh." message in your web app.
                      console.log('New content is available; please refresh.')
                    } else {
                      // At this point, everything has been precached.
                      // It's the perfect time to display a
                      // "Content is cached for offline use." message.
                      console.log('Content is cached for offline use.')
                    }
                  }
                }
              }
            })
            .catch(error => {
              console.error('Error during service worker registration:', error)
            })
        }

        function checkValidServiceWorker (swUrl) {
          // Check if the service worker can be found. If it can't reload the page.
          fetch(swUrl)
            .then(response => {
              // Ensure service worker exists, and that we really are getting a JS file.
              if (
                response.status === 404 ||
                response.headers.get('content-type').indexOf('javascript') === -1
              ) {
                // No service worker found. Probably a different app. Reload the page.
                navigator.serviceWorker.ready.then(registration => {
                  registration.unregister().then(() => {
                    window.location.reload()
                  })
                })
              } else {
                // Service worker found. Proceed as normal.
                registerValidSW(swUrl)
              }
            })
            .catch(() => {
              console.log(
                'No internet connection found. App is running in offline mode.'
              )
            })
        }

        export function unregister () {
          if ('serviceWorker' in navigator) {
            navigator.serviceWorker.ready.then(registration => {
              registration.unregister()
            })
          }
        }


    Index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        import {createStore} from 'redux';                                                                  //01. Import the Redux store creator function
        import {Provider} from 'react-redux';                                                               //03. Import component that enables React to interact with Redux. 
        import rootReducer from './reducers/rootReducer'                                                    //08. import rootReducer file into Index.js
        
        //const store = createStore();                                                                      //02. Create the store variable                    
        const store = createStore(rootReducer);                                                             //09. Setting the rootReducer to interact with the store
        
        //ReactDOM.render(<App />, document.getElementById('root')); 
        //ReactDOM.render(<Provider><App /></Provider>, document.getElementById('root'));                   //04. The provider will wrap the <App/> component
        ReactDOM.render(<Provider store={store}></Provider><App />, document.getElementById('root'));       //05. Pass the store into the Provider together with <App/>
        registerServiceWorker();

    rootReducer.js
        const initState = {                                                         //07. State initialization
            posts: []
        }
        const rootReducer = (state = initState, action) => {
            return state;                                                           //06. This will just return a state and do nothing
        }

        export default rootReducer

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
39. Mapping State to Props

    Connect components to the store and get data from the state
    Read all 17 points

    Index.js
        import React from 'react';
        import ReactDOM from 'react-dom';
        import './index.css';
        import App from './App';
        import registerServiceWorker from './registerServiceWorker';
        import {createStore} from 'redux';                                    
        import {Provider} from 'react-redux';                                   
        import rootReducer from './reducers/rootReducer'        
  
        const store = createStore(rootReducer);       
        ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));   
        registerServiceWorker();

    rootReducer.js
        const initState = {        
            //posts: []                                                                       //01. Add in dummy datas containing 'id' and 'body'
            posts: [                                                                          //02. To show the data, use React-Redux instead of Axios, refer to topic 28 for Axios, home.js
                {id: '1', title: 'Squirtle', body: 'turtle turtle turtle turtle'},
                {id: '2', title: 'Charmander', body: 'dinosaur dinosaur dinosaur dinosaur'},
                {id: '3', title: 'Pikachu', body: 'squirrel squirrel squirrel squirrel'}
            ]
        }
        const rootReducer = (state = initState, action) => {
            return state;                 
        }

        export default rootReducer

    Home.js   (CODE - Taken from Topic 32)
        import React, {Component} from 'react' 
        //import axios from 'axios'                                                           //03. Axios not required anymore for rootReducer but will be using React-Redux
        import {Link} from 'react-router-dom'     
        import YoutubeLogo from '../image000.png'       
        import {connect} from 'react-redux'                                                   //06. Importing React-Redux method
        
        class Home extends Component {    
            //state = {                                                                       //04. Now will be using state from rootReducer.js
            //    posts:[]                     
            //}        
            //componentDidMount(){                                                                 //05. Now will be using axios for rootReducer.js
                //axios.get('https://jsonplaceholder.typicode.com/posts') 
                //    .then(res => {
                //        console.log(res)                                   
                //        this.setState({
                //            posts: res.data.slice(0, 10)     
                //        })
                //    })  
            //}
            render () {               
                console.log(this.props)                                                        //15. To check the props if it is functioning
                //const {posts} = this.state;                                                  //16. The state in Home.js no longer exist
                const {posts} = this.props;                                                    //17. Grabs the props instead of the state
                const postList = posts.length ? (
                    posts.map(post => {  
                        return (                     
                            <div className="post card" key={post.id}>           
                                <img src={YoutubeLogo} alt="A YoutubeLogo" />      
                                <div className="card-content">
                                    <Link to={'/' + post.id}>
                                        <span className="card-title red-text">{post.title}</span>   
                                    </Link>    
                                    <p>{post.body}</p>                                  
                                </div>
                            </div>
                        )
                    }) 
                ) : (
                    <div className="center">No posts yet</div>            
                )            
                return (
                    <div className="container home">    
                        <h4 className="center">Home</h4>
                        {postList}             
                    </div>
                )            
            }
        }
        
        //const mapStateToProps = () => {}                                            //10a. Based on the redux process (Topic 33), in order for a component to retrieve data,     
        //                                                                            //10b. the component will be mapped as a prop
        //const mapStateToProps = (state) => {}                                       //11. This will give access to the states of the store
        const mapStateToProps = (state) => { 
            return{                                                                   //12. Retrieve elements in the store's state and attach them to props
                posts: state.posts                                                    //13. Retrieving the data from rootReducer.js's state "state.posts" and then applying it to the "posts:" in home.js
            }
        }
        //export default Home                                                         //07. Using higher order component
        //export default connect(Home)                                                //08. Higher order component is the imported "connect" and then wrap it around the component which is "Home"          
        //export default connect()(Home)                                              //09. Note that connect is also a function
        export default connect(mapStateToProps)(Home)                                 //14. Pass in the retrieval function into connect function (The higher order component)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
40. Blog Detail Page

    If one of the cards is clicked, a dummy content will appear
    Instead of getting a dummy content (json fake RestAPIs), the code below will receive the content from the state via redux store
    In ../src/component/Post.js, the dummy content appears using "Axios" to get the post and the IDs and the IDs are still associated with the URLs
    By connecting the components to the Redux Store, the components will get the individual post/data/record/content and show that in the page insteaad of the dummy
    Read 16 points

    Post.js (CODE from Topic 30)
        import React, {Component} from 'react';
        //import axios from 'axios'                                                                           //01. No longer needed since will be using Redux Store
        import {connect} from 'react-redux'                                                             //03. Adding the connect function      
        
        class Post extends Component {
            //state = {                                                                                                  //02. No longer needed since will be using Redux Store
            //    post: null            
            //}
            //componentDidMount(){
            //    let id = this.props.match.params.post_id;   
            //    axios.get('https://jsonplaceholder.typicode.com/posts/' + id) 
            //        .then(res => {
            //            this.setState({  
            //                post: res.data 
            //            })                        
            //        })
            //}
            render() {
                //const post = this.state.post ? (                                //14. No longer using state since it is attached as props now
                const post = this.props.post ? (
                    <div className="post">
                        //<h4 className="center">{this.state.post.title}</h4>     //15. No longer using state since it is attached as props now
                        <h4 className="center">{this.props.post.title}</h4> 
                        //<p>{this.state.post.body}</p>                           //16. No longer using state since it is attached as props now
                        <p>{this.props.post.body}</p>  
                    </div>  
                ) : (
                    <div className="center">Loading post...</div> 
                )   
                return (
                    <div className="container">
                        <h4>{post}</h4>      
                    </div>
                )
            }
        }
        
        //const mapStateToProps = (state) => {                      //05. Create the function that maps the state into props
        const mapStateToProps = (state, ownProps) => {              //06. Grabs the single individual record via ownProps where ownProps refers to the Post component before attaching additional props from Redux Store
            //let id = ownProps.match.params;                       //07. Gets the information about the route parameters
            let id = ownProps.match.params.post_id;                 //08. The route parameter is called post_id as mentioned in App.js ("/:post_id") and store it as "id" variable
            return {                                                //09. After getting the post_id, return the individual post
                //post: state                                       //10. The post refers to the state received from redux store
                //post: state.posts.find()                          //11. Uses "find()" to find an individual post from posts
                
                post: state.posts.find(post => post.id === id)      //12. Check if post.id is equal to the id, then return the post. This line is similar to the one below
                
                //post: state.posts.find((post) => {
                //    return post.id === id
                //}) 
            }
        }
        
        //export default Post;
        //export default connect()(Post)                             //04. Using the higher order component to wrap the post component
        export default connect(mapStateToProps)(Post)                //13. Passing state to Props into the higher order function


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
41. Map Dispatch To Props



































