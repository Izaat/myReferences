https://github.com/iamshaunjp/react-redux-complete-playlist/branches/stale
React Fundamentals
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Introduction
02. React Setup (with CDN)
03. Creating React Components
04. State
05. React Development Tools
06. DOM Events
07. Changing State and 'this'
08. Introduction to Forms
09. Create React App
10. Single Page Apps
11. Nesting Components
12. Props
13. Outputting Lists
14. Stateless Components
15. Conditional Output
16. Forms Revisited
17. Functions as Props
18. Deleting Data
19. Recap & Virtual DOM
20. CSS Files
21. Lifecycle Methods


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Introduction
    
    Redux
        > A layer on top of react
        > Helps with state management of the app
            - data management
            - UI state of the app
            
    Fundamentals
        React Basics - components, events, templates, props and forms
        React Router - routes, route parameters, redirects
        Redux - stores, actions and reducers
        
    How it works
        React's components is the same as Flutter's widgets
        DOM (Doc Object Model) is an interface ie Web Browser
        Virtual DOM (VDOM) is 
            Native to React where it will render the document before sending to the actual DOM
            When program update takes place, VDOM will render and compare between the old and new render
            It will then update the affected area, instead of reloading entire page
            VDOM method saves page loading time

        Components
            Contains JSX (Javascript XML) Looks similar to HTML + JS
            Contains state (data or UI state)
            Contains JS for functionality

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. React Setup (with CDN)
    Go to link: https://reactjs.org/docs/cdn-links.html
    Get the script: 
        <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    In VSCode:
        Create a new file and save as empty html file
        Type in : "doc" and then press tab
            html structure will appear
        Insert the scripts below the meta tags
        Inside body tag, type in "div.#app"
            <div class="" id="app"></div>  //This line will appear and remove -> class=""

    Packages to be installed into VSCode:
        ES7 React/Redux/GraphQL/React-Native snippets      //Contains libraries
        Live Server                                                                     //Similar to Xampp to run React
        Sublime Babel                                                               //Syntax highlighting
        Monokai++                                                                    //Sublime theme for VSCode

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Creating React Components
    
    JSX:
        Unlike html/php, JSX can only handle single root tags. Example: <div><ul><li><a></a></li></ul></div> where div is the root tag
        "Class" keyword can't be used. Example: <div class="">. Instead, use "className". Example: <div className="">
        <App /> where App is the class name and / is the closing tag similar to "</App>"
        JSX is not supported by web browsers.
            Solution is to add in babel loading script into the program, Link: https://babeljs.io/setup#installation
            <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    CODE: - Static
        <body>
            //<div class="" id="app"></div>                         //Class need to be removed
            <div id="app"></div>
            //<script>                                                             //Create script tags inside of body tag
            <script type="text/babel">                                  //type="text/babel" must be added once the babel loading script is inserted
                class App extends React.Component {           //class name to be used in the ReactDOM function
                    render() {                                                     //This function is responsible for rendering the template
                        return (                                                    //To return JSX template. JSX enables html code to be written in JS
                            <div className="app-content">
                                <h1> Hello </h1>                            //JSX testing
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));           //*.render(<class>, where to render)
            </script>
        </body>

    Running the program:
        Right click and select "Open with Live Server"
        Note that the html file MUST be inside the workspace folder

    CODE: - Dynamic with Javascript
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                <p>{ Math.random()*10 }</p>              //JS codes can be inserted into the curly braces
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. State
    
    What is Component State
        > A JavaScript Object
        > Describes the current state of the components
            - data, UI-state
        > The state of a component can be updated over time
            - a model could close
            - the data we output could change

    Example 01: 
        Shopping cart component in JS
            {
                items: [
                    {name: 'navy jumper', price: 9.99},
                    {name: 'ninja mask', price: 19.99}
                ]
            }

        Updated shopping cart component in JS
            {
                items: [
                    {name: 'navy jumper', price: 9.99},
                    {name: 'ninja mask', price: 19.99},
                    {name: 'black cloak', price: 29.99}    //This will be added to reflect the update
                ]
            }    

    Example 02: 
        Popup enabled:
            {
                showPopup: true
            }

        Popup disabled:
            {
                showPopup: false
            }


    CODE: -cont'd on html
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    state = {                                //This adds the JS object
                        name: 'Ryu',                     //But the 2 lines wont update what being output to the browser
                        age: 30
                    }
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                //<p>{ Math.random()*10 }</p> 
                                <p>My name is: { this.state.name } 
                                    and I am {this.state.age}</p>   //This means this current line. State means the state. Name means the element in the state.
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>        



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. React Development Tools

    React Developer Tools - Download from Chrome Web Store
        Assist to keep track of the states and components
        After installing, if the browser lands on any website that uses React, the icon will light up

    Usage
        In React website, open browser inspection tool
        Main Menu > React
            By selecting the parent tree, the state of that tree will show up on the right hand panel
            Values in the right hand panel can be change by just typing the new value (Website will updated in real time)
            Also note that the "<App>...</App>" corresponds to the "App Class" covered in earlier topic. See Topic 3 or 4
        There are 2 types of React icons: 
            Production: Blue
            Developer: Red


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. DOM Events
    
    Events:
        onClick is an event
        Follow link to see entire list: https://reactjs.org/docs/events.html#supported-events
    
    Create a Clickable event
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }
                handleClick(e)  {                                     //Defining the JS function. "e" is the event on page by default
                    console.log(e.target)                          //"e" is event. "Target" is property of the event (what triigger element that causes the event -> onClick)
                }
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>    
                                Click Me    //Use the already defined JS function (handleClick). Note that if "this.handleClick()" is used, the function will be automatically triggered when the page loads
                            </button> 
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>

    Create a Mouse over event
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }
                handleClick(e)  {        
                    console.log(e.target)   
                }
                handleMouseOver(e)  {        
                    console.log(e)   
                }                
                //handleMouseOver(e)  {        
                //    console.log(e.target, e.pageX)            //pageX can be found in inspection, list in components > console   
                //}                 
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>Click Me </button> 
                            <button onMouseOver={this.handleMouseOver}>Hover Me </button> 
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


    Create an onCopy event - When user tries to highlight a text and copy, another text will appear in console
        <script type="text/babel">           
            class App extends React.Component {       
                state = { ... }
                handleClick(e)  { ... }
                handleMouseOver(e)  { ... }                           
                handleCopy(e) {                                                                     //The event
                    console.log('Try being original for once');
                }
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> Hello </h1>      
                            <p>My name is: { this.state.name } 
                                and I am {this.state.age}</p> 
                            <button onClick={this.handleClick}>Click Me </button> 
                            <button onMouseOver={this.handleMouseOver}>Hover Me </button> 
                            <p onCopy={this.handleCopy}>What we think, we become</p>                     //The target
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Changing State and 'this'

    Undefined "this" function
        <body>
            <div id="app"></div>
            <script type="text/babel">           
                class App extends React.Component {       
                    state = {                 
                        name: 'Ryu',       
                        age: 30
                    }                  
                    handleClick(e) {                
                        //console.log(e.target);                      //Original code
                        console.log(this.state);                      //Should have the same result but it's not defined
                    }
                    render() {                                  
                        return (                                 
                            <div className="app-content">
                                <h1> Hello </h1>      
                                <p>My name is: { this.state.name } and I am {this.state.age}</p> 
                                <button onClick={this.handleClick}>Click Me </button> 
                            </div>
                        )
                    }
                }    
                ReactDOM.render(<App />, document.getElementById('app'));    
            </script>
        </body>    

    The "this" keyword
        The keyword is determined by how and when the function is called and not by where the location of the function
        Therefore, the keyword in onClick has lost its function in "this.state". Similar to public/private class
        For new version of react, keyword must be binded to the function

    Solution: -Use arrow function        
        handleClick = (e) => {                       //This will make the keyword "public"
            console.log(this.state);
        }

    Changing the property value: Name to another name
        handleClick = (e) => {            
            //this.state.name = 'yoshi'                //This is a bad practice
            //this.setState({ });                      //use the setState function and '{}' object represents the state
            this.setState({ 
                name: 'Yoshi',
                age: 25
            });  
            console.log(this.state);
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Introduction to Forms

    Code:
        <div id="app"></div>
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }                  
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> My name is {this.state.name}</h1>      
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>

    Code: - With input box
        <div id="app"></div>
        <script type="text/babel">           
            class App extends React.Component {       
                state = {                 
                    name: 'Ryu',       
                    age: 30
                }                  
                
                handleChange = (e) => {
                    this.setState({
                        name: e.target.value                                         //Retrieves value from the textbox
                    });
                }
                handleSubmit = (e) => {
                    e.preventDefault();                                              //This disables the page from refreshing to default when pressing on submit button
                    console.log('form submitted', this.state.name);                  //Diplay in console
                }
                
                render() {                                  
                    return (                                 
                        <div className="app-content">
                            <h1> My name is {this.state.name} </h1>      
                            //<form>                                                 //Without onSubmit, the button will refresh to default (Ryu)
                            <form onSubmit={this.handleSubmit}>                      //With onSubmit, event will be called either by pressing enter or clicking. Changes will take place ONLY upon Submit
                                //<input type="text" />                              //Adds in basic text input box
                                <input type="text" onChange={this.handleChange}/>    //Adding an event to retrieve the text being typed in
                                <button>Submit</button>                              //If using "button onClick", if users press enter, it will refresh  to default (Ryu)
                            </form>
                        </div>
                    )
                }
            }    
            ReactDOM.render(<App />, document.getElementById('app'));    
        </script>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Create React App

    A command line tool to create react apps
        Development server
        Use ES6 features which are not normally supported
        Keep our code modular
        Use build tools to create optimized code

    Installation
        npx create-react-app my-app
        cd my-app
        npm start
        Open http://localhost:3000/ to see app
        To deploy to production, create minifield bundle with "npm run build"

    Command after installations
        npm start
            Starts the development servier
        
        npm run build
            Bundles the app into static files for production
        
        npm test
            Starts the test runner
            
        npm run eject
            Removes this tool and copies build dependencies, configuration files
            and scripts into the app directory. If you do this you can't go back.
            
        Recommended: Begin by typing
            cd myapp
            npm start


    Folders
        > node_modules : Libraries, dependencies
        > public : For the browser
        > src : Contains files to be programmed
        > package.json : installed packages
        > package-lock.json : Installed packages that are locked

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Single Page Apps
    
    React apps are typically Single Page Applications
    Only on HTML page served to the browser
    React then controls what a suser sees on that page
    
    Traditionally, server will handle the index.html and every other pages of the website upon request.
    In React, server handles the index.html BUT React (external to the server) will handle every other pages of the website as components.
    
    Main Components:
        ../src/App.js  -> This contains the "App class/render() function", see code above for reference
        ../src/index.js -> This contains the "ReactDOM.render(<App />, document.getElementById('root'))", see code above for reference
            Technically, the code above will be split into separate components within the app
        ../src/registerServiceWorker.js -> Website cache
        ../src/index.css -> CSS stylings

    Starting the App:
        From Terminal, enter "myapp" folder
        Then, npm start
        This will start the website in the browser

    Delete ../src/App.test.js
    Delete ../src/App.css
    Remove "import ./App.css" from ../src/App.js
    Remove contents within "div className=App" for App.js. 
        Add <h1>My App</h1>
        Add<p>Hello</p>

    Save file and this will automatically updates the page in the browser


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Nesting Components
    
    |                       App.js(Root Component)
    |          |-----------------------------------------------|
    |    Navbar.js                                        ContactForm.js
    |
    |Multiple components can be nested under the root component
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';                     //This will import the Ninjas.js file
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p>
                      <Ninjas />                           //This will call out the Ninja class from Ninjas.js
                    </div>
                );            
            }
        }
        export default App;

    Create a new file ../src/Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                return (
                    <div className="ninja">
                        <div>Name: Ryu</div>
                        <div>Age: 30</div>
                        <div>Black: Black</div>
                    </div>
                );            
            }
        }
        export default Ninjas;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Props (Properties)

    Props is a method to pass a parent (App.js) component to child component (Ninjas.js)
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        
        class App extends Component {
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p>
                      <Ninjas name="Ryu" age="30" belt="black" />    
                      <Ninjas name="Ken" age="25" belt="black" />       //Extra line when the const {} line exists in child component
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                //console.log(this.props);                       //This will print out the components from the parent into the console
                const {name, age, belt} = this.props             //This is another method to call other than using "console.log"
                return (
                    <div className="ninja">
                        //<div>Name: {this.prop.name} </div>
                        //<div>Age: {this.prop.age} </div>
                        //<div>Belt: {this.prop.belt} </div>
                        <div>Name: {name} </div>                 //This line can only be used when the const {} line exists
                        <div>Age: {age} </div>                   //This line can only be used when the const {} line exists
                        <div>Belt: {belt} </div>                 //This line can only be used when the const {} line exists
                    </div>
                );            
            }
        }
        export default Ninjas;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Outputting Lists
    
    Output an entire list of Ninjas
    
    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';                          //ClassName - FileName
        
        class App extends Component {
            state = {                                           //The new created array
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />     //Calls the ninja array
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        import React, {Component} from 'react';

        class Ninjas extends Component {
            render () {
                const { ninjas } = this.props;                   //Similar to "const ninjas = this.props.ninjas"
                
                //const ninjaList = ninjas.map(ninja)            //arrayName.map(individualNinja)
                //const ninjaList = ninjas.map(ninja => {})      //Cycling through the individual ninja
                const ninjaList = ninjas.map(ninja => {
                    return (
                        //<div className="ninja">                //This doesn't contain any key therefore will prompt a key error into the console
                        <div className="ninja" key={ninja.id}>   //This will activate the key by calling the id number in App.js (id=1, id=2, etc)
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                })
                
                return (
                    //<div className="ninja">      //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Name: {name} </div> //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Age: {age} </div>   //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //    <div>Belt: {belt} </div> //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    //</div>                       //Not in use since this will be called by ninjaList instead as a template for the ninjas
                    
                    <div className="ninja-list">
                        { ninjaList }
                    </div>  
                    
                );            
            }
        }
        export default Ninjas;                      //Filename

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Stateless Components

    Container VS UI Components
    
        Container Components
            Contain state
            Contain lifecycle hooks
            Not concerned with UI
            Use classes to create
            
        UI Components
            Dont contain state
            Receive data from props or container components
            Only concerned with UI (How data is presented on the screen)
            Use functions to create

        |                               App.js
        |                         Container Component
        |           |----------------------|------------------------|
        |     Navbar.js              Ninjas.js                ContactForm.js
        |    UI component            UI Compnent            Container Component
        |
        Container components can parent a UI component and/or another container component


    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        
        class App extends Component {     //Container Component
            state = {                                      //This is the state and it requires to be inside a class
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js
        //import React, {Component} from 'react';  //The {Component} can be removed
        import React from 'react';

        //class Ninjas extends Component {         //Since this does not contain any state, the class can be removed and use a function instead
        //const Ninjas = () => {                   //This will be the function holding the UI compnent
        //const Ninjas = (props) => {              //And this function will take in the props
        //const Ninjas = (ninjas) => {             //Using ninjas as direct prop. You may remove "const {ninjas} = props" below.
        const Ninjas = ({ninjas}) => {             //Also note that multiple props can be called by the function -> "const Ninjas = ({ninjas, age, shop, name}) => {}"
            //render () {                          //This can be removed since render method is only for a class
                //const { ninjas } = this.props;   //Since functions dont take "this.*" method, it will be removed
                //const { ninjas } = props;        //This entire line can be removed IF "const Ninjas = (ninjas) => {}" is being used above
                
                const ninjaList = ninjas.map(ninja => {
                    return (
                        <div className="ninja" key={ninja.id}> 
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                })
                
                return (
                    
                    <div className="ninja-list">
                        { ninjaList }
                    </div>  
                    
                );            
            //}
        }
        export default Ninjas;   


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Conditional Output
    
    Showing something to the user based on certain condition
    Example: 
        Show discount only when the user adds 5 or more items to a shopping basket
        Show ninjas with age above 20
    If statement:
        If (ninjas.age > 20) { return(...) } else { return null }
    Ternary operator can be used (Indirect Output)
        condition ? ( return(...) ) : null;   //Where "null" is the else statement
    Ternary operator can be used (Direct Output)
        

    Ninjas.js (IF Statement)
        import React from 'react';

        const Ninjas = ({ninjas}) => {                      
            const ninjaList = ninjas.map(ninja => {
                if (ninja.age > 20) {                                   //Only shows ninjas that are above 20
                    return (
                        <div className="ninja" key={ninja.id}> 
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                        </div>                    
                    )
                } else {
                    return null
                }
            })
            
            return (                    
                <div className="ninja-list">
                    { ninjaList }
                </div>                      
            );            
        }
        export default Ninjas;   

    Ninjas.js (Ternary Operator 01)
        import React from 'react';

        const Ninjas = ({ninjas}) => {                      
            const ninjaList = ninjas.map(ninja => {            
                //condition ? () : ();                                 // (if true) : (if false)
                //return condition ? () : ();                          //map function always expects a return value
                //return ninja.age > 20 ? (JSXCode) : null;            //JSX code to be added into the bracket                
                return ninja.age > 20 ? (
                    <div className="ninja" key={ninja.id}> 
                        <div>Name: {ninja.name} </div>
                        <div>Age: {ninja.age} </div>   
                        <div>Belt: {ninja.belt} </div>    
                    </div>                      
                ) : null;
            });                                                        //Semicolon needed
            
            return (                
                <div className="ninja-list">
                    { ninjaList }
                </div>                  
            );            
        }
        export default Ninjas; 

    Ninjas.js (Ternary Operator 02)
        import React from 'react';

        const Ninjas = ({ninjas}) => {       
            
            return (                
                <div className="ninja-list">
                    {
                        //const ninjaList = ninjas.map(ninja => {       //"const ninjaList = " not in use since this is direct
                        ninjas.map(ninja => {         
                            return ninja.age > 20 ? (
                                <div className="ninja" key={ninja.id}> 
                                    <div>Name: {ninja.name} </div>
                                    <div>Age: {ninja.age} </div>   
                                    <div>Belt: {ninja.belt} </div>    
                                </div>                      
                            ) : null;
                        })                                              //Semicolon not needed
                    }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16. Forms Revisited
    A Form to add in new ninja into the list
    Create a new form in ../src/AddNinja.js
    This new file will be a class base component since it has to locally store whatever the user types in 
    Data entered will be stored in AddNinja.js as a state component and be displayed in the console
    
    AddNinja.js
        import React, {Component} from 'react';
        
        class AddNinja extends Component {  
        
            state = {
                name: null,                     //Here, whenever there's value in textbox, it will update the 'null' but did not store the value
                age: null,                      //Therefore another function is required to for storing. So add handleChange event
                belt: null
            }
            
            handleChange = (e) => {
                
                //name[2]                      //This is the example square bracket to get name from index 2
                //ninja['name']                //This is the example square bracket to get objects
                //['name']                     //In setState(), only the square bracket is written
                //[e.target.id]                //This is the example square bracket to get string from an event under setState()
                
                this.setState({
                    //[e.target.id]                 //Getting the id name from JSX and refer to its state
                    [e.target.id] : e.target.value  //To replace the current value with the new value
                })
            }
            
            handleSubmit = (e) => {
                e.preventDefault();         //Preventing the default action that refreshes the entire page
                console.log(this.state);    //Prints state into console
            }
            
            render(){
                return(
                    <div>
                        //<form>
                        <form onSubmit={this.handleSubmit}>                   //calling a function when submit
                            <label htmlFor="name">Name:</label>               //Jsx version for "for" attribute in HTML
                            <input type="text" id="name" onChange={this.handleChange} />
                            <label htmlFor="name">Age:</label>    
                            <input type="text" id="age" onChange={this.handleChange} />
                            <label htmlFor="name">Belt:</label>  
                            <input type="text" id="belt" onChange={this.handleChange} />
                            <button>Submit</button>
                        </form>
                    </div>
                )
            }        
        }
        
        export default AddNinja;

    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        import AddNinja from './AddNinja';      
        
        class App extends Component {    
            state = {                         
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                      <AddNinja />                                            //Retrieve data from AddNinja
                    </div>
                );            
            }
        }
        export default App;

    Ninjas.js (Ternary Operator 02)
        import React from 'react';

        const Ninjas = ({ninjas}) => {       
            
            return (                
                <div className="ninja-list">
                    {
                        ninjas.map(ninja => {         
                            return ninja.age > 20 ? (
                                <div className="ninja" key={ninja.id}> 
                                    <div>Name: {ninja.name} </div>
                                    <div>Age: {ninja.age} </div>   
                                    <div>Belt: {ninja.belt} </div>    
                                </div>                      
                            ) : null;
                        })
                    }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
17. Functions as Props
    
    A Form to add in new ninja into the list (Continued)
    Instead of the new ninja being displayed in the console, the data will instead be stored and displayed in the browser
    Data will be taken from the state component of AddNinja.js and pushed into the state component of App.js
    Read 1 thru 15 steps


    App.js
        import React, {Component} from 'react';
        import Ninjas from './Ninjas';         
        import AddNinja from './AddNinja';      
        
        class App extends Component {    
            state = {                         
                ninjas : [
                    {name: 'Ryu', age: 30, belt: 'black', id: 1},
                    {name: 'Ken', age: 20, belt: 'green', id: 2},
                    {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                ]
            }
            
            //addNinja = ()                 //1. Create a new variable and call it "addNinja" which will take in a parameter
            //addNinja = (ninja)            //2. Create another variable that retrieves the state component data in addNinja.js
            //addNinja = (ninja) => {}      //3. Arrow function to set the state
            addNinja = (ninja) => {
                //console.log(ninja);                       //9. For testing: This will retrieve the state component objects from AddNinja.js and display into the console
                ninja.id = Math.random();                   //10. This will add an id tag to the user input ninja and assign a random number to its id
                
                //this.ninjas.push(ninja)                   //11. This pushes the new data into the ninjas array hence disrupting the array. Therefore can't be used. A bad practice
                //let ninjas = []                           //12. This creates a new empty array so the original ninjas array can be duplicated
                //let ninjas = [...this.state.ninja]        //13. This will retrieve the data from ninjas array, spread them out and paste into the empty array
                let ninjas = [...this.state.ninjas, ninja]  //14. This adds the new ninja element into the array
                
                this.setState({
                    ninjas : ninjas                         //15. Set the new updated/duplicated ninjas arrays as the current array state
                })
            }
            
            render () {
                return (
                    <div className="App">
                      <h1>My App</h1>
                      <p>Hello</p> 
                      <Ninjas ninjas={this.state.ninjas} />  
                      //<AddNinja />      
                      //<AddNinja addNinja={} />             //4. Create another function and this will enable the function to be accessed by AddNinja.js
                      <AddNinja addNinja={this.addNinja} />  //5. Run the code from the "addNinja" function above   
                    </div>
                );            
            }
        }
        export default App;

    
    AddNinja.js
        import React, {Component} from 'react';
        
        class AddNinja extends Component {          
            state = {
                name: null,    
                age: null,   
                belt: null
            }
            
            handleChange = (e) => {   
                this.setState({
                    [e.target.id] : e.target.value 
                })
            }
            
            handleSubmit = (e) => {
                e.preventDefault();    
                //console.log(this.state);              //6. Instead of diplaying in console directly, a function will be called from App.js
                //this.props.addNinja();                //7. This will call the "<AddNinja addNinja={this.addNinja} />" function in App.js
                this.props.addNinja(this.state);        //8. This will call the "ninja" in "addNinja = (ninja) => {}" in App.js
            }
            
            render(){
                return(
                    <div>
                        <form onSubmit={this.handleSubmit}>        
                            <label htmlFor="name">Name:</label>     
                            <input type="text" id="name" onChange={this.handleChange} />
                            <label htmlFor="name">Age:</label>    
                            <input type="text" id="age" onChange={this.handleChange} />
                            <label htmlFor="name">Belt:</label>  
                            <input type="text" id="belt" onChange={this.handleChange} />
                            <button>Submit</button>
                        </form>
                    </div>
                )
            }        
        }
        
        export default AddNinja;

    Ninjas.js (No changes)
        import React from 'react';

        const Ninjas = ({ninjas}) => { ... }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18. Deleting Data (PROBLEM)
    Adding a delete button for each ninja and remove the array from the stored state array
    
    App.js
            import React, {Component} from 'react';
            import Ninjas from './Ninjas';         
            import AddNinja from './AddNinja';      
            
            class App extends Component {    
                state = {                         
                    ninjas : [
                        {name: 'Ryu', age: 30, belt: 'black', id: 1},
                        {name: 'Ken', age: 20, belt: 'green', id: 2},
                        {name: 'Aduken', age: 40, belt: '2nd Dan', id: 3},
                    ]
                }
                
                addNinja = (ninja) => {
                    ninja.id = Math.random();            
                    let ninjas = [...this.state.ninjas, ninja]                 
                    this.setState({
                        ninjas : ninjas    
                    })
                }
                
                deleteNinja = (id) => {                                  //01. Selecting the id in the array
                    //console.log(id)                                    //08. To printout the id number into the console for testing
                    //let ninjas = this.state.ninjas.filter()            //09. This will filter out the the array based on id number
                    let ninjas = this.state.ninjas.filter(ninja => {     //10. This will cycle through the duplicated array
                        //return true/false                              //11. For true, the ninja object will remain in the new array. For false, this will filter out from the array
                        //return false                                   //12. In order to filter out, it has to return false
                        return ninja.id !== id                           //13. If id = ninja object "ninja => {", then return false
                    });
                    this.setState({
                        ninjas : ninjas                                  //14. Set the updated array as current array 
                    })
                }
                
                render () {
                    return (
                        <div className="App">
                          <h1>My App</h1>
                          <p>Hello</p> 
                          //<Ninjas ninjas={this.state.ninjas} />  
                          <Ninjas deleteNinja={this.deleteNinja} ninjas={this.state.ninjas} />       //02. Giving access Ninjas.js to run deleteNinja function
                          <AddNinja addNinja={this.addNinja} /> 
                        </div>
                    );            
                }
            }
            export default App;

    Ninjas.js
        import React from 'react';

        //const Ninjas = ({ninjas}) => {                      
        const Ninjas = ({ninjas, deleteNinja}) => {                                                 //03. This to add the deleteNinja function in App.js
            const ninjaList = ninjas.map(ninja => {                      
                if (ninja.age > 20) {
                    return (
                        <div className="ninja" key={ninja.id}>                                      //06. Point 05. is referring to the "ninja.id" in this line
                            <div>Name: {ninja.name} </div>
                            <div>Age: {ninja.age} </div>   
                            <div>Belt: {ninja.belt} </div>    
                            //<button onClick={deleteNinja}>Delete ninja</button>                   //04. This to add the button to every ninja in the browser
                            //<button onClick={deleteNinja(ninja.id)}>Delete ninja</button>         //05. This to call up the id number of the displayed ninja via key. NOTE: Adding (ninja.id) enables automatic trigger
                            <button onClick={() => {deleteNinja(ninja.id)}}>Delete ninja</button>   //07. This will disable the auto mode. Known as anonymous function
                        </div>                   
                    )    
                } else {
                    return null
                }
            });     
            
            return (                
                <div className="ninja-list">
                    { ninjaList }
                </div>                  
            );            
        }
        export default Ninjas; 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
19. Recap & Virtual DOM
    
    Current Application structure
        |
        |                         App.js
        |                    Container Component
        |                            |
        |                 |----------|------------|
        |    deleteNinja  |                       |     
        |  ninjas (prop)  |                       | addNinja
        |                 |                       |
        |              Ninjas.js              AddNinjas.js
        |             UI Compnent         Container Component
        |    

    Virtual DOM
        |                     
        |     props  / ninjas
        |       |        |
        |  |------------------|
        |  |    Ninjas.js     |
        |  |------------------|                                              |----------------|
        |           |                     |-----------|  |-----------|       |                |
        |           |---------------------|  Virtual  |  |  Virtual  |       |    The DOM     |
        |               jsx template      |    DOM    |  |    DOM    |       |   (BROWSER)    |
        |                                 |   (new)   |  | (current) |       |                |
        |                                 |-----------|  |-----------|       |----------------|
        |                                       |              |                      |
        |                                       |--------------|                      |
        |                                              |------------------------------|
        |                                                    differences updated
        |
        | The browser will always show the current VDom
        | If there is differences between the new and current VDom, the new becomes the current VDom 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20. CSS Files
    
    There are few different ways to use CSS files in React 
    Methods:
        1. Create CSS file for individual component - This will only affect the component individually
        2. Using 'index.css' - This will affect ALL components and no need to import to every single component file
        3. Using CSS modules - Need to setup the configuration file, https://blog.pusher.com/css-modules-react/
    
    CSS file for individual component
        Ninjas.css
            body{                                   //This will actually affect Ninjas.js as well as App.js since they are shared BUT
                background: pink;                   //when another component is updated, it will only affect that particular component
            }       
        
        Ninjas.js
            import React from 'react';
            import './Ninjas.css'                   //Just import the file

            const Ninjas = ({ninjas, deleteNinja}) => {...}
            export default Ninjas;         


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
21. Lifecycle Methods
    
    React Lifecycle Methods Diagram
        https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

    |      |--------------------------------|     |----------------------------------------------------------|    |------------------------------------| 
    |      |          MOUNTING              |     |                         UPDATING                         |    |             UNMOUNTING             |  
    |      |                                |     |                                                          |    |                 |                  |  
    |      |   |------------------------|   |     |                                                          |    |                 |                  |  
    |      |   |     constructor        |   |     |                                                          |    |                 |                  |  
    |      |   |------------------------|   |     |    New props     setState()    forceUpdate()             |    |                 |                  |  
    |      |                 |              |     |        |             |              |                    |    |                 |                  |  
    |      |                 V              |     |        V             V              V                    |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |  
    |      |   |                              getDerivedStateFromProps                                |      |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |  
    |      |                 |              |     |        |                     |             |             |    |                 |                  |     "Render phase"
    |      |                 |              |     |        V                     V             |             |    |                 |                  |  Pure and has no side
    |      |                 |              |     |   |----------------------------------|     |             |    |                 |                  | effects. May be paused,
    |      |                 |              |     |   |         shouldComponentUpdate    |     |             |    |                 |                  | aborted or restarted by
    |      |                 |              |     |   |----------------------------------|     |             |    |                 |                  |         React
    |      |                 |              |     |                        |                   |             |    |                 |                  |  
    |      |                 V              |     |                        V                   V             |    |                 |                  |  
    |      |  |-----------------------------------------------------------------------------------------|    |    |                 |                  |  
    |      |  |                                            render                                       |    |    |                 |                  |  
    |      |  |-----------------------------------------------------------------------------------------|    |    |                 |                  |  
    |      |                 |              |     |                                |                         |    |                 |                  | ======================
    |      |                 |              |     |                                V                         |    |                 |                  | 
    |      |                 |              |     |   |------------------------------------------------|     |    |                 |                  |  "Pre-Commit phase"
    |      |                 |              |     |   |             getSnapshotBeforeUpdate            |     |    |                 |                  |   Can read the DOM
    |      |                 |              |     |   |------------------------------------------------|     |    |                 |                  |  
    |      |                 |              |     |                                |                         |    |                 |                  | ======================
    |      |                 V              |     |                                V                         |    |                 |                  |  
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |    "Commit phase"
    |      |   |                          React updates DOM and refs                                  |      |    |                 |                  |  Can work with DOM,
    |      |   |--------------------------------------------------------------------------------------|      |    |                 |                  |   run side effects,
    |      |                 |              |     |                                |                         |    |                 |                  |   schedule updates
    |      |                 V              |     |                                V                         |    |                 V                  |  
    |      | |----------------------------| |     |    |------------------------------------------------|    |    |  |-------------------------------| |  
    |      | |     componentDidMount      | |     |    |              componentDidUpdate                |    |    |  |        componentWillMount     | |
    |      | |----------------------------| |     |    |------------------------------------------------|    |    |  |-------------------------------| |  
    |      |                                |     |                                                          |    |                                    |  
    |      |--------------------------------|     |----------------------------------------------------------|    |------------------------------------|






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
22. 
































