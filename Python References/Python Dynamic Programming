///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENT
01. Fibonacci
02. gridTraveler
03. canSum
04. howSum
05. bestSum
06. canConstruct
07. countConstruct
08. allConstruct
09. Time it

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Fibonacci

    from time_it import timed

    ### Brute-Force
    @timed
    def fib_0(n):

        def helper(n):
            if n <= 2:
                return 1
            else:
                return helper(n - 1) + helper(n - 2)

        return helper(n)


    ### Memoized
    @timed
    def fib_1(n):
        memo = {0: 0, 1: 1}

        def helper(n):
            if n not in memo:
                memo[n] = helper(n - 1) + helper(n - 2)
            return memo[n]

        return helper(n)


    ### Tabulation
    @timed
    def fib_2(n):
        table = [0] * (n + 1)
        table[1] = 1
        for i in range(n - 1):
            table[i + 1] += table[i]
            table[i + 2] += table[i]
        table[-1] += table[-2]
        return table[-1]

    if __name__ == "__main__":
        # input
        n = 30
        # print result
        print("Brute Force:\tres = {}, time = {}".format(*fib_0(n)))
        print("Memorized:\tres = {}, time = {}".format(*fib_1(n)))
        print("Tabular:\tres = {}, time = {}".format(*fib_2(n)))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. gridTraveler

    ### Brute-Force
    def grid_traveller(m, n):
        if m == 1 and n == 1:
            return 1
        if m == 0 or n == 0:
            return 0
        return grid_traveller(m - 1, n) + grid_traveller(m, n - 1)


    ### Memoized
    def grid_traveller(m, n):
        memo = {"1,1": 1}

        def helper(m, n):
            if m == 0 or n == 0:
                return 0
            key = f"{m},{n}"
            if key in memo:
                return memo[key]
            key = f"{n},{m}"
            if key in memo:
                return memo[key]
            memo[key] = helper(m - 1, n) + helper(m, n - 1)
            return memo[key]

        return helper(m, n)


    ### Tabulation
    def grid_traveller(m, n):
        table = [[0] * (n + 1) for _ in range(m + 1)]
        table[1][1] = 1
        for i in range(1, m):
            for j in range(1, n):
                table[i][j + 1] += table[i][j]
                table[i + 1][j] += table[i][j]
        # right-most column
        for i in range(1, m):
            table[i + 1][-1] += table[i][-1]
        # bottom row
        for j in range(1, n):
            table[-1][j + 1] += table[-1][j]
        return table[m][n]    


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. canSum

    ### Brute-Force
    def can_sum(target_sum, numbers):
        if target_sum == 0:
            return True
        for num in numbers:
            remainder = target_sum - num
            if remainder >= 0:
                if can_sum(remainder, numbers):
                    return True
        return False


    ### Memoized
    def can_sum(target_sum, numbers):
        memo = {}

        def helper(target_sum, numbers):
            if target_sum == 0:
                return True
            if target_sum in memo:
                return memo[target_sum]
            for num in numbers:
                remainder = target_sum - num
                if remainder >= 0:
                    if helper(remainder, numbers):
                        memo[target_sum] = True
                        return True
            memo[target_sum] = False
            return memo[target_sum]

        return helper(target_sum, numbers)


    ### Tabulation
    def can_sum(targert_sum, numbers):
        table = [False] * (targert_sum + 1)
        table[0] = True
        for i in range(targert_sum):
            if table[i]:
                numbers = [num for num in numbers if i + num <= targert_sum]
                for num in numbers:
                    table[i + num] = True
        return table[-1]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. howSum
    
    ### Brute-Force
    def how_sum(target_sum, numbers):
        if target_sum == 0:
            return []
        for num in numbers:
            remainder = target_sum - num
            if remainder >= 0:
                combination = how_sum(remainder, numbers)
                if combination is not None:
                    combination = combination + [num]
                    return combination
        return None


    ### Memoized
    def how_sum(target_sum, numbers):
        memo = {}

        def helper(target_sum, numbers):
            if target_sum == 0:
                return []
            if target_sum in memo:
                return memo[target_sum]
            for num in numbers:
                remainder = target_sum - num
                if remainder >= 0:
                    combination = helper(remainder, numbers)
                    if combination is not None:
                        memo[target_sum] = combination + [num]
                        return memo[target_sum]
            memo[target_sum] = None
            return memo[target_sum]

        return helper(target_sum, numbers)


    ### Tabulation
    def how_sum(targert_sum, numbers):
        table = [None] * (targert_sum + 1)
        table[0] = []
        for i in range(targert_sum):
            if table[i] is not None:
                numbers = [num for num in numbers if i + num <= targert_sum]
                for num in numbers:
                    table[i + num] = table[i] + [num]
        return table[-1]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. bestSum

    ## Brute-Force
    def best_sum(target_sum, numbers):
        if target_sum == 0:
            return []
        shortest_combination = None
        for num in numbers:
            remainder = target_sum - num
            if remainder >= 0:
                combination = best_sum(remainder, numbers)
                if combination is not None:
                    combination = combination + [num]
                    if shortest_combination is None or len(combination) < len(
                        shortest_combination
                    ):
                        shortest_combination = combination
        return shortest_combination


    ### Memoized
    def best_sum(target_sum, numbers):
        memo = {}

        def helper(target_sum, numbers):
            if target_sum == 0:
                return []
            if target_sum in memo:
                return memo[target_sum]
            shortest_combination = None
            for num in numbers:
                remainder = target_sum - num
                if remainder >= 0:
                    combination = helper(remainder, numbers)
                    if combination is not None:
                        combination = combination + [num]
                        if shortest_combination is None or len(combination) < len(
                            shortest_combination
                        ):
                            shortest_combination = combination
            memo[target_sum] = shortest_combination
            return memo[target_sum]

        return helper(target_sum, numbers)


    ## Tabulation
    def best_sum(targert_sum, numbers):
        table = [None] * (targert_sum + 1)
        table[0] = []
        for i in range(targert_sum):
            if table[i] is not None:
                numbers = [num for num in numbers if i + num <= targert_sum]
                for num in numbers:
                    if table[i + num] is None or len(table[i]) < len(table[i + num]):
                        table[i + num] = table[i] + [num]
        return table[-1]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. canConstruct

    ### Brute-Force
    def can_construct(target, word_bank):
        if target == "":
            return True
        for word in word_bank:
            if len(target) >= len(word) and target[: len(word)] == word:
                remainder = target[len(word) :]
                if can_construct(remainder, word_bank):
                    return True
        return False


    ### Memoized
    def can_construct(target, word_bank):
        memo = {}

        def helper(target, word_bank):
            if target == "":
                return True
            if target in memo:
                return memo[target]
            for word in word_bank:
                if len(target) >= len(word) and target[: len(word)] == word:
                    remainder = target[len(word) :]
                    if helper(remainder, word_bank):
                        memo[target] = True
                        return memo[target]
            memo[target] = False
            return False

        return helper(target, word_bank)


    ### Tabulation
    def can_construct(target, word_bank):
        table = [False] * (len(target) + 1)
        table[0] = True
        for i in range(len(target)):
            if table[i]:
                for word in word_bank:
                    if target[i : i + len(word)] == word:
                        table[i + len(word)] = True
        return table[-1]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. countConstruct

    ### Brute-Force
    def count_construct(target, word_bank):
        if target == "":
            return 1
        totalCount = 0
        for word in word_bank:
            if len(target) >= len(word) and target[: len(word)] == word:
                remainder = target[len(word) :]
                totalCount += count_construct(remainder, word_bank)
        return totalCount


    ### Memoized
    def count_construct(target, word_bank):
        memo = {}

        def helper(target, word_bank):
            if target == "":
                return 1
            if target in memo:
                return memo[target]
            totalCount = 0
            for word in word_bank:
                if len(target) >= len(word) and target[: len(word)] == word:
                    remainder = target[len(word) :]
                    totalCount += helper(remainder, word_bank)
            memo[target] = totalCount
            return totalCount

        return helper(target, word_bank)


    ### Tabulation
    def count_construct(target, word_bank):
        table = [0] * (len(target) + 1)
        table[0] = 1
        for i in range(len(target)):
            if table[i]:
                for word in word_bank:
                    if target[i : i + len(word)] == word:
                        table[i + len(word)] += table[i]
        return table[-1]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. allConstruct

    ### Brute-Force
    def all_construct(target, word_bank):
        if target == "":
            return [[]]
        result = []
        for word in word_bank:
            if len(target) >= len(word) and target[: len(word)] == word:
                suffix = target[len(word) :]
                suffix_ways = all_construct(suffix, word_bank)
                target_ways = [way + [word] for way in suffix_ways]
                if target_ways:
                    result.extend(target_ways)
        return result


    ### Memoized
    def all_construct(target, word_bank):
        memo = {}

        def helper(target, word_bank):
            if target == "":
                return [[]]
            if target in memo:
                return memo[target]
            result = []
            for word in word_bank:
                if len(target) >= len(word) and target[: len(word)] == word:
                    suffix = target[len(word) :]
                    suffix_ways = helper(suffix, word_bank)
                    target_ways = [way + [word] for way in suffix_ways]
                    if target_ways:
                        result.extend(target_ways)
            memo[target] = result
            return result

        return helper(target, word_bank)


    ### Tabulation
    def all_construct(target, word_bank):
        table = [[] for _ in range(len(target) + 1)]
        table[0] = [[]]
        for i in range(len(target)):
            for word in word_bank:
                if target[i : i + len(word)] == word:
                    new_combinations = [combination + [word] for combination in table[i]]
                    table[i + len(word)].extend(new_combinations)
        return table[-1]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Time it

    from time import perf_counter
    from functools import wraps

    def timed(fn):

        @wraps(fn)
        def inner(*args, **kwargs):
            start = perf_counter()
            result = fn(*args, **kwargs)
            end = perf_counter()
            elapsed = end - start
            return (result, elapsed)

        return inner



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
End


