Python 3 in Jupyter Notebook and VSCode
///////////////////////////////////////////////////////////////////////
CONTENTS
01. Structure, Variables and Data Types
02. Working with Strings and Numbers
03. Input from users
04. Basic Calculator
05. Lists, List Functions and Tuples
06. Functions
07. Return Statement
08. Statements  (If, While, For)
09. Comparison Statements
10. Better Calculator
11. Dictionaries
12. Guessing game with While loop
13. Exponent Power Function
14. 2D List and Nested Loops
15. Build Translator
16. Comments
17. Try Except - Catching Errors
18. Reading Files
19. Writing Files
20. Modules and Pip
21. Classes & Objects
22. Multiple Choice Quiz
23. Object Functions
24. Inheritence
25. Interpreter
26. OpenCV Installations
27. Read Images in OpenCV
28. Read videos in OpenCV
29. Resizing/Rescaling Images in OpenCV
30. Resizing/Rescaling Videos in OpenCV 
31. Drawing shapes and Adding Texts in OpenCV
32. 5 Essential Functions (Grayscale, Blur, Edge Cascade, Combination, Resize, Cropping)
33. Image Transformation (Shift, Rotate, Flip Image)
34. Contour Detection
35. Color Spaces (Color Conversion)
36. Color Channels (Splitting and Merging)
37. Smoothing and Blurring Techniques
38. Bitwise Operations
39. Masking
40. Computing Histograms in OpenCV
41. Thresholding/Binarizing Images (Basic, Inverse, Adaptive, Adaptive Inverse, Gaussian Adaptive)
42. Gradient and Edge Detection
43. Face Detection with Haarcascade
44. Face Recognition with HaarCascade
45. Deep Computer Vision with Kaggle

////////////////////////////////////////////////////////////////////////
01. Strings, Structure, Variables and Data Types
    //Just type in 
        print("Just type anything here")
        Shift+Enter in Jupyter   
        
    //Program
        character_name = "Name01"
        character_age = 35
        print("The name is " + character_name + " and he is " + character_age + " years old.")
        character_name = "Name02"    //Reassigning another value to the variable
        print("He has a brother named " + character_name + ".")
        
    //Data types
        string_name = "Tom"              //string
        int_num_double = 35.123123 //the variable will recognize if it is a float, num, int, or double unlike C language
        is_Male = True | False             //boolean

////////////////////////////////////////////////////////////////////////
02. Working with Strings and Numbers

    //Strings
        //Adding new line
            print ("First line \n Second Line")
            
        //Print out Quotation Mark
            print("Print this \"Quotation Mark\" ")
            
        //Print out variable
            variable = "Hello"
            print(variable)
            
        //Concatenate
            variable = "Hello"
            print(variable + " there!")
            
        //Convert entire string to lower case
            variable = "HELLO"
            print(variable.lower())
            
        //Convert entire string to upper case
            variable = "hello"
            print(variable.upper())
            
        //Check strings in lower or upper and returns true or false
            variable = "hello"
            print(variable.isupper())   //Output: False
        
        //Converts to Uppercase and then check strings in lower or upper and returns true or false
            variable = "hello"
            print(variable.upper().isupper())   //Output: True
        
        //Length            
            variable = "hello"
            print(len(variable))   //Output: 5
            
        //Grab Character via Index  
            variable = "hello"
            print(variable[1])   //Output: e    
        
        //Grab Index Number via Character  
            variable = "hello"
            print(variable.index("h"))   //Output: 0   
            
        //Replace String  
            variable = "hello there"
            print(variable.replace("hello", "hi"))   //Output: hi there   

    //Numbers
        //Basic Arithemetics
            print(3 * 4 + 5)    //Output: 17
            print(3 * (4 + 5))    //Output: 27

        //Modulus (Remainder)
            print(10%3) //Output: 1

        //Convert number into String
            my_num = 23
            print(str(my_num) + "is my favourite number") //Output: 23 is my favourite number
            NOTE: You can't print out number within a sentence, calling the variable name is required
        
        //Absolute value
            my_num = -5
            print(abs(my_num)) //Output: 5
        
        //Exponent - See topic 13
            print(2**3) //2 to the power of 3 = 8
        
        //Squared
            print(pow(5, 2)) //Output: 25

        //Which number is higher (max, min)
            print(max(4, 6)) //Output: 6

        //Rounding numbers to whole numbers
            print(round(3.2123)) //Output: 3

        //Import other math functions
            from math import *

            //Floor - To erase the decimals
                print(floor(3.1234))    //Output: 3
                
            //Ceiling - To erase the decimals but add 1
                print(ceil(3.1234))    //Output: 4

            //Square Root
                print(sqrt(4)) //Output: 2

////////////////////////////////////////////////////////////////////////
03. Input from Users
    //Program
        name = input ("Enter your name: ")
        age = input("Enter your age: ")
        print ("Hello " + name + " and you are " + age + " years old!")

////////////////////////////////////////////////////////////////////////
04. Basic Calculator
    //Program
        num1 = input("Enter a number: ")
        num2 = input("Enter another number: ")
        result = int(num1) + int(num2)  //The "int" converts string to whole number. Use "float" for decimal
        print(result)

////////////////////////////////////////////////////////////////////////
05. Lists, List Functions and Tuples
    //Lists
        friends = ["Friend01", "Friend02", "Friend03", 20, "Friend04"]  //You can add number and strings in the list
        print(friends[0]) //Output: Friend01
        print(friends[-1]) //Output: 20
        print(friends[-2]) //Output: Friend03
        print(friends[1]) //Output: Friend02
        print(friends[1:]) //Output: Friend02, Friend03, 20 
        print(friends[1:3]) //Output: Friend02, Friend03 
        //Change list value
        friends[1] = "Mike"
        print(friends[1])   //Output: "Mike"

    //List Functions
        lucky_numbers = [4, 8, 15, 16, 23, 42]
        friends = ["Kevin", "Karen", "Jim", "Oscar", "Toby"]
        
        friends.extend(lucky_numbers)
        print(friends)  //Output: Concatenate friends with lucky_numbers

        friends.append("Creed")
        print(friends) //Output: Adds  Creed to the friends list

        friends.insert(1, "Kelly")
        print(friends) //Output: Inserts Kelly to the friends list between Kevin and Karen

        friends.remove("Jim")
        print(friends) //Output: Removes Jim from the friends list

        friends.clear()
        print(friends) //Output: Clear the entire friends list

        friends.pop()
        print(friends) //Output: Removes the last element from the list

        print(friends.index("Kevin")) //Output: Shows the index number of Kevin in the list
        print(friends.count("Jim")) //Output: Counts the number of occurrences of Jim in the list  

        friends.sort()
        print(friends) //Output: Alphabetical order

        friends.reverse()
        print(friends) //Output: Reverse sort the list
        
        friends2 = friends.copy()
        print(friends2) //Output: Copies friends list to friend2 list
        
    //Tuples - Unlike list, tuples can't be changed or modified
        coordinates = (4, 5, 6)
        print(coordinates[0])   //Output: 4

        //Can also be used as list of tuples
        coordinates = [(1, 2), (3, 4), (5, 6)]
        print(coordinates)

////////////////////////////////////////////////////////////////////////
06. Functions (Similar to Class)
    //Program Structure
        def sayHi():
            print("Hello")        
        sayHi()

    //Program with Parameters
        def sayHi(name, age):
            print("Hello " + name + " and you are " + str(age) + " years old")   
            //Remember that numbers can't share with string within a sentence therefore needs to convert to string hende str(age)
        sayHi("Mike", 23)   //Output: Hello Mike and you are 23 years old

////////////////////////////////////////////////////////////////////////
07. Return Statement
    //Program
        def cube(num):
            return num*num*num          //Without "return", it prints out none or null
            print("Hello")                        //All codes that are below the return keyword, it wont run (the return keyword breaks the function)
        result = cube(4)
        print(result)                             //Output: 64

////////////////////////////////////////////////////////////////////////
08. Statements (If, While, For)
    //If Statement
        is_male = True
        is_tall = True
        
        if is_male or is_tall:                                  //You can use "or", "and", 
            print("You are male and tall or both")   //If is_male is true, then print the string
        elif is_male and not(is_tall):                      //else if statement
            print("You are a short male")
        elif not(is_male) and is_tall:
            print("You are not male but is tall")
        else:
            print("You are either  not male or not tall")
            
    //While Loop
        i = 1
        while i <= 10:
            print(i)
            i += 1
        print("Loop complete")
        
    //For Loop #1
        for letter in "Hello":
            print(letter) //Output: Prints out every single letter in each line
    
    //For Loop #2
        friends = ["Bob", "Jim", "Karen"]
        for friend in friends:
            print(friend) //Output: Prints out each item in each line
            
    //For Loop #3
        for index in range(10):
            print(index) //Output: Prints out each number (0-9) in each line
            
    //For Loop #4
        for index in range(3, 10):
            print(index) //Output: Prints out each number (3-9) in each line
            
    //For Loop #5
        friends = ["Bob", "Jim", "Karen"]
        for index in range(len(friends)):
            print(friends[index]) //Output: Prints out each name in each line
           
    //For Loop #6
        for index in range(5):
            if index == 0:
                print("First Iteration") 
            else:
                print("Not First")  //Output: Prints out not first in each line    

////////////////////////////////////////////////////////////////////////
09. Comparison Statements
    //Program ('>=', '<=', '==', '!=', '>', '<')
        def max_num(num1, num2, num3):
            if num1 >= num2 and num1 >= num3:
                return num1
            elif num2 >= num1 and num2 >= num3:
                return num2
            else:
                return num3
        
        print(max_num(3, 4, 5)) //Output: 5

////////////////////////////////////////////////////////////////////////
10. Better Calculator
    //Program
        num1 = float(input("Enter first number: ")) //turn numbers into float
        op = input("Enter operator: ")
        num2 = float(input("Enter second number: "))

        if op == "+":
            print(num1 + num2)
        elif op == "-":
            print(num1 - num2)
        elif op == "/":
            print(num1 / num2)
        elif op == "*":
            print(num1 * num2)
        else:
            print("Invalid operator")

////////////////////////////////////////////////////////////////////////
11. Dictionaries
    //Program that converts shortform Month name to longform
        monthConversions = {
            "Jan": "January",
            "Feb": "February",
            "Mar": "March",
            "Apr": "April",
            "May": "May",
            "Jun": "Jun",
            "Jul": "July",
            "Aug": "August",
            "Sep": "September",
            10: "October",
            "Nov": "November",
            12: "December",
        }

        print(mothConversions["Nov"])   //Output: November
        print(mothConversions.get("Nov"))   //Output: November
        print(mothConversions.get("Lov"))   //Output: None
        print(mothConversions.get("Lov", "Not a valid key"))   //Output: Not a valid key
        print(mothConversions.get(12))   //Output: December

////////////////////////////////////////////////////////////////////////
12. Guessing game with While Loop
    //Program
        secret_word = "secret"  //Secret word storage
        guess = ""
        guess_count = 0
        guess_limit = 3
        out_of_guesses = False
        
        while guess != secret_word and not(out_of_guesses):
            if guess_count < guess_limit:
                guess = input("Enter secret word: ")
                guess_count += 1
            else:
                out_of_guesses = True
        if out_of_guesses:
            print("You're out of guesses")
        else:
            print("You Win!")

////////////////////////////////////////////////////////////////////////
13. Exponent Function
    //Program
        def raiseToPower(base_num, pow_num):
            result = 1
            for index in range(pow_num):
                result = result * base_num
            return result
        print(raiseToPower(2, 3)) //Output: 8
    
////////////////////////////////////////////////////////////////////////
14. 2D Lists and Nested Loops
    //2D List Program
        number_grid = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [0]
        ]
        print(number_grid[0][0]) //Row, Column, Output: 1

    //Nested For Loop Program
        number_grid = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [0]
        ]
        
        for row in number_grid:
            for col in row:
                print(col)      //Output: Prints out numbers in each line starting 1 to 9 to 0

////////////////////////////////////////////////////////////////////////
15. Build Translator
    //Program - Turn any vowels to letter G
        def translate(phrase):
            translation = ""
            for letter in phrase:
                if letter.lower() in "aeiou":
                    if letter.isupper():
                        translation = translation + "G"
                    else:
                        translation = translation + "g"
                else:
                    translation = translation + letter
            return translation

        print(translate(input("Enter a phrase: ")))
        
////////////////////////////////////////////////////////////////////////
16. Comments
    # Ignores a line
    
    '''
    Ignores multiple lines
    '''

////////////////////////////////////////////////////////////////////////
17. Try-Except - Catching Errors
    //Program
        number = int(input("Enter a number: "))
            print(number)
    
    //if you enter a string, Error: invalid literal for int() base 10 and other jibberish will be thrown
    //And the entire program will breaks
    
    //Try Except Block
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except:
            print("Invalid Input")

    //Now if you enter a string instead of number, "Invalid Input" string will appear
    //Note that the value sting will also be tied up to this single error
    //Note that the Except block being used above is too broad

    //Catching Specific Errors
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except ZeroDivisionError:
            print("Divided by Zero")
        except ValueError:
            print("Invalid Input")

    //Store Errors as variables
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except ZeroDivisionError as error:
            print(err)
        except ValueError:
            print("Invalid Input")

////////////////////////////////////////////////////////////////////////
18. Reading Files
    //Command
        "r" = read
        "w" = write
        "a" = append, add
        "r+" = read and write
    //Reading Text Files
        open("text.txt", "r") //If the file resides within the same folder
    //Store the contents of the file into a variable
        variable_file = open("text.txt", "r")
    //Close the file
        variable_file.close()
    //Check if the file is readable, outputs true or false
        print(variable_file.readable())
        //Note: The "r" if replaced to "w", it can no longer be read, hence will output False 
    //Prints out all information in the file to the console
        print(variable_file.read())
    //Capture lines within the file and store into an array
        print(variable_file.readlines())
    //Read lines by index
        print(variable_file.readlines()[1])
    //Prints out individual line within the text file
        variable_file = open("text.txt", "r")
        for variable in variable_file.readlines():
            print(variable)
        variable_file.close()

////////////////////////////////////////////////////////////////////////
19. Writing Files
    //Command
        "r" = read
        "w" = write / create new file
        "a" = append, add
        "r+" = read and write
    //Adding line to file
        variable_file = open("text.txt", "a")
        variable_file.write("\nThis is the line to be added to the text file")  //Note the \n for the new line
        variable_file.close()                   
    //Rewrite the entire file
        variable_file = open("text.txt", "w")   //Note: The "w" will turn your file to blank and write the line below
        variable_file.write("\nThis is the line to be added to the text file") 
        variable_file.close()            

////////////////////////////////////////////////////////////////////////
20. Modules and Pip
    //Modules  - Using Internal Modules
        //Extracting modules from another python file        
        //File1.py
            import random            
            feet_in_mile = 5000
            meters_in_km = 1000
            band_members = ["Vocals", "Guitarist", "Bassists", "Drummer"]
            def get_file_ext(filename):
                return filename[filename.index(".") + 1:]                
            def roll_dice(num):
                return random.randint(1, num)

        //File2.py
            import File1.py            
            print(File1.roll_dice(10))  //Output: This will roll the dice

    //Modules - Using External Modules
        //https://docs.python.org/3/py-modindex.html - Python Module Index
        //Location of external module 
            External Libraries > Python #.#.# > Lib  > 
        //Program
            import tkinter

    //Using 3rd Party Modules (Pip)
        //Installing
            Open Command prompt
            pip --version //This checks the current version of your Pip
            pip install python-module-name
        //Location of installed module 
            External Libraries > Python #.#.# > Lib  > site-packages
        //After installing, you can access the modules like how you access tkinter module
        //Removing modules
            pip uninstall python-module-name

////////////////////////////////////////////////////////////////////////
21. Classes & Objects
    //student_file.py
        class studentClass:
            def __init__(self, name, major, gpa, probation):
                self.name = name
                self.major = major
                self.gpa = gpa
                self.probation = probation

    //main.py
        from student_file import studentClass        //From *file* import *class*
        student1 = studentClass("Jim", "Business", 3.1, False)
        print(student1.name)    //Output: Jim

        //When you create a student, you call the init function of the class
        //self.name is the object, the attribute of the student and it's assigned to the 'name' variable
        
////////////////////////////////////////////////////////////////////////
22. Multiple Choice Quiz
    //main.py
        from question_file import Question
        
        question_prompts = [
            "What color are apples?\n(a) Red/Green\n(b) Purple\n(c) Orange\n\n",
            "What color are bananas?\n(a) Teal\n(b) Magenta\n(c) Yellow\n\n",
            "What color are strawberries?\n(a) Yellow\n(b) Red\n(c) Blue\n\n"
        ]
        
        questions = [                                            //the correct answers
            Questions(question_prompts[0], "a")
            Questions(question_prompts[1], "c")
            Questions(question_prompts[2], "b")
        ]
        
        def run_test(questions):                            //ask to the user
            score = 0
            for question in questions:                       //do something with each question object in questions array
                answer = input(question.prompt)         //input text box for user
                if answer == question.answer:           //check the answer (user input) is similar to the questions that were asked
                    score += 1                                        //increments the score by 1
            print("You got " + str(score) + "/" + str(len(questions)) + "correct")
        
        run_test(questions)
        
    //question_file.py
        class Question:
            def __init__(self, prompt, answer):
                self.prompt = prompt
                self.answer = answer        

////////////////////////////////////////////////////////////////////////
23. Object Functions
    //main.py
        from Student import Student
        
        student1 = Student("Oscar", "Accounting", 3.1)
        student1 = Student("Jack", "Business", 3.2)
        
        print(student2.on_honor_roll()) //Output: True

    //Student.py
        class Student:
            def __init__(self, name, major, gpa):
                self.name = name
                self.major = major
                self.gpa = gpa

            def on_honor_roll(self):
                if self.gpa >= 3.5:
                    return True
                else:
                    return False

////////////////////////////////////////////////////////////////////////
24. Inheritence
    //main.py
        from Chef import Chef
        from ItalianChef_file import ItalianChef
        
        myChef = Chef()
        myChef.make_special_dish()  //Output: Prints outmake bbq ribs
        
        myItalianChef = ItalianChef()
        myItalianChef.make_chicken()    //Output: Prints out makes chicken
        myItalianChef.make_chicken_parmesan()  //Output: Prints out make chicken parmesan
        myItalianChef.make_special_dish() //Output: Prints out make Pizza

    //Chef.py
        class Chef:
            def make_chicken(self):
                print("The chef makes a chicken")
                
            def make_salad(self):
                print("The chef makes a chicken")

            def make_special_dish(self):
                print("The chef makes bbq ribs")

    //ItalianChef_file.py
        from Chef import Chef
        class ItalianChef(Chef) :            

            def make_special_dish(self):
                print("The chef makes a pizza")
            
            def make_chicken_parmesan(self):
                print("The chef makes chicken parmesan")

////////////////////////////////////////////////////////////////////////
25. Interpreter
    //Type python in command prompt
    //You will see ">>>" in command prompt


////////////////////////////////////////////////////////////////////////
26. OpenCV Installations
    //Installation
        //Code Runner for VS Code
            Run Code - CTRL+ALT+N
            Stop Code - CTRL+ALT+M
        //OpenCV
            pip install opencv-contrib-python
        //Matplotlib
            python -m install -U matplotlib
    //Run Python in VS Code
        Create new file and Save as Python File

////////////////////////////////////////////////////////////////////////
27. Read Images in OpenCV 
    //Program
        import cv2 as cv
        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cat', img) //Opens image in new window
        cv.waitKey(0)               //Wait for key to be pressed, therefore 0 means wait infinitely

////////////////////////////////////////////////////////////////////////
28. Read Videos in OpenCV 
    //Program
        import cv2 as cv
        //capture = cv.VideoCapture('$path')
            //0 = webcam
            //1 = first camera
            //'$path' = path of file
        capture = cv.VideoCapture('Videos/Cat.mp4')
        while True:
            isTrue, frame = capture.read()          //reads frame by frame and returns to frame variable
            cv.imshow('Video', frame)               //Display the video and pass into frame variable
            if cv.waitKey(20) & 0xFF==ord('d'):  //Stops video from playing continuously, breaks out of while loop
                break                                           //0xFF==ord('d') means press d to break out of video
        capture.release()                                 //Release capture pointer after loop
        cv.destroyAllWindows()                      //Or destroy all windows after loop
    
    //-215:Assertion failed: OpenCv cannot find the file location specified, video ran out of frames

////////////////////////////////////////////////////////////////////////
29. Resizing/Rescaling Images in OpenCV 
    //If the image is larger than the monitor screen, image will bleed offscreen
    //In this case, resizing need to be done.
    //OpenCV
    //Program
        import cv2 as cv

        img = cv.imread('Images/cat.jpg')
        
        def rescaleFrame(frame, scale=0.75):    #rescale to 0.75 where 1 is original size
            //width = frame.shape[1] * scale          #frame.shape is the original width of image
            //height = frame.shape[0] * scale
            width = int(frame.shape[1] * scale)          #converts into integer
            height = int(frame.shape[0] * scale)
            dimensions = (width, height)
            return cv.resize(frame, dimensions, interpolation=cv.INTER_AREA)
        
        resized_image = rescaleFrame(img)
        cv.imshow('Image', resized_image)  //cv.imshow() is like console.out() in C#
        cv.waitKey(0)  
        
    //Resize Image
       resized = cv.resize(img, (500,  500))
       resized = cv.resize(img, (500,  500), interpolation=cv.INTER_AREA) 
       resized = cv.resize(img, (500,  500), interpolation=cv.INTER_LINEAR) //Enlarge
       resized = cv.resize(img, (500,  500), interpolation=cv.INTER_CUBIC) //Enlarge, slowest

////////////////////////////////////////////////////////////////////////
30. Resizing/Rescaling Videos in OpenCV 
    //Program
        import cv2 as cv

        def rescaleFrame(frame, scale=2.00):
            width = int(frame.shape[1] * scale)
            height = int(frame.shape[0] * scale)
            dimensions = (width, height)
            return cv.resize(frame, dimensions, interpolation=cv.INTER_AREA)

        capture = cv.VideoCapture('Videos/Cat.mp4')
        
        def changeRes(width, height):   //This change the resolution (Only works with cameras, not video/image files)
            capture.set(3, width)
            capture.set(4, height)
        
        while True:
            isTrue, frame = capture.read()  
            frame_resized = rescaleFrame(frame)

            cv.imshow('Video', frame)   
            cv.imshow('Video Resized', frame_resized)

            if cv.waitKey(20) & 0xFF==ord('d'): 
                break   
        capture.release()         
        cv.destroyAllWindows()

////////////////////////////////////////////////////////////////////////
31. Drawing shapes and Adding Texts
    //Draw on blank image
        import cv2 as cv
        import numpy as np

        blank = np.zeros((500, 500, 3), dtype='uint8') //Uint8 is datatype of an image, np.zeros(width, height, colorchannels)
        //cv.imshow('blank', blank)  //Output: Black image

            //This Paints entire image green, paint in rgb
            //blank[:] = 0, 255, 0    
            
            //This shrinks the green image
            blank[200:300, 300:400] = 0, 255, 0  
            
            //Draws a rectangle, 
            //rectangle(img, pt1, pt2, color, thickness=None, lintType=None, shift=None, /)
            cv.rectangle(blank, (0,0), (250,250), (0,255,0), thickness=2)
            
            //Filled up rectangle with color
            cv.rectangle(blank, (0,0), (250,250), (0,255,0), thickness=cv.FILLED)
            
            //Divide rectangle to half
            cv.rectangle(blank, (0,0), (blank.shape[1]//2, blank.shape[0]//2), (0,255,0), thickness=-1) //-1 means fill
            
            //Draw a circle
            cv.circle(blank, (blank.shape[1]//2, blank.shape[0]//2), 40, (0,0,255), thickness=3)
            
            //Draw a line
            cv.line(blank, (0,0), (blank.shape[1]//2, blank.shape[0]//2), (0,0,255), thickness=3)

            //Write text on image
            //cv.putText(blank, 'String', (Position), cv.font, fontscale, color, thickness)
            cv.putText(blank, 'Hello', (255,255), cv.FONT_HERSHEY_TRIPLEX, 1.0, (0,255,0), 2)

        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
32. 5 Essential Functions (Grayscale, Blur, Edge Cascade, Combination, Resize, Cropping)
    //Program
        import cv2 as cv
        img = cv.imread('Images/cat.jpg')
    
        //Converting Image to greyscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        cv.imshow('blank', gray)
        
        //Blur an image
        //cv.GaussianBlur(img, (kernel), border)
        blur = cv.GaussianBlur(img, (3, 3), cv.BORDER_DEFAULT)
        
        //Edge Cascade
        //cv.Canny(img, threshold, threshold)
        canny = cv.Canny(img, 125, 175)
        
        //Combination
            //Blur + Edge Cascade
            canny = cv.Canny(blur, 125, 175)
            
            //Dilating an image
            //cv.dilate(canny, kernel size, iteration)
            dilated = cv.dilate(canny, (3,3), iterations=1)
            
            //Eroding
            eroded = cv.erode(dilated, (3,3), iterations=1)
            
        //Resize Image
        resized = cv.resize(img, (500,  500)) - Stretches
        resized = cv.resize(img, (500,  500), interpolation=cv.INTER_AREA) 
        resized = cv.resize(img, (500,  500), interpolation=cv.INTER_LINEAR) //Enlarge
        resized = cv.resize(img, (500,  500), interpolation=cv.INTER_CUBIC) //Enlarge, slowest
        
        //Cropping
        //img[top left corner, bottom right corner]
        cropped = img[50:200, 200:400]
        
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
33. Image Transformation (Shift, Rotate, Flip Images)
    //Program - Shifting Image
        import cv2 as cv
        import numpy as np
        img = cv.imread('Images/cat.jpg')

        //Translation
        def translate(img, x, y):
            transMat = np.float32([[1,0,x], [0,1,y]])
            dimensions = (img.shape[1], img.shape[1],) //(img.shape[width], img.shape[height])
            return cv.warpAffine(mig, transMat, dimensions)

        // -x --> Shift Image Left
        // -y --> Shift Image Up
        // x --> Shift Image Right
        // y --> Shift Image Down
        //translate(img, x, y)
        translated = translate(img, 50, 100)

        cv.imshow('Translated', translated)
        cv.waitKey(0)

    //Program - Rotate Image CCW
        import cv2 as cv
        import numpy as np
        img = cv.imread('Images/cat.jpg')

        //Rotation
        def rotate(img, angle, rotPoint=None):
            (height, width) = img.shape[:2]
            
            if rotPoint is None:
                rotPoint = (width//2, height//2)
        
            //rotMat = cv.getRotationMatrix2D(rotPoint, angle, scale)
            rotMat = cv.getRotationMatrix2D(rotPoint, angle, 1.0)
            dimensions = (width, height)
            
            return cv.warpAffine(img, rotMat, dimensions)
    
        //rotate(img, angle)
        rotated = rotate(img, 45)   //-45deg for clockwise rotation
        cv.imshow('Rotated', rotated)
        
        //To rotate twice
        rotated_rotated = rotate(rotate, 45) //This will rotate the rotated image by another 45deg, but take note together with black background
        cv.imshow('Rotated2', rotated_rotated)

    //Program
        import...
        img = cv.imread(...)
        
        //Flip
        flip = cv.flip(img, 0) 
            // 0 = Flip Image Vertically
            // 1 = Flip Image Horizontally
            // -1 = Flip Image Vertically and Horizontally
        cv.imshow(...)
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
34. Contour Detection
    //Boundaries of an object/face/image
    //Not similar to Edges
    //Program using Canny
        import cv2 as cv
        img = cv.imread('Images/cat.jpg')
        
        //First, you need to convert image to Grayscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        
        //Secondly, grab Edges of image (Canny)
        canny = cv.Canny(img, 125, 175)
        
        //Contour process
        contours, hierarchies = cv.findContours(canny, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
            //RETR
                cv.RETR_TREE for hierarchical contours
                cv.RETR_EXTERNAL for external contours
                cv.RETR_LIST for all contours in image
            //Approximation Method
                cv.CHAIN_APPROX_NONE - returns all contours
                cv.CHAIN_APPROX_SIMPLE - compress contours to 2 end points
                //But not much difference between None and Simple
        
        //Find Length of the list
        print(f'{len(contours)} contours found!')
        
        cv.imshow('Contours', contours)
        cv.waitKey(0)

    //Program using Threshold
        import cv2 as cv
        img = cv.imread('Images/cat.jpg')
        
        //First, you need to convert image to Grayscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        
        //Secondly, grab Edges of image (Threshold), It's like increasing the contrast
        //cv.threshold(src, thresh, maxval, type)
        ret, thresh = cv.threshold(gray, 125, 255, cv.THRESH_BINARY)
        
        //Contour process
        contours, hierarchies = cv.findContours(thresh, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
        
        cv.imshow('Contours', contours)
        cv.waitKey(0)

    //Program - Drawing over the image
        import cv2 as cv
        import numpy as np
        
        img = cv.imread('Images/cat.jpg')
        blank = np.zeros(img.shape, dtype='uint8')
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(gray, 125, 255, cv.THRESH_BINARY)
        contours, hierarchies = cv.findContours(thresh, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
        
        //Draw Contours
        //drawContours(image, contours, contourIndex, color, line thickness)
        cv.drawContours(blank, contours, -1, (0,0,255), 2)
        cv.imshow('Contours', blank)
        
        cv.imshow('Contours', contours)
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
35. Color Spaces (Color Conversion)
    //Switch between Color Spaces
    //Greyscale, RGB, HSV, LAB
    
    //Convert to Grayscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

    //Convert to HSV
        hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)

    //Convert to Lab 
        lab = cv.cvtColor(img, cv.COOR_BGR2LAB)

    //BGR image when converted to RGB will be color inversed
        import cv2 as cv
        import matplotlib.pyplot as plt
        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cat', img)
        plt.imshow(img)
        plt.show()

    //To show RGB properly in Matplotlib
        import cv2 as cv
        import matplotlib.pyplot as plt
        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cat', img)
        rgb = cv.cvtColor(img, cv.COLOR_BGR2RGB)    //This will inverse
        plt.imshow(rgb)                             //And this will inverse the inversed image
        plt.show()
        cv.waitKey(0)

    //NOTE: You cannot convert Grayscale to LAB.
    //      Convert Grayscale to BGR and then to LAB


////////////////////////////////////////////////////////////////////////
36. Color Channels (Splitting and Merging)
    //Splitting image to Blue, Green and Red 
    //Shows intensity in Grayscale (The lighter the color, the higher the intensity)
        b,g,r = cv.split(img)
        cv.imshow('Blue', b)
        cv.imshow('Blue', g)
        cv.imshow('Blue', r)

    //Splitting image to Blue, Green and Red and show in its own color 
        import cv2 as cv
        import numpy as np 
        img = cv.imread('Images/cat.jpg')
        blank = np.zeros(img.shape[:2], dtype='uint8')
        b,g,r = cv.split(img)
        blue = cv.merge([b,blank,blank])
        green = cv.merge([blank,g,blank])
        red = cv.merge([blank,blank,r])
        cv.imshow('Blue', blue)
        cv.imshow('Green', green)
        cv.imshow('Red', red)
        cv.waitKey(0)

    //Merging Color Channels as an image 
        merged = cv.merge([b,g,r])

////////////////////////////////////////////////////////////////////////
37. Smoothing and Blurring Techniques
    //Imagine a 2D box of pixels subdivided to 9 sections (3 columns and 3 rows)
    //The center pixel will be computed based on the surrounding pixels

    //Averaging - Average of the sum of surrounding pixel's intensity values
        average = cv.blur(img, (7,7), average)   //Kernal Size (7,7) The higher the number, more blur it is

    //Gaussian - Average of the sum of surrounding pixel's weight values
        gauss = cv.GaussianBlur(img, (7,7), 0) //0 is SigmaX
        //SigmaX = standard deviation in X direction

    //Median (Smudging) - To reduce image noise
        median = cv.medianBlur(img, 7) //value should be below 5, not 7

    //Bilateral Blur - Applies blurring but retains edges
        bilateral = cv.bilateralFilter(img, 5, 15, 15)
        //d = diameter of pixel input
        //sigmaColor = number of colors to be computed
        //sigmaSpace = the color values used that are away from the target pixel 

////////////////////////////////////////////////////////////////////////
38. BITWISE Operations
    //AND, OR, XOR, NOT

    //Program
        import cv2 as cv
        import numpy as np

        blank = np.zeros((400,400), dtype='uint8')
        rectangle = cv.rectangle(blank.copy(), (30,30), (370,370), 255, -1)
        circle = cv.circle(blank.copy(), (200,200), 200, 255, -1)
        cv.imshow('Rectangle', Rectangle)
        cv.imshow('Circle', circle)

        #AND
        #OR
        #XOR
        #NOT

        cv.waitKey(0)

    //AND - without intersecting edges
        bitwise_and = cv.bitwise_and(rectangle, circle)

    //OR - with intersecting edges
        bitwise_or = cv.bitwise_or(rectangle, circle)

    //XOR - combine intersecting edges without fill
        bitwise_xor = cv.bitwise_xor(rectangle, circle)

    //NOT - invert
        bitwise_not = cv.bitwise_not(rectangle)

////////////////////////////////////////////////////////////////////////
39. Masking
    //Program
        import cv2 as cv
        import numpy as np

        //Target Image
        img = cv.imread('Images/cat.jpg')

        //Setup for mask
        blank = np.zeros(img.shape[:2], dtype='uint8') 
            //where in [:2]is the dimension of the mask
            //mask dimension value must be the same with the blank image
        mask = cv.circle(blank, (img.shape[1]//2, img.shape[0]//2), 100, 255, -1)

        //Masked Image
        masked = cv.bitwise_and(img, img, mask=mask)

        cv.waitKey(0)

    //Reposition mask
        mask = cv.circle(blank, (img.shape[1]//2, img.shape[0]//2) + 90, 100, 255, -1)

    //Use Rectangle
        mask = cv.rectangle(blank, (img.shape[1]//2, img.shape[0]//2), (img.shape[1]//2 +100, img.shape[0]//2 + 100), 255, -1)

    //Combination of Shapes as mask
        [import...]
        //Target Image
        img = cv.imread('Images/cat.jpg')
        blank = np.zeros(img.shape[:2], dtype='uint8') 
        circle = cv.circle(blank.copy(), (img.shape[1]//2, img.shape[0]//2), 100, 255, -1)
        rectangle = cv.rectangle(blank.copy(), (30,30), (370,370), 255, -1)
        
        //Combine both shapes
        weird_shape = cv.bitwise_and(circle, rectangle)

        //Masked Image
        masked = cv.bitwise_and(img, img, mask=weird_shape)
        cv.imshow('Masked', masked)
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
40 Computing Histograms in OpenCV
    //Allows you to visualize the pixel intensity distribution of an image (Grayscale/RGB)
    //Shows graph or plot form

    //Program - Grayscale
        import cv2 as cv
        import matplotlib.pyplot as plt

        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cats', img)

        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        cv.imshow('Gray', gray)
        //gray_hist = cv.calcHist(image, channels, mask, histSize, range)
        gray_hist = cv.calcHist([gray], [0], None, [256], [0,256])        

        plt.figure()
        plt.title('Grayscale Histogram')
        plt.xlabel('Bins') //Intensity label across X axis (The higher the number, the whiter it is)
        plt.ylabel('Pixels') //Pixel amount label across Y axis
        plt.plot(gray_hist)
        plt.xlim([0,256]) //limit across X axis
        plt.show()
        cv.waitKey(0)

    //Program - Grayscale with Masking
        import cv2 as cv
        import matplotlib.pyplot as plt
        import numpy as np

        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cats', img)

        blank = np.zeros(img.shape[:2], dtype='uint8')
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        circle = cv.circle(blank, (img.shape[1]//2, img.shape[0]//2), 100, 255, -1)        

        mask = cv.bitwise_and(gray,gray,mask=circle)
        cv.imshow('Mask', mask)
        gray_hist = cv.calcHist([gray], [0], mask, [256], [0,256])        

        plt.figure()
        plt.title('Grayscale Histogram')
        plt.xlabel('Bins') //Intensity label across X axis (The higher the number, the whiter it is)
        plt.ylabel('Pixels') //Pixel amount label across Y axis
        plt.plot(gray_hist)
        plt.xlim([0,256]) //limit across X axis
        plt.show()
        cv.waitKey(0)

    //Program - Histogram for Color Image
        import cv2 as cv
        import matplotlib.pyplot as plt
        import numpy as np

        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cats', img)

        blank = np.zeros(img.shape[:2], dtype='uint8')
        circle = cv.circle(blank, (img.shape[1]//2, img.shape[0]//2), 100, 255, -1)  
        mask = cv.bitwise_and(img,img,mask=circle)
        
        plt.figure()
        plt.title('Color Histogram')
        plt.xlabel('Bins') 
        plt.ylabel('Pixels') 

        colors = ('b', 'g', 'r')
        for i,col in enumerate(colors):
            //calcHist(images, channels, mask, histsize, ranges)
            hist = cv.calcHist([img], [i], None, [256], [0,256])
            plt.plot(hist, color=col)
            plt.xlim([0,256])
        plt.show()
        cv.waitKey(0)

    //Program - Histogram for Color Image with mask
        import cv2 as cv
        import matplotlib.pyplot as plt
        import numpy as np

        img = cv.imread('Images/cat.jpg')
        cv.imshow('Cats', img)

        blank = np.zeros(img.shape[:2], dtype='uint8')
        mask = cv.circle(blank, (img.shape[1]//2, img.shape[0]//2), 100, 255, -1)  
        masked = cv.bitwise_and(img,img,mask=mask)
        
        plt.figure()
        plt.title('Color Histogram')
        plt.xlabel('Bins') 
        plt.ylabel('Pixels') 

        colors = ('b', 'g', 'r')
        for i,col in enumerate(colors):
            //calcHist(images, channels, mask, histsize, ranges)
            hist = cv.calcHist([masked], [i], mask, [256], [0,256])
            plt.plot(hist, color=col)
            plt.xlim([0,256])
        plt.show()
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
41 Thresholding/Binarizing Images (Basic, Inverse, Adaptive, Adaptive Inverse, Gaussian Adaptive)
    //Thresholding is binarization of an image
    //Core pixel calculation principle similar to Bluring
    //0 = Black(0), 1 = White(255)
    //If intensity is below threshold, then 0, else 1
    //2 types of thresholdings: Simple and Adaptive

    //Standard Threshold
        import cv2 as cv
        img = cv.imread('Images/cat.jpg')
        
        #convert to grayscale
        grayimg = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

        #thresholding              
        threshold, thresh = cv.threshold(grayimg, 150, 255, cv.THRESH_BINARY)
            #cv.threshold(src, thresh, maxval, type)
                #src = source image
                #thresh = threshold value
                #maxval = color, if above 150(thresh), then set to 255(white)
                #thresholdtype = cv.THRESH_BINARY
        cv.imshow('Thresh', thresh)
        cv.waitKey(0)

    //Inverse Threshold       
        #thresholding inverse         
        threshold, thresh_inv = cv.threshold(grayimg, 150, 255, cv.THRESH_BINARY_INV)
        cv.imshow('Threshold Inverse', thresh_inv)

    //Adaptive Thresholding
        #Thresholding value automatically adjusts itself
        adaptive_thresh = cv.adaptiveThreshold(grayimg, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 11, 3)
            #cv.adaptiveThreshold(src, maxval, adaptivemethod, thresholdtype, blocksize, C)
                #maxval = if true, set to 255(white)
                #adaptivemethod = neighboring method, cv.ADAPTIVE_THRESH_MEAN_C
                #thresholdtype = cv.THRESH_BINARY
                #blocksize = the window area size for calculation, refer to Topic 37 (Blurring)
                #C (0-9) = integer value subtracted from the mean, to fine tune the threshold value 
        cv.imshow('Adaptive Threshold', adaptive_thresh)

    //Inverse Adaptive Thresholding
        adaptive_thresh = cv.adaptiveThreshold(grayimg, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, 11, 3)
        cv.imshow('Adaptive Threshold', adaptive_thresh)

    //Gaussian Adaptive Thresholding
        adaptive_thresh = cv.adaptiveThreshold(grayimg, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 11, 3)

////////////////////////////////////////////////////////////////////////
42. Gradient and Edge Detection
    //Gradients and Edges are completely different things

    //Laplacian
        import cv2 as cv
        import numpy as np

        img = cv.imread('Images/cat.jpg')
        cv.imshow('Original', img)

        #convert to grayscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

        #Laplacian
        lap1 = cv.Laplacian(gray, cv.CV_64F)
            #cv.Laplacian(src, ddepth)
                #src = image
                #ddepth = datadepth, cv.CV_64F
        lap2 = np.uint8(np.absolute(lap1))

        cv.imshow('Laplacian', lap2)
        cv.waitKey(0)

    //Sobel
        #Sobel computes gradient in 2 directions, X and Y
        #Y = horizontal gradients
        #X = vertical gradients
        sobelx = cv.Sobel(gray, cv.CV_64F, 1, 0)
            #cv.Sobel(src, ddepth, dx, dy)
                #src = image
                #ddepth = datadepth
                #dx = derivative of X (X direction)
                #dy = derivative of y (Y direction)
        sobely = cv.Sobel(gray, cv.CV_64F, 0, 1)
        cv.imshow('SobelX', sobelx)
        cv.imshow('SobelY', sobely)

    //Combined Sobel X and Y
        sobelx = cv.Sobel(gray, cv.CV_64F, 1, 0)
        sobely = cv.Sobel(gray, cv.CV_64F, 0, 1)
        combined = cv.bitwise_or(sobelx, sobely)
        cv.imshow('Combined', combined)

    //Canny - Refer to Topic 34, Contouring
        //Canny edge detection is a multistage process
        //And one of those stages uses Sobel
        canny = cv.Canny(gray, 150,175)

////////////////////////////////////////////////////////////////////////
43. Face Detection with Haarcascade
    //Uses classifier algorithm
    //Classifier needs to be trained with tens of images
    //OpenCV's classifiers already done that for you
    //2 types of classifiers: Haarcascades and Local Binary Pattern
    //github.com/opencv/opencv/tree/master/data/haarcascades
    //Copy haarcascade_frontalface_default.xml into the folder
    //Haarcascade uses edges to determine faces, therefore color not required
    //Note that Haarcascade is sensitive to image noise
    //To solve sensitivity, increase minNeigbors

    //Program
        import cv2 as cv
        img = cv.imread('Images/ariana.jpg')
        cv.imshow('Original', img)

        #You can convert the image to grayscale in this line and use grayimg instead of img
        #grayimg = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

        #read file and store to haarVar variable
        haarVar = cv.CascadeClassifier('haar_face.xml')

        #detection
        faces_rect = haarVar.detectMultiScale(img,scaleFactor=1.1, minNeighbors=3)
            #haarVar.detectMultiScale(image, scaleFactor, minNeighbors, flags, minSize, maxSize)
                #scaleFactor
                #minNeighbor = Parameter that specify the minimum number of neighboring pixels to be called a face
        
        #Print number of faces found
        print(f'Number of faces found = {len(faces_rect)}')

        #Draw a rectangle over the face
        for (x, y, w, h) in faces_rect:
            cv.rectangle(img, (x,y), (x+w, y+h), (0,0,255), thickness=2)
        cv.imshow('Detected Faces', img)

        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
44. Face Recognition with HaarCascade
    //Create 5 folders with each contains 20 images 

    //The Program to Train the Face Recognizer
        import os 
        import cv2 as cv 
        import numpy as np 

        #Creating a list (Manual and Auto)
            #Manual
            people = ['Ariana Grande', 'Lisa BlackPink']
            DIR = r'C:\Users\admin\Desktop\Python\OpenCV\Images\Faces'

            #Auto        
            p = []
            for i in os.listdir(r'C:\Users\admin\Desktop\Python\OpenCV\Images\Faces'):
                p.append(i)
            print(p)
            DIR = r'C:\Users\admin\Desktop\Python\OpenCV\Images\Faces'

        #Initialize Training Set Arrays
        haarVar = cv.CascadeClassifier('haar_face.xml')
        features = []
        labels = []

        #Create Training Set
        def create_train():
            #Loop for folder
            for person in people:
                path = os.path.join(DIR, person)
                label = people.index(person)

            #Loop for images in folder
            for img in os.listdir(path):
                img_path = os.path.join(path, img) //Join path to the image

                img_array = cv.imread(img_path) //Take path and put onto array
                gray = cv.cvtColor(img_array, cv.COLOR_BGR2GRAY)   //Convert to greyscale

                #Detection
                faces_rect = haarVar.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=4)
                for (x,y,w,h) in faces_rect:
                    facesRegionOfInterest = gray[y:y+h, x:x+w] //Grab faces from y to y+h and from x to x+w
                    features.append(facesRegionOfInterest)
                    labels.append(label)

        #Run
        create_train()
        print('Training Done')
        #print(f'Length of features = {len(features)}')
        #print(f'Length of labels = {len(labels)}')

        #Convert features arrays and labels arrays to numpy format 
        features = np.array(features, dtype='object')
        labels = np.array(labels)

        #Initialize the Recognizer
        face _recognizer = cv.face.LBPHFaceRecognizer_create()

        #Train the Recognizer on features and label list
        face_recognizer.train(features, labels)

        #Saving the numpy arrays to Yaml source file so it can be used on another program
        #Also saving arrays to numpy files
        face_recognizer.save('face_trained.yml')
        np.save('features.npy', features)
        np.save('labels.npy', labels)

    //The Program That Recognizes Faces
        import numpy as np
        import cv2 as cv

        haarVar = cv.CascadeClassifier('haar_face.xml')

        #Mapping
        people = ['Ariana Grande', 'Lisa BlackPink']

        #Loading the arrays
        #features = np.load('features.npy')
        #labels = np.load('labels.npy')

        #Read YAML file
        face_recognizer = cv.face.LBPHFaceRecognizer_create()
        face_recognizer.read('face_trained.yml')

        #Target Image
        img = cv.imread(r'C:\Users\admin\Desktop\Python\OpenCV\Images\Validate.jpg')
        cv.imshow('Person', img)

        #Convert to Grayscale
        gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
        
        #Detection
        faces_rect = haarVar.detectMultiScale(gray, 1.1, 4)
        for (x,y,w,h) in faces_rect:
            facesRegionOfInterest = gray[y:y+h, x:x+h]

            #Show result on Console
            label, confidence = face_recognizer.predict(facesRegionOfInterest)
            print(f'Label = {people[label]} with a confidence of {confidence}')

            #Put text on image containing the face
            cv.putText(img, str(people[label]), (20,20), cv.FONT_HERSHEY_COMPLEX, 1.0, (0,255,0), thickness=2)
                #cv.putText(img, text, origin, fontFace, fontScale, color, thickness)

            #Draw rectangle over image
            cv.rectangle(img, (x,y), (x+w,y+h), (0,255,0), thickness=2)

        cv.imshow('Detected Face', img)
        cv.waitKey(0)

////////////////////////////////////////////////////////////////////////
45. Deep Computer Vision with Kaggle

    //Setting up Kaggle Account
    //Use Simpsons dataset
        https://www.kaggle.com/alexattia/the-simpsons-characters-dataset
        Right hand panel, click on Add Data and a window will appear
        In Search Box, search for "Simpsons"
        Add alexattia's The Simpsons Characters Data
        Now you can use the dataset inside your Kaggle notebook
        //Install Caer and Canaro
            In Text Cell, type in this line:
                !pip install caer canaro
                Shift + Enter to Run

    //Program
        import os
        import caer
        import canaro
        import numpy as np
        import cv2 as cv
        import gc

        #Resize image before feeding to network
        IMG_SIZE = (80,80)
        channels = 1                //1 channel means grayscale
        
        #Add the path of image storage (simpsons_dataset)
        #Right Hand Panel > Data Section > Input > the-simpsons-characters-data > simpsons_dataset
        #Click on Copy file path
        char_path = r'../input/the-simpsons-characters-dataset/simpsons_dataset'

        #Finding top 10 character with the most number of images
        #The code will go through every single folder and outputs the number
        #Then store the information into variable/dictionary, one dictionary for each parent folder 
        char_dict = {}  //Create Dictionary
        for char in os.listdir(char_path):
            char_dict[char] = len(os.listdir(os.path.join(char_path, char)))

        #Sort the list in descending order to grab the top 10 folder
        char_dict = caer.sort_dict(char_dict, descending=True)
        char_dict

        #Grabbing the names of the first 10 elements to store in characters list
        characters = []
        count = 0
        for i in char_dict:
            characters.append(i[0])
            count += 1
            if count >= 10:
                break
        characters //This prints out the list
        
        #Create the training data
        #The code the grab images from the folder and add to the training set
        train = caer.preprocess_from_dir(char_path, characters, channels=channels, IMG_SIZE=IMG_SIZE, isShuffle=True)
            #caer.preprocess_from_dir(DIR, classes, IMG_SIZE=, channels=, per_class_size, normalize_train, mean_subtraction, isShuffle, save_data, destination_filename, verbose)

        #See how many images in the training set
        len(train)

        #Visualize the images that are present in the dataset
        import matplotlib.pyplot as plt
        plt.figure(figsize=(30,30))
        plt.imshow(train[0][0], cmap='gray')    //cmap is colormap
        plt.show()

        #Seperating training sets into features list and labels list
        #Currently, the trainingset is a list of 13k sublist where each sublist contains array and label
        #This also reshape the featureSet into a 4 dimensional tensor so it can be fed into a 4x4 model
        featureSet, labels = caer.sep_train(train, IMG_SIZE=IMG_SIZE)
            #featureSet, labels = caer.sep_train(trainset variable, IMG_SIZE=IMG_SIZE)
            
        
        #Normalize the featureSet to be in the shape of (0,1) for faster processing
        //featureSet = caer.normalize(featureSet)

        #But before normalizing, we need to Convert integers of labels into binary class vectors
        from tensorflow.keras.utils import to_categorical
        featureSet = caer.normalize(featureSet)
        labels = to_categorical(labels, len(characters))

        #Create training and validation data
        #The models will train on training data and test itself on validation data
        #Splitting/Distributing feature and labels into training sets and validation sets with validation ratio
        #80% to training set, 20% to validation set
        x_train, x_val, y_train, y_val = caer.train_val_split(featureSet, labels, val_ratio=.2)

        #Saving on memorey to remove unused variables
        del train
        del featureSet
        del labels
        gc.collect()  //Collecting garbages

        #Variables for the neural network
        BATCH_SIZE = 32
        EPOCHS = 10

        #Create image data generator
        #This generator will ynthesize new images ccording to existing images to help introduce randomness into the neural network
        #It uses the keras library to build
        datagen = canaro.generators.imageDataGenerator()
        train_gen = datagen.flow(x_train, y_train, batch_size=BATCH_SIZE)

        #Creating the model
        model = canaro.models.createSimpsonsModel(IMG_SIZE=IMG_SIZE, channels=channels, output_dim=len(characters), loss='binary_crossentropy', decay=1e-6, learning_rate=0.001, momentum=0.9, nesterov=True)

        #Print summary of the model
        model.summary()

        #Create callback list - a learning rate scheduler
        #Control the learning rate at specific interval
        from tensorflow.keras.callbacks import LearningRateScheduler
        callbacks_list = [LearningRateScheduler(canaro.lr_schedule)]

        #Training the model
        training = model.fit(train_gen, steps_per_epoch=len(x_train)//BATCH_SIZE, epochs=EPOCHS, validation_date=(x_val, y_val), validation_steps=len(y_val)//BATCH_SIZE, callbacks = callbacks_list)

        #Use openCV to test model
            #So OpenCV will read the image at particular file path and then pass to the network and see what the model returns
            #Copy the image filepath of bart_simpson.jpg under the simpson_testset folder
        test_path = r'../input/the-simpsons-characters-dataset/kaggle_simpson_testset/kaggle_simpson_testset/bart_simpson_0.jpg'
        img = cv.imread(test_path)               
        plt.imshow(img, cmap='gray') //to show image
        plt.show()
            
        #Preparing the image to be the same size, shape and the dimension
        def prepare(img):
            img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
            img = cv.resize(img, IMG_SIZE)
            img = caer.reshape(img, IMG_SIZE, 1)
            return img
        
        #Run Predictions
        predictions = model.predict(prepare(img))
        
        #View Predictions
        predictions

        #Print actual cost
        print(characters[np.argmax(predictions[0])])













