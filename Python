Python 3 in Jupyter Notebook and VSCode
///////////////////////////////////////////////////////////////////////
CONTENTS
01. Structure, Variables and Data Types
02. Working with Strings and Numbers
03. Input from users
04. Basic Calculator
05. Lists, List Functions and Tuples
06. Functions
07. Return Statement
08. Statements  (If, While, For)
09. Comparison Statements
10. Better Calculator
11. Dictionaries
12. Guessing game with While loop
13. Exponent Power Function
14. 2D List and Nested Loops
15. Build Translator
16. Comments
17. Catching Errors, Exceptions, Try-Catch Block - Topic 30 for more
18. Reading Files
19. Writing Files
20. Modules and Pip
21. Classes & Objects
22. Multiple Choice Quiz
23. Object Functions
24. Inheritence
25. Interpreter
26. Sets
27. Collections (Counter, named Tuple, OrderDict, defaultdict, deque)
28. Iter Tools (Product, Permutations, Combinations, Accumulate, GroupBy, Infinite Iterators)
29. Lambda Functions
30. Logging - Error Messages (Ctd from Topic 17) - Logging to different levels

////////////////////////////////////////////////////////////////////////
01. Strings, Structure, Variables and Data Types
    //Just type in 
        print("Just type anything here")
        Shift+Enter in Jupyter   
        
    //Program
        character_name = "Name01"
        character_age = 35
        print("The name is " + character_name + " and he is " + character_age + " years old.")
        character_name = "Name02"    //Reassigning another value to the variable
        print("He has a brother named " + character_name + ".")
        
    //Data types
        string_name = "Tom"              //string
        int_num_double = 35.123123 //the variable will recognize if it is a float, num, int, or double unlike C language
        is_Male = True | False             //boolean

////////////////////////////////////////////////////////////////////////
02. Working with Strings and Numbers

    //Strings
        //Adding new line
            print ("First line \n Second Line")
            
        //Print out Quotation Mark
            print("Print this \"Quotation Mark\" ")
            
        //Print out variable
            variable = "Hello"
            print(variable)
            
        //Print on multiple lines
            variable = """Hello
            World"""
            print(variable)     //Output: Prints Hello on one line and World on another line
            
        //Print on single line
            variable = """Hello \
            World"""
            print(variable)     //Output: Prints Hello World on single line due to existence of "\" 
            
        //Concatenate
            variable = "Hello"
            print(variable + " there!")
            
        //Convert entire string to lower case
            variable = "HELLO"
            print(variable.lower())
            
        //Convert entire string to upper case
            variable = "hello"
            print(variable.upper())
            
        //Check strings in lower or upper and returns true or false
            variable = "hello"
            print(variable.isupper())   //Output: False
        
        //Converts to Uppercase and then check strings in lower or upper and returns true or false
            variable = "hello"
            print(variable.upper().isupper())   //Output: True
        
        //Length            
            variable = "hello"
            print(len(variable))   //Output: 5
            
        //Indexing - Grab Character    
            variable = "hello"
            print(variable[1])   //Output: e    //Negative numbers can also be used
        
        //Indexing - Find index number of a character  
            variable = "hello"
            print(variable.index("h"))   //Output: 0   
            
        //Check substring present in string
            variable = "hello world"
            print(variable.startswith('hello'))     //Output: True      //.endswith() = False
            
        //Count characters
            variable = "hello world"
            print(variable.count(o))     //Output: 2
            
        //Replace String  
            variable = "hello there"
            print(variable.replace("hello", "hi"))   //Output: hi there   
            
        //White Space
            variable = "       Hello       "
            variable = variable.strip()
            print(variable)         //Output: Hello     //Without white space
            
        //Splitting  string into list
            variable = "how,are,you,there"
            mylist = variable.split(",")    //Use space for space delimiter and comma if comma is the demilitier
            print(mylist)       //Output: ['how', 'are', 'you', 'there']
            new_string = ','.join(mylist)    //This combines back list into string
            print(new_string)   //Output: how,are,you,there
            
        //List to String
            mylist = ['a'] * 6
            print(variable)     //Output: ['a', 'a', 'a', 'a', 'a', 'a']
            
            mystring = ' '.join(mylist)
            print(mystring)     //Output:   a a a a a a
            
        //For Loop
            variable = "Hello"
            for variable2 in variable:
                print(variable2)    //Output: Types in character on every line
                
       //IF ELSE
            variable = "Hello"
            if 'e' in greeting:
                print('yes')
            else:
                print('no')
                
       //Find index
            variable = "Hello"
            print(variable.find('o'))   //Output: 4
            
        //Other Method - Slicing, Stepping, Reverse
            Rules similar. See Topic 5, Slicing, Stepping and Reverse Section.
            
        //Formatting - %
            var = "Tom"
            mystring = "The variable is %s" % var       //%s for string, "%d" for decimal, %f for float, %.2f for 2 decimal places
            print(mystring) //Output: The variable is Tom
            
        //Formatting - dot formatting
            var = 3.123415
            var2 = 6
            mystring = "The variable is {} and {}".format(var, var2)         //Add {:.2f} for 2 decimal places
            print(mystring)     //Output: The variable is 3.123415 and 6
            
        //Formatting - F String
            var = 3.123415
            var2 = 6
            mystring = f"The variable is {var} and {var2*2}" 
            print(mystring)     //Output: The variable is 3.123415 and 12
            
        //Timer
            from timeit import default_timer as timer
            mylist = ['a'] * 1000000
            print(mylist)
            
            start = timer()
            mystring = ' '.join(mylist)
            stop = timer()
            
            print(stop-start)       //Output: 0.016s

    //Numbers
        //Basic Arithemetics
            print(3 * 4 + 5)    //Output: 17
            print(3 * (4 + 5))    //Output: 27

        //Modulus (Remainder)
            print(10%3) //Output: 1

        //Convert number into String
            my_num = 23
            print(str(my_num) + "is my favourite number") //Output: 23 is my favourite number
            NOTE: You can't print out number within a sentence, calling the variable name is required
        
        //Absolute value
            my_num = -5
            print(abs(my_num)) //Output: 5
        
        //Exponent - See topic 13
            print(2**3) //2 to the power of 3 = 8
        
        //Squared
            print(pow(5, 2)) //Output: 25

        //Which number is higher (max, min)
            print(max(4, 6)) //Output: 6

        //Rounding numbers to whole numbers
            print(round(3.2123)) //Output: 3

        //Import other math functions
            from math import *

            //Floor - To erase the decimals
                print(floor(3.1234))    //Output: 3
                
            //Ceiling - To erase the decimals but add 1
                print(ceil(3.1234))    //Output: 4

            //Square Root
                print(sqrt(4)) //Output: 2

////////////////////////////////////////////////////////////////////////
03. Input from Users
    //Program
        name = input ("Enter your name: ")
        age = input("Enter your age: ")
        print ("Hello " + name + " and you are " + age + " years old!")

////////////////////////////////////////////////////////////////////////
04. Basic Calculator
    //Program
        num1 = input("Enter a number: ")
        num2 = input("Enter another number: ")
        result = int(num1) + int(num2)  //The "int" converts string to whole number. Use "float" for decimal
        print(result)

////////////////////////////////////////////////////////////////////////
05. Lists, List Functions and Tuples
    //Lists
        friends = ["Friend01", "Friend02", "Friend03", 20, "Friend04"]  //You can add number and strings in the list
        print(friends[0]) //Output: Friend01
        print(friends[-1]) //Output: 20
        print(friends[-2]) //Output: Friend03
        print(friends[1]) //Output: Friend02
        print(friends[1:]) //Output: Friend02, Friend03, 20 
        print(friends[1:3]) //Output: Friend02, Friend03 
        //Change list value
        friends[1] = "Mike"
        print(friends[1])   //Output: "Mike"

    //List Functions
        lucky_numbers = [4, 8, 15, 16, 23, 42]
        friends = ["Kevin", "Karen", "Jim", "Oscar", "Toby"]
        
        friends.extend(lucky_numbers)
        print(friends)  //Output: Concatenate friends with lucky_numbers

        friends.append("Creed")
        print(friends) //Output: Adds  Creed to the friends list

        friends.insert(1, "Kelly")
        print(friends) //Output: Inserts Kelly to the friends list between Kevin and Karen

        friends.remove("Jim")
        print(friends) //Output: Removes Jim from the friends list

        friends.clear()
        print(friends) //Output: Clear the entire friends list

        friends.pop()
        print(friends) //Output: Removes the last element from the list

        print(friends.index("Kevin")) //Output: Shows the index number of Kevin in the list
        print(friends.count("Jim")) //Output: Counts the number of occurrences of Jim in the list  

        friends.sort()
        print(friends) //Output: Alphabetical order

        friends.reverse()
        print(friends) //Output: Reverse sort the list
        
        friends2 = friends.copy()
        print(friends2) //Output: Copies friends list to friend2 list
        
        friends2 = list(friends)
        print(friends2) //Output: Copies friends list to friend2 list
        
        friends2 = friends[:]
        print(friends2) //Output: Copies friends list to friend2 list
        
        mylist = [0] * 5
        print(mylist) //Output: Creates a new list with 5 columns of 0
        
        concat_list = friends + mylist
        print(concat_list)  //Output: Like Append. Combines Friends and new list
        
    //Slicing by index
        a = friends[1:4]
        print(a)    //Output: "Friend02", "Friend03", 20 //index 1 to 3 excluding 4
        
        a = friends[:2]
        print(a)    //Output: "Friend01", "Friend02", "Friend03"
        
        a = friends[2:]
        print(a)    //Output: "Friend03", 20, "Friend04"
        
    //Stepping by index of 1
        mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        a = mylist[::1]
        print(a)    //Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]
        
    //Stepping by index of 2
        mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        a = mylist[::1]
        print(a)    //Output: [1, 3, 5, 7, 9]
        
    //Reverse Stepping by index
        mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        a = mylist[::-1]
        print(a)    //Output: [9, 8, 7, 6, 5, 4, 3, 2, 1]
        
    //Tuples - Similar to list, but tuples can't be changed or modified
        //Syntax to differentiate strings from tuples
        mytuple = ("String",)
        print(type(mytuple))    //Output: Tuple. Note the comma. 
        
        //Call by index
        coordinates = (4, 5, 6)
        print(coordinates[0])   //Output: 4
        
        //Call by index
        mytuple = tuple(["String1", 10, "String2"])
        item = mytuple[0]
        print(item) //Output: String1

        //Can also be used as list of tuples
        coordinates = [(1, 2), (3, 4), (5, 6)]
        print(coordinates)
        
        //Tuple function
        mytuple = tuple(["String1", 10, "String2"])
        print(mytuple)
        
        //Using For Loop
        mytuple = tuple(["String1", 10, "String2"])
        for i in mytuple:
            print(i)        //Output: List element in new line
            
        //Using If statement
        mytuple = tuple(["String1", 10, "String2"])
        if "String1" in mytuple:
            print("yes")
        else:
            print("no")     //Output: Yes
            
        //Get number of elements
        mytuple = tuple(["String1", 10, "String2"])
        print(len(mytuple))     //Output: 3
            
        //Count the tuples
        mytuple = ('a', 'b', 'b', 'b', 'c', 'd')
        print(mytuple.count('b'))   //Output: 3
        
        //Find index number
        mytuple = ('a', 'b', 'b', 'b', 'c', 'd')
        print(mytuple.index('d')) //Output: 5
        
        //Convert tuple into a list and vice versa for reverse
        mytuple = ('a', 'b', 'b', 'b', 'c', 'd')
        mylist = list(mytuple)
        print(mylist)  //Output: ['a', 'b', 'b', 'b', 'c', 'd']
        
        //Slicing with tuple - All slicing methods used in list are similar for tuples
        mytuple = ('a', 'b', 'b', 'b', 'c', 'd')
        slicedTuple = mytuple[2:5]
        print(slicedTuple)      //Output: b, b, c where index 5 is not included (similar to list)
        
        //Unpacking tuples
        mytuple = ("Max", 28, "City")
        name, age, city = mytuple
        print(name) //Output: Max
        
        //Unpacking tuples using stars
        mytuple = ("Max", 28, 29, 30, "Dog", "City")
        i1, *i2, i3 = mytuple
        print(i1)
        print(i2)   //Output: [28, 29, 39, Dog] //Note tuples converted to list
        print(i3)   //Output: City
        
        //List is larger than tuples
        import sys
        mylist = [0, 1, 2, 3, "String", True]
        mytuple = (0, 1, 2, 3, "String", True)
        print(sys.getsizeof(mylist), "bytes")
        print(sys.getsizeof(mytuple), "bytes")
        
        //Faster to process tuples than list
        import timeit
        print(timeit.timeit(stmt="[0, 1, 2, 3, 4, 5, 6]", number=1000000))
        print(timeit.timeit(stmt="(0, 1, 2, 3, 4, 5, 6)", number=1000000))
        
     //Using for, if, while statements
        friends = ["Friend01", "Friend02", "Friend03", 20, "Friend04"]
        
        //For Loop
            for hello in friends
                print(hello)    //Outputs elements on every line
            
        //If Statement - check if listElement is in the list
            if "Friend01" in friends:
                print("yes")
            else:
                print("no")
            
    //Check number of elements in the list
        print(len(friends))
        
    //List multiplication by itself
        mylist = [1, 2, 3, 4, 5, 6]
        b = [i*i for i in mylist]
        print(b)       //Output: [1, 4, 9, 16, 25, 36]

////////////////////////////////////////////////////////////////////////
06. Functions (Similar to Class)
    //Program Structure
        def sayHi():
            print("Hello")        
        sayHi()

    //Program with Parameters
        def sayHi(name, age):
            print("Hello " + name + " and you are " + str(age) + " years old")   
            //Remember that numbers can't share with string within a sentence therefore needs to convert to string hende str(age)
        sayHi("Mike", 23)   //Output: Hello Mike and you are 23 years old

////////////////////////////////////////////////////////////////////////
07. Return Statement
    //Program
        def cube(num):
            return num*num*num          //Without "return", it prints out none or null
            print("Hello")                        //All codes that are below the return keyword, it wont run (the return keyword breaks the function)
        result = cube(4)
        print(result)                             //Output: 64

////////////////////////////////////////////////////////////////////////
08. Statements (If, While, For)
    //If Statement
        is_male = True
        is_tall = True
        
        if is_male or is_tall:                                  //You can use "or", "and", 
            print("You are male and tall or both")   //If is_male is true, then print the string
        elif is_male and not(is_tall):                      //else if statement
            print("You are a short male")
        elif not(is_male) and is_tall:
            print("You are not male but is tall")
        else:
            print("You are either  not male or not tall")
            
    //While Loop
        i = 1
        while i <= 10:
            print(i)
            i += 1
        print("Loop complete")
        
    //For Loop #1
        for letter in "Hello":
            print(letter) //Output: Prints out every single letter in each line
    
    //For Loop #2
        friends = ["Bob", "Jim", "Karen"]
        for friend in friends:
            print(friend) //Output: Prints out each item in each line
            
    //For Loop #3
        for index in range(10):
            print(index) //Output: Prints out each number (0-9) in each line
            
    //For Loop #4
        for index in range(3, 10):
            print(index) //Output: Prints out each number (3-9) in each line
            
    //For Loop #5
        friends = ["Bob", "Jim", "Karen"]
        for index in range(len(friends)):
            print(friends[index]) //Output: Prints out each name in each line
           
    //For Loop #6
        for index in range(5):
            if index == 0:
                print("First Iteration") 
            else:
                print("Not First")  //Output: Prints out not first in each line    

////////////////////////////////////////////////////////////////////////
09. Comparison Statements
    //Program ('>=', '<=', '==', '!=', '>', '<')
        def max_num(num1, num2, num3):
            if num1 >= num2 and num1 >= num3:
                return num1
            elif num2 >= num1 and num2 >= num3:
                return num2
            else:
                return num3
        
        print(max_num(3, 4, 5)) //Output: 5

////////////////////////////////////////////////////////////////////////
10. Better Calculator
    //Program
        num1 = float(input("Enter first number: ")) //turn numbers into float
        op = input("Enter operator: ")
        num2 = float(input("Enter second number: "))

        if op == "+":
            print(num1 + num2)
        elif op == "-":
            print(num1 - num2)
        elif op == "/":
            print(num1 / num2)
        elif op == "*":
            print(num1 * num2)
        else:
            print("Invalid operator")

////////////////////////////////////////////////////////////////////////
11. Dictionaries
    //A collection data type and mutable
    //To make dictionary immutable(can't be modified like in tuples), you have to build frozenset
    //Program that converts shortform Month name to longform
        monthConversions = {
            "Jan": "January",
            "Feb": "February",
            "Mar": "March",
            "Apr": "April",
            "May": "May",
            "Jun": "Jun",
            "Jul": "July",
            "Aug": "August",
            "Sep": "September",
            10: "October",
            "Nov": "November",
            12: "December",
        }

        print(mothConversions["Nov"])   //Output: November
        print(mothConversions.get("Nov"))   //Output: November
        print(mothConversions.get("Lov"))   //Output: None
        print(mothConversions.get("Lov", "Not a valid key"))   //Output: Not a valid key
        print(mothConversions.get(12))   //Output: December
        
    //Basic 
        mydict = {"name": "Max", "age": 28, "city": "New York"}
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York'}
        
        mydict = dict(name="Max, age=28, city="New York")
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York'}

    //Accessing
        value = mydict["name"]
        print(value)        //Output: Max

    //Add value to the dictionary
        mydict = {"name": "Max", "age": 28, "city": "New York"}
        mydict["email"] = "max@xyz.com"         //To rewrite, just do the same with different email address
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York', 'email': 'max@xyz.com'}

    //Delete Dictionary element
        mydict = {"name": "Max", "age": 28, "city": "New York", "email": "max@xyz.com"}
        del mydict["email"]
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York'}

        mydict.pop("email")
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York'}    //Same as del

        mydict.popitem()
        print(mydict)       //Output: {'name': 'Max', 'age': 28, 'city': 'New York'}    //Removes the last item (email)

    //Check Key in dictionary
        mydict = {"name": "Max", "age": 28, "city": "New York", "email": "max@xyz.com"}
        if "name" in mydict:
            print(mydict["name"])       //Output: Max

    //Check with Try Except statement
        mydict = {"name": "Max", "age": 28, "city": "New York", "email": "max@xyz.com"}
        try:
            print(mydict["name"])
        except:
            print("Error")      //Output: Max

    //Using For Loop in dictionary
        mydict = {"name": "Max", "age": 28, "city": "New York", "email": "max@xyz.com"}
        for key in mydict:
        #for key in mydict.keys():   //Same as above
            print(key)      //Output: prints name, age, city and email in every line

        for value in mydict:
        #for value in mydict.values():   //Same as above
            print(value)      //Output: prints Max, 28, New York, max@xyz.com in every line

        for key, value in mydict.items()  
            print(key, value)      

    //Copying
        mydict = {"name": "Max", "age": 28, "city": "New York"}
        mydict_copy = mydict
        print(mydict_copy)      //Note that if you modify one, you'll also modify the other

    //Copy/Duplicate
        mydict = {"name": "Max", "age": 28, "city": "New York"}
        mydict_copy = mydict.copy()
        print(mydict_copy)      //Output: Copy of mydict

        mydict_copy = dict(mydict)
        print(mydict_copy)      //Output: Copy of mydict

    //Merging
        mydict1 = {"name": "Max", "age": 28, "city": "New York"}
        mydict2 = {"name": "Max", "age": 28, "email": "max@xyz.com"}
        mydict.update(mydict2)
        print(mydict)       //Output: 'name': 'Max', 'age': 28, 'email': 'max@xyz.com', 'city': 'New York'

    //Using Keys
        mydict = {3: 9, 6: 36, 9: 81}
        value = mydict[3]
        print(value)        //Output: 9

    //Use tuples    - Cant use this method on List
        mytuple = (5, 6)
        mydict = {mytuple: 11}
        print(mydict)   //Output: {(5, 6): 11}
        
////////////////////////////////////////////////////////////////////////
12. Guessing game with While Loop
    //Program
        secret_word = "secret"  //Secret word storage
        guess = ""
        guess_count = 0
        guess_limit = 3
        out_of_guesses = False
        
        while guess != secret_word and not(out_of_guesses):
            if guess_count < guess_limit:
                guess = input("Enter secret word: ")
                guess_count += 1
            else:
                out_of_guesses = True
        if out_of_guesses:
            print("You're out of guesses")
        else:
            print("You Win!")

////////////////////////////////////////////////////////////////////////
13. Exponent Function
    //Program
        def raiseToPower(base_num, pow_num):
            result = 1
            for index in range(pow_num):
                result = result * base_num
            return result
        print(raiseToPower(2, 3)) //Output: 8
    
////////////////////////////////////////////////////////////////////////
14. 2D Lists and Nested Loops
    //2D List Program
        number_grid = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [0]
        ]
        print(number_grid[0][0]) //Row, Column, Output: 1

    //Nested For Loop Program
        number_grid = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            [0]
        ]
        
        for row in number_grid:
            for col in row:
                print(col)      //Output: Prints out numbers in each line starting 1 to 9 to 0

////////////////////////////////////////////////////////////////////////
15. Build Translator
    //Program - Turn any vowels to letter G
        def translate(phrase):
            translation = ""
            for letter in phrase:
                if letter.lower() in "aeiou":
                    if letter.isupper():
                        translation = translation + "G"
                    else:
                        translation = translation + "g"
                else:
                    translation = translation + letter
            return translation

        print(translate(input("Enter a phrase: ")))
        
////////////////////////////////////////////////////////////////////////
16. Comments
    # Ignores a line
    
    '''
    Ignores multiple lines
    '''

////////////////////////////////////////////////////////////////////////
17. Catching Errors, Exceptions, Try-Catch Block
    //Program
        number = int(input("Enter a number: "))
            print(number)
    
    //if you enter a string, Error: invalid literal for int() base 10 and other jibberish will be thrown
    //And the entire program will breaks
    
    //Try Except Block
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except:
            print("Invalid Input")

    //Now if you enter a string instead of number, "Invalid Input" string will appear
    //Note that the value sting will also be tied up to this single error
    //Note that the Except block being used above is too broad

    //Catching Specific Errors
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except ZeroDivisionError:
            print("Divided by Zero")
        except ValueError:
            print("Invalid Input")

    //Store Errors as variables
        try:
            value = 10/0
            number = int(input("Enter a number: "))
                print(number)
        except ZeroDivisionError as error:
            print(err)
        except ValueError:
            print("Invalid Input")
            
    //Catch Exceptions
        try:
            a = 5/0 
        except Exception as e:
            print(e)        //Output: division by zero
            
    //Raise Exceptions
        x = -5
        if x < 0:
            raise Exception('x should be positive number')

    //Assert Statement
        x = -5 
        assert (x>=0), 'x is not positive
        
    //Catch ZeroDivision Error, TypeError, Else Clause (if no error occurs), and Finally Clause
        try:
            a = 5 /1 
            b = a + '10'
        except ZeroDivisionError as e:
            print(e)    //Output: Division by Zero
        except TypeError as e:
            print(e)        //Output: unsupported operand type(s) for +: 'float' and 'str'
        else:
            print('Everything is fine')
        finally:
            print('this message runs with or without errors')
            
    //Define own errors by subclassing the base exception class
        class ValueTooHighError(Exception):
            pass
        
        def test_value(x):
            if x > 100:
                raise ValueTooHighError('value too high')
        
        test_value(200) //Output: If Mmore than 100, value too high printed out

    //Define with cleaner error code
        class ValueTooHighError(Exception):
            pass
        
        def test_value(x):
            if x > 100:
                raise ValueTooHighError('value too high')
        
        try:
            test_value(200) 
        except ValueTooHighError as e:
            print(e)
    

    //Add error code
        class ValueTooHighError(Exception):
            pass
        
        class ValueTooSmall(Exception):
            def __init__(self, message, value):
                self.message = message
                self.value = value
        
        def test_value(x):
            if x > 100:
                raise ValueTooHighError('value too high')
            if x <5:
                raise ValueTooSmallError('value is too small', x)
        
        try:
            test_value(1) 
        except ValueTooHighError as e:          //Use test_value(200)
            print(e)
        except ValueTooSmallError as e:         //Use test_value(1)
            print(e.message, e.value)

////////////////////////////////////////////////////////////////////////
18. Reading Files
    //Command
        "r" = read
        "w" = write
        "a" = append, add
        "r+" = read and write
    //Reading Text Files
        open("text.txt", "r") //If the file resides within the same folder
    //Store the contents of the file into a variable
        variable_file = open("text.txt", "r")
    //Close the file
        variable_file.close()
    //Check if the file is readable, outputs true or false
        print(variable_file.readable())
        //Note: The "r" if replaced to "w", it can no longer be read, hence will output False 
    //Prints out all information in the file to the console
        print(variable_file.read())
    //Capture lines within the file and store into an array
        print(variable_file.readlines())
    //Read lines by index
        print(variable_file.readlines()[1])
    //Prints out individual line within the text file
        variable_file = open("text.txt", "r")
        for variable in variable_file.readlines():
            print(variable)
        variable_file.close()

////////////////////////////////////////////////////////////////////////
19. Writing Files
    //Command
        "r" = read
        "w" = write / create new file
        "a" = append, add
        "r+" = read and write
    //Adding line to file
        variable_file = open("text.txt", "a")
        variable_file.write("\nThis is the line to be added to the text file")  //Note the \n for the new line
        variable_file.close()                   
    //Rewrite the entire file
        variable_file = open("text.txt", "w")   //Note: The "w" will turn your file to blank and write the line below
        variable_file.write("\nThis is the line to be added to the text file") 
        variable_file.close()            

////////////////////////////////////////////////////////////////////////
20. Modules and Pip
    //Modules  - Using Internal Modules
        //Extracting modules from another python file        
        //File1.py
            import random            
            feet_in_mile = 5000
            meters_in_km = 1000
            band_members = ["Vocals", "Guitarist", "Bassists", "Drummer"]
            def get_file_ext(filename):
                return filename[filename.index(".") + 1:]                
            def roll_dice(num):
                return random.randint(1, num)

        //File2.py
            import File1.py            
            print(File1.roll_dice(10))  //Output: This will roll the dice

    //Modules - Using External Modules
        //https://docs.python.org/3/py-modindex.html - Python Module Index
        //Location of external module 
            External Libraries > Python #.#.# > Lib  > 
        //Program
            import tkinter

    //Using 3rd Party Modules (Pip)
        //Installing
            Open Command prompt
            pip --version //This checks the current version of your Pip
            pip install python-module-name
        //Location of installed module 
            External Libraries > Python #.#.# > Lib  > site-packages
        //After installing, you can access the modules like how you access tkinter module
        //Removing modules
            pip uninstall python-module-name

////////////////////////////////////////////////////////////////////////
21. Classes & Objects
    //student_file.py
        class studentClass:
            def __init__(self, name, major, gpa, probation):
                self.name = name
                self.major = major
                self.gpa = gpa
                self.probation = probation

    //main.py
        from student_file import studentClass        //From *file* import *class*
        student1 = studentClass("Jim", "Business", 3.1, False)
        print(student1.name)    //Output: Jim

        //When you create a student, you call the init function of the class
        //self.name is the object, the attribute of the student and it's assigned to the 'name' variable
        
////////////////////////////////////////////////////////////////////////
22. Multiple Choice Quiz
    //main.py
        from question_file import Question
        
        question_prompts = [
            "What color are apples?\n(a) Red/Green\n(b) Purple\n(c) Orange\n\n",
            "What color are bananas?\n(a) Teal\n(b) Magenta\n(c) Yellow\n\n",
            "What color are strawberries?\n(a) Yellow\n(b) Red\n(c) Blue\n\n"
        ]
        
        questions = [                                            //the correct answers
            Questions(question_prompts[0], "a")
            Questions(question_prompts[1], "c")
            Questions(question_prompts[2], "b")
        ]
        
        def run_test(questions):                            //ask to the user
            score = 0
            for question in questions:                       //do something with each question object in questions array
                answer = input(question.prompt)         //input text box for user
                if answer == question.answer:           //check the answer (user input) is similar to the questions that were asked
                    score += 1                                        //increments the score by 1
            print("You got " + str(score) + "/" + str(len(questions)) + "correct")
        
        run_test(questions)
        
    //question_file.py
        class Question:
            def __init__(self, prompt, answer):
                self.prompt = prompt
                self.answer = answer        

////////////////////////////////////////////////////////////////////////
23. Object Functions
    //main.py
        from Student import Student
        
        student1 = Student("Oscar", "Accounting", 3.1)
        student1 = Student("Jack", "Business", 3.2)
        
        print(student2.on_honor_roll()) //Output: True

    //Student.py
        class Student:
            def __init__(self, name, major, gpa):
                self.name = name
                self.major = major
                self.gpa = gpa

            def on_honor_roll(self):
                if self.gpa >= 3.5:
                    return True
                else:
                    return False

////////////////////////////////////////////////////////////////////////
24. Inheritence
    //main.py
        from Chef import Chef
        from ItalianChef_file import ItalianChef
        
        myChef = Chef()
        myChef.make_special_dish()  //Output: Prints outmake bbq ribs
        
        myItalianChef = ItalianChef()
        myItalianChef.make_chicken()    //Output: Prints out makes chicken
        myItalianChef.make_chicken_parmesan()  //Output: Prints out make chicken parmesan
        myItalianChef.make_special_dish() //Output: Prints out make Pizza

    //Chef.py
        class Chef:
            def make_chicken(self):
                print("The chef makes a chicken")
                
            def make_salad(self):
                print("The chef makes a chicken")

            def make_special_dish(self):
                print("The chef makes bbq ribs")

    //ItalianChef_file.py
        from Chef import Chef
        class ItalianChef(Chef) :            

            def make_special_dish(self):
                print("The chef makes a pizza")
            
            def make_chicken_parmesan(self):
                print("The chef makes chicken parmesan")

////////////////////////////////////////////////////////////////////////
25. Interpreter
    //Type python in command prompt
    //You will see ">>>" in command prompt


////////////////////////////////////////////////////////////////////////
26. Sets
    //Functions, String, Add, Remove, Discard, Clear, Pop, For, If, 
    //Union, Intersections, Differences, Update, Superset, Subset, Disjoint, 
    //Copying, Frozenset
    
    //Unordered, mutable like list and no duplicates
    
    //Basic
        myset = {1, 2, 3, 1, 2, 4}
        print(myset)        //Output: {1, 2, 3, 4}
    
    //Set Function
        myset = set([1, 2, 3])
        print(myset)        //Output: {1, 2, 3}

    //String - Find out how many characters in a word
        myset = set("Hello")
        print(myset)        //Output: {'o', 'l', 'H', 'e'}

    //Careful between sets and dictionaries
        myset = {}
        print(type(myset))  //Output : Class 'dict'
        
    //Create Empty Set
        myset = set()
        print(type(myset))  //Output : Class 'set'

    //Add elements
        myset = set()
        myset.add(1)
        myset.add(2)
        myset.add(3)
        print(myset)  //Output : {1, 2, 3}

    //Remove Elements  - Error if you try to remove non existing element
        myset = {1, 2, 3}
        myset.remove(3)
        print(myset)  //Output : {1, 2}

    //Discard Elements - No error if you try discarding non existing element
        myset = {1, 2, 3}
        myset.discard(3)
        print(myset)  //Output : {1, 2}

    //Empty out the set
        myset.clear()
        
    //Pop
        myset = {1, 2, 3}
        print(myset.pop())      //Output: 1 
        print(myset)            //Output : {2, 3}
        
    //For Loop
        myset = {1, 2, 3}
        for i in myset:
            print(i)        //Output: Prints out element in every line

    //IF ELSE Statement
        myset = {1, 2, 3}
        if 2 in myset:
            print("Yes")
        else:
            print("No")         //Output: Yes

    //Union 
        odds = {1, 3, 5, 7, 9}
        evens = {2, 4, 6, 8}
        primes = {2, 3, 5, 7}

        Union = odds.union(evens)
        print(Union)        //Output: {1,2,3,4,5,6,7,8,9}
   
    //Intersection (Commons)
        odds = {1, 3, 5, 7, 9}
        evens = {2, 4, 6, 8}
        primes = {2, 3, 5, 7}
    
        intersection = odds.intersection(primes)
        print(intersection)     //Output: {3, 5, 7} - Returns only the commons
        
    //Differences
        setA = {1,2,3,4,5,6,7,8,9}
        setB = {1,2,3,10,11,12}
        
        diff1 = setA.difference(setB)
        print(diff1)         //Output: {4,5,6,7,8,9}

        diff2 = setB.difference(setA)
        print(diff2)         //Output: {10,11,12}

        diff3 = setB.symmetric_difference(setA)     -- Combines differences of both sets into a new set
        print(diff3)         //Output: {4,5,6,7,8,9,10,11,12}

    //Update
        setA = {1,2,3,4,5,6,7,8,9}
        setB = {1,2,3,10,11,12}
        
        setA.update(setB)       --Combines and updates without duplication
        print(setA)         //Output: {1,2,3,4,5,6,7,8,9,10,11,12}

        setA.intersection_update(setB)       --Remove the differences between both sets and updates in setA
        print(setA)         //Output: {1,2,3}

        setA.difference_update(setB)       --Remove the similarirites between both sets and updates in setA
        print(setA)         //Output: {4,5,6,7,8,9}
        
        setA.symmetric_difference_update(setB)       --Remove the similarirites between both sets and combines the differences in setA
        print(setA)         //Output: {4,5,6,7,8,9,10,11,12}

    //Superset and Subset
        setA = {1,2,3,4,5,6}
        setB = {1,2,3}
        
        #subset - Are all elements in setA inside setB? Is setA the child of setB
        print(setA.issubset(setB))  //Output: False

        #subset - Are all elements in setB inside setA? Is setB the child of setA
        print(setB.issubset(setA))  //Output: True
        
        #superset - Are all elements in setB inside setA? Is setA the parent of setB
        print(setA.issuperset(setB))  //Output: True
        
        #superset - Are all elements in setA inside setB? Is setB the parent of setA
        print(setB.issuperset(setA))  //Output: False

    //Disjoint
        setA = {1,2,3,4,5,6}
        setB = {1,2,3}
        setC = {7,8}
        
        #Is setA and setB totally different?
        print(setA.isdisjoint(setB))     //Output: False
        
        #Is setA and setC totally different?
        print(setA.isdisjoint(setC))    //Output: True
        
    //Copying - Rules from List still applies
        setA = {1,2,3,4,5,6}
        setB = set(setA)
        print(setB)     //Output: {1,2,3,4,5,6}

    //Frozenset - Cannot change or modified after creation
        a = frozenset([1, 2, 3, 4])
        print(a)        //Output: frozenset([1, 2, 3, 4])

////////////////////////////////////////////////////////////////////////
27. Collections
    //Counter, named Tuple, OrderDict, defaultdict, deque
    
    //Counter is a container for elements as dictionary keys and count the dictionary values
    //Counter
        from collections import Counter
        variable = "aaaabbbccccc"
        
        mycounter = Counter(variable)
        
        print(mycounter)        //Output: Counter({'a':4, 'b':3, 'c':5})
        print(mycounter.items())    //Output: dict_items([('a':4), ('b':,3), ('c':5)])
        print(mycounter.keys())       //Output: dict_keys(['a', 'b', 'c'])
        print(mycounter.values)       //Output: dict_keys([4, 3, 5])
        
        print(mycounter.most_common(1))       //Output: [('c':5)] -- Where 1 is the most common
        print(mycounter.most_common(2))       //Output: [('c':5), ('a':4)] -- Where 1 is the most common
        
        print(mycounter.most_common(1)[0][0])       //Output: c
        print(mycounter.most_common(1)[0][1])       //Output: 5

        print(list(mycounter.elements()))       //Output: ['a','a','a','a','b','b','b','c','c','c','c','c']
    
    //Named Tuple is an object type similar to struct
    //Named Tuple
        from collections import namedtuple
        variablePoint01 = namedtuple('variablePoint01', 'x,y')
        pt = variablePoint01(1, -4)
        print(pt)       //Output:   variablePoint01(x=1, y=-4)
        print(pt.x, pt.y)       //Output:   1 -4

    //Ordered Dictionary is the same as Normal Dictionary only that it follows the time the elements being added
    //This is ONLY for the older version of Python as Python 3.7 and above can do the same thing with Normal Dictionary
    //Ordered  Dictionary
        from collections import OrderedDict
        ordered_dict = OrderedDict()        //Replace 'OrderedDict()' with '{}' for Normal Dictionary
        ordered_dict ['c'] = 3
        ordered_dict ['b'] = 2        
        ordered_dict ['a'] = 1
        ordered_dict ['d'] = 4
        print(ordered_dict)     //Output: OrderedDict([('c',3), ('b',2), ('a', 1), ('d',4)])

    //Default Dictionary has a default value of the keys if they are not being set
    //KeyError will be triggered if its Normal Dictionary being used
    //Default Dictionary
        from collections import defaultdict
        //Replace 'defaultdict()' with '{}' for normal dictionary
        varA = defaultdict(int)     //Default type. 'Int' to return '0', 'float' to return '0.0', 'list' to return '[]'
        varA['a'] = 1
        varA['b'] = 2
        print(varA)         //Output: defaultdict(<class 'int'>, {'a':1, 'b':2})
        print(varA['a'])         //Output: 1
        print(varA['c'])         //Output: 0    //By default, the value is 0

    //Deque is double ended. Can remove elements from both ends.
    //Deque
        from collections import deque
        varA = deque()
        varA.append(1)
        varA.append(2)
        varA.append(3)
        print(varA)     //Output: deque([1, 2, 3])
        
        #add elements to the left
        varA.appendleft(4)      //.appendright for right side
        print(varA)     //Output: deque([4, 1, 2, 3])
        
        #remove element on the left
        varA.popleft()          //.pop() to remove element on the right
        print(varA)     //Output: deque([1, 2, 3])
        
        #remove ALL elements
        varA.clear()
        print(varA)     //Output: deque([ ])

        #extend multiple elements at a time
        varA.extend([4,5,6])      //.extendleft([ ]) to extend on the left => 6,5,4,1,2,3   //Note the reverse order
        print(varA)     //Output: deque([1, 2, 3, 4, 5, 6])
        
        #rotate deque   - move right side element to the left, and negative numbers for opposite
        varA.rotate(1)
        print(varA)     //Output: deque([6, 1, 2, 3, 4, 5])
        
        varA.rotate(2)
        print(varA)     //Output: deque([5, 6, 1, 2, 3, 4])

////////////////////////////////////////////////////////////////////////
28. Iter Tools (Product, Permutations, Combinations, Accumulate, GroupBy, Infinite Iterators)
    //Iterators are data dtypes that can be used in for loops
    
    //Products
        from itertools import product
        a = [1,2]
        b = [3,4]
        prod = product(a,b)     //Reiterate the process twice -- product(a,b, repeat=2)
        print(list(prod))   //Output: [(1, 3), (1, 4), (2, 3), (2, 4)]

    //Permutations - Basic
        from itertools import permutations
        a = [1,2,3]
        perm = permutations(a)
        print(list(perm))       //Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]

    //Permutations - Sorting with Length
        from itertools import permutations
        a = [1,2,3]
        perm = permutations(a, 2)
        print(list(perm))       //Output: [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]

    //Combinations
        from itertools import combinations
        a = [1,2,3]
        comb = combinations(a, 2)
        print(list(comb))       //Output: [(1, 2), (1, 3), (2, 3)]

    //Combinations with replacement
        from itertools import combinations, combinations_with_replacement
        a = [1,2,3]
        comb_wr = combinations_with_replacement(a, 2)
        print(list(comb_wr))       //Output: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]

    //Accumulate - Returns by adding
        from itertools import accumulate
        a = [1,2,3,4]
        acc = accumulate(a)
        print(list(acc))       //Output: [1, 3, 6, 10]

    //Accumulate - Returns by multiplication
        from itertools import accumulate
        import operator
        a = [1,2,3,4]
        acc = accumulate(a, func=operator.mul)
        print(list(acc))       //Output: [1, 2, 6, 24]

    //Accumulate - Returns by max number
        from itertools import accumulate
        a = [1,2,5,3,4,6]
        acc = accumulate(a, func=max)
        print(list(acc))       //Output: [1, 2, 5, 5, 5, 6]     //(1,1=1) (1,2=2) (2,5=5) (5,3=5) (5,4=5) (5,6=6)
        //This finds the max number between a group of 2 numbers
        
    //Groupby
        //To group together if value is smaller than 4
        from itertools import groupby
        def smallerThan4Variable(x):
            return x < 4
        
        a = [1, 2, 3, 4, 5, 6]
        group_obj = groupby(a, key=smallerThan4Variable)
        print(group_obj)        //Output1: <itertools.groupby object at 0x000000000239A288>
        
        for key, value in group_obj:
            print(key, value)   //Output2: True<Output1> && False<Output1>
            print(key, list(value))     Output3: True [1, 2, 3] && False [4, 5, 6]
            
    //Groupby VS Lambda Functions - Only shorter code than Groupby
        from itertools import groupby        
        a = [1, 2, 3, 4, 5, 6]
        group_obj = groupby(a, key=lambda x: x<4)
        print(group_obj) 
        for key, value in group_obj:
            print(key, list(value))  //Output: Similar with GroupBy
            
    //Groupby VS Lambda Functions (Extensive) - Only shorter code than Groupby
        from itertools import groupby        
        
        persons = [{'name': 'Tim', 'age': 25}, {'name': 'Dan', 'age': 25}, {'name': 'Lisa', 'age': 28}, {'name': 'Claire', 'age': 23}]
        
        group_obj = groupby(a, key=lambda x: x['age'])
        print(group_obj) 
        for key, value in group_obj:
            print(key, list(value))  
        //Output: """
            25 [{'name': 'Tim', 'age': 25}, {'name': 'Dan', 'age': 25}]
            28 [{'name': 'Lisa', 'age': 28}]
            23 [{'name': 'Claire', 'age': 23}]
        """

    //Infinite Iterators
        from itertools import count, cycle, repeat

        #count function
        for i in count(10):         //10 is the start value
            print(i)        //Output: An infinite loop that starts at 10
            if i == 15:     //This only stops the loop cycle
                break

        #cycle
        a = [1,2,3]
        for i in cycle(a)
            print(i)        //Output: Cycles 123 123 123 continuously

        #repeat
        a = [1,2,3]
        for i in repeat(1)
            print(i)        //Output: Cycles 1111111 continuously
            
        #repeat 4 times
        a = [1,2,3]
        for i in repeat(1, 4)   //4 means repeat 4 times
            print(i)        //Output: 1111

////////////////////////////////////////////////////////////////////////
29. Lambda Functions
    //A small one line anonymous function defined without a name
    //Lambda argument: expression
    //Creates a function with an argument and this will evaluate the expression to return a result
    
    //Basic
        var10 = lambda varX: varX + 10
        print(var10(5))     //Output: 15 (If varX = 5, then 5+10 = 15)

    //The basic is similar to:
        def var10_func(var20):
            return var20 + 10
        print(var10_func(5))        //Output: 15

    //Multiplication
        varA = lambda varX, varY: varX * varY   
        print(varA(5,3))        //Output: 15

    //Function that take in another function
        //Sorted - Without Lambda
            varA = [(1,2),(15,1),(5,-1),(10,4)]
            varA_sorted = sorted(varA)
            
            print(varA)
            print(varA_sorted)  
                //Outputs:
                //[(1, 2), (15, 1), (5, -1), (10, 4)]      -- varA
                //[(1, 2), (5, -1), (10, 4), (15, 1)]      -- varA_sorted

        //Sorted - Another method without Lambda
            varA = [(1,2),(15,1),(5,-1),(10,4)]
            def sort_by_A(x):
                return x[0]                 //(0 = x-index), (1=y-index)
            varA_sorted = sorted(varA, key=sort_by_A)  
            
            print(varA)
            print(varA_sorted)  
                //Outputs:
                //[(1, 2), (15, 1), (5, -1), (10, 4)]      -- varA
                //[(1, 2), (5, -1), (10, 4), (15, 1)]      -- varA_sorted
                        
        //Sorted - With Lambda by index 0
            varA = [(1,2),(15,1),(5,-1),(10,4)]
            varA_sorted = sorted(varA, key=lambda varX: varX[0])  //(0 = x-index), (1=y-index)
            
            print(varA)
            print(varA_sorted)  
                //Outputs:
                //[(1, 2), (15, 1), (5, -1), (10, 4)]      -- varA
                //[(1, 2), (5, -1), (10, 4), (15, 1)]      -- varA_sorted

        //Sorted - With Lambda by sum of index 0 and index 1
            varA = [(1,2),(15,1),(5,-1),(10,4)]
            varA_sorted = sorted(varA, key=lambda varX: varX[0] + varX[1])  //(0 = x-index), (1=y-index)
            
            print(varA)
            print(varA_sorted)  
                //Outputs:
                //[(1, 2), (15, 1), (5, -1), (10, 4)]      -- varA
                //[(1, 2), (5, -1), (10, 4), (15, 1)]      -- varA_sorted

    //Map Function
        #map(func, seq)
        //Multiply by 2 without Lambda bu twith List Comprehension
        a = [1, 2, 3, 4, 5]
        b =[x*2 for x in a]
        print(b)        
        
        //Multiply by 2 with Lambda function
        a = [1, 2, 3, 4, 5]
        b = map(lambda x: x*2, a)
        print(b)

    //Filter Function
        #filter(func, seq)
        #With
        a = [1, 2, 3, 4, 5, 6]
        b = filter(lambda x: x%2==0, a)
        print(list(b))      //Output: 2, 4, 6
        
        #Without
        a = [1, 2, 3, 4, 5]
        c = [x for x in a if x%2==0]
        print(c)

    //Reduce
        from functools import reduce
        a = [1, 2, 3, 4]
        product_a = reduce(labda x,y: x*y, a)
        print(product_a) //Output: 24  (Multiply all the numbers in the list)

////////////////////////////////////////////////////////////////////////
30. Logging - Error Messages (Ctd from Topic 17) - Logging to different levels

        //Basic Only Warning, Error and critical gets printed out
            import logging
            logging.debug('This is a debug message')
            logging.info('This is an info message')
            logging.warning('This is a warning message')
            logging.error('This is an error message')
            logging.critical('This is a critical message')

        //Printing all levels - Root Logger
                #https://docs.python.org/3/library/logging.html#logging.basicConfig
                #https://docs.python.org/3/library/logging.html#logercord-attributes
                #https://docs.python.org/3/library/logging.html#time.strftime
            import logging
            logging.basicConfig(level=logging.DEBUG, formt='%(asctime)s - %(name)s - %(levelname)s - %(message)s, datefmt='%m/%d/%Y %H:%M:%S')
            logging.debug('This is a debug message')
            logging.info('This is an info message')
            logging.warning('This is a warning message')
            logging.error('This is an error message')
            logging.critical('This is a critical message')

        //Creating your own logger
            //main.py
                import logging
                logging.basicConfig(level=logging.DEBUG, formt='%(asctime)s - %(name)s - %(levelname)s - %(message)s, datefmt='%m/%d/%Y %H:%M:%S')
                import logger
                
            //logger.py
                import logging
                logger = logging.getlogger(__name__)    //Where __name__ is a global variable
                logger.info('hello from logger')






