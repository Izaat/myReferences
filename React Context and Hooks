///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
React Context and Hooks
https://www.github.com/iamshaunjp/react-context-hooks
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Context API and Hooks
02. Context and Provider
03. Accessing Context Method 1
04. Accessing Context Method 2
05. Updating Context Data
06. Creating Multiple Contexts
07. Consuming Multiple Contexts
08. Hooks
09. useState Hook
10. useState Forms
11. useEffect Hook
12. Hooks with Context
13. Multiple Contexts with Hooks
14. Creating Context with Functional Components
15. Reading List - App Project
16. Reducers, Actions and State
17. Adding a Reducer
18. Adding Local Storage

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Context API and Hooks
    
    Context API: Clean and Easy way to share state between components without having to pass props down all the time
    Hooks: Allows to do things inside functional components that can normally be done in class components (ie useStates, lifeCycleMethod)
    When being used together, Redux-like state management system can be built (Similar like how Redux behaves but without installation)
    Read: https://reactjs.org/docs/context.html
    
    Creating a react App project
        In VSCode Terminal, enter a desired folder (ie Folder ABCD)
        Type in "npx create-react-app contextapp"
        This will create a project in Folder ABCD (E:\ABCD\contextapp\)
        Enter "contextapp" folder and type in "npm start" to start
        This will open a default react app in browser
        
        Remove 
            ../src/App.test.js, 
            ../src/logo.svg, 
            ../src/App.css
        App.js
            Remove imports (ie logo and App.css)
            Remove header class
        Add "component" folder in src
            Add files
                ../src/component/Navbar.js
                ../src/component/BookList.js
    
    Navbar.js
        import React, {Component} from 'react';
        
        class Navbar extends Component {
            render() {
                return(
                    <nav>
                        <h1>Context App</h1>
                        <ul>
                            <li>Home</li>
                            <li>About</li>
                            <li>Contact</li>
                        </ul>
                    </nav>
                );
            }
        }
        export default Navbar;

    App.js
        import React from 'react';
        import Navbar from './components/Navbar';
        import BookList from './components/BookList';
        
        function App() {
            return(
                <div className="App">
                    <Navbar />
                    <BookList />
                </div>
            );
        }
        export default App;

    BookList.js
        import React, {Component} from 'react';
        
        class BookList extends Component {
            render() {
                return (
                    <div className='book-list'>
                        <ul>
                            <li>Book 1</li>
                            <li>Book 2</li>
                            <li>Book 3</li>
                        </ul>
                    </div>
                );    
            }
        }
        export default BookList;

    index.css 
        body {
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
                "Ubuntu", "Cantarell", "Fire Sans", "Droid Sans", "Helvetica Neue",
                sans-serif;
            -webkit-font-smotthing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .App {
            max-width: 400px;
            margin: 30px auto;
            text-align: center;
        }
        nav{
            padding: 5px;
        }
        nav ul {
            padding: 0;
        }
        nav ul li {
            display: inline-block;
            margin: 0 10px;
        }
        .book-list {
            padding: 20px;
            margin-bottom: 20px;
        }
        .book-list ul{
            padding: 0;
            list-style-type: none;
        }
        .book-list li {
            padding: 10px;
            margin: 10px auto;
            border-radius: 10px;            
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Context and Provider
    Read 11 Points
    
    Files (Existing)
        src/component/Navbar.js
        src/component/BookList.js    
        src/App.js
        src/index.css

    Add another folder in src and name it "contexts"
    Add file in this folder and name it ThemeContext.js
        src/contexts/ThemeContext.js

    ThemeContext.js
        import React, {createContext, Component} from 'react';
        
        export const ThemeContext = createContext();   //01. Creates a context and store into "ThemeContext"
        
        //02. Create another class component (contains state) and the state will be shared between different components
            //Type in "cc" to for empty class component
                //class extends Component {
                //    state = {}
                //    render() {
                //        return();
                //    }
                //}
                //export default ;

        class ThemeContextProvider extends Component {
            state = {
                isLightTheme: true,                                       //03. Using LightTheme or not
                //light: {syntax: '#555'}                                 //04. Dark Grey color for texts
                //light: {syntax: '#555', ui: '#ddd'}                     //05. Light grey buttons    
                light: {syntax: '#555', ui: '#ddd', bg: '#eee'},          //06. Light grey background
                dark: {syntax: '#ddd', ui: '#333', bg: '#555'}
            }
            render() {
                //return(); 
                return(                                                   //07. Creates JSX wrapper to be pushed to App.js
                    //<ThemeContext.Provider>                       
                    <ThemeContext.Provider value={{...this.state}}>       //08. Creates value property that takes data from the state
                        {this.props.children}                             //11. This refers the Navbar and Booklist in App.js
                    </ThemeContext.Provider>
                );
            }
        }
        export default ThemeContextProvider;

    App.js
        import React from 'react';
        import Navbar from './components/Navbar';
        import BookList from './components/BookList';
        import ThemeContextProvider from './contexts/ThemeContext';        //09. import to App.js
        
        function App() {
            return(
                <div className="App">
                    //<Navbar />
                    //<BookList />
                    <ThemeContextProvider>                                 //10. Adds the wrapper. Navbar and BookList will be attached to props
                        <Navbar />
                        <BookList />
                    </ThemeContextProvider>
                </div>
            );
        }
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Accessing Context Method 1
    
    ContextType enables ThemeContext.js to access data in Navbar.js via App.js
    This can only be used in class component and not functional component
    
    Files (Existing)
        src/component/Navbar.js
        src/component/BookList.js    
        src/App.js (From Topic 2)
        src/index.css
        src/contexts/ThemeContext.js (From Topic 2)

    Navbar.js
        import React, {Component} from 'react';
        import {ThemeContext} from '../contexts/ThemeContext';                  //01. Imports ThemeContext.js
        
        class Navbar extends Component {
            static contextType = ThemeContext;                                  //02. Adds component and store as contextType
            render() {
                console.log(this.context);                                      //03. This will show "...this.state" from ThemeContext.js (ie "dark", "isLightTheme", "light")
                //const {}                                                      //04. The curly braces creates multiple variables
                const {isLightTheme, light, dark} = this.context;               //05. Extracting properties from this.context and store into individual variable names created
                //const theme                                                   //06. This creates another variable "theme" as the active theme
                const theme = isLightTheme ? light : dark;                      //07. If isLightTheme is true, then set "theme" as light. If false, set "theme" as dark (object ? true : false)
                return(
                    //<nav>
                    <nav style={{background: theme.ui, color: theme.syntax}}>   //08. Sets "theme" to the viewport
                        <h1>Context App</h1>
                        <ul>
                            <li>Home</li>
                            <li>About</li>
                            <li>Contact</li>
                        </ul>
                    </nav>
                );
            }
        }
        export default Navbar;

    BookList.js
        import React, {Component} from 'react';
        import {ThemeContext} from '../contexts/ThemeContext';         //09. Imports ThemeContext.js

        class BookList extends Component {
            static contextType = ThemeContext;                         //10. Adds component and store as contextType
            render() {
                const {isLightTheme, light, dark} = this.context;      //11. See point 05
                const theme = isLightTheme ? light : dark;             //12. See point 07
                return (
                    //<div className='book-list'>
                    <div className='book-list' style={{background: theme.bg, color: theme.syntax}}> //13.See point 08
                        <ul>
                            //<li>Book 1</li>
                            //<li>Book 2</li>
                            //<li>Book 3</li>
                            <li style={{background: theme.ui}}>Book 1</li>
                            <li style={{background: theme.ui}}>Book 2</li>
                            <li style={{background: theme.ui}}>Book 3</li>
                        </ul>
                    </div>
                );    
            }
        }
        export default BookList;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Accessing Context Method 2
    
    Using ThemeContext.Consumer
    This method can consume multiple contexts. Method 1 can only consume single context
    
    Files (Existing)
        src/component/Navbar.js (From Topic 2)
        src/component/BookList.js (From Topic 3)
        src/App.js (From Topic 2)
        src/index.css (From topic 1)
        src/contexts/ThemeContext.js (From Topic 2)

    Navbar.js
        import React, {Component} from 'react';
        import {ThemeContext} from '../contexts/ThemeContext';                     //01. Imports ThemeContext.js
        
        class Navbar extends Component {
            render() {
                return(
                    //<nav style={{background: theme.ui, color: theme.syntax}}>   //02. Sets "theme" to the viewport
                    //    <h1>Context App</h1>
                    //    <ul>
                    //        <li>Home</li>
                    //        <li>About</li>
                    //        <li>Contact</li>
                    //    </ul>
                    //</nav>
                    
                    //<ThemeContext.Consumer></ThemeContext.Consumer>                                    //03. Adds ThemeContext.Consumer
                    //<ThemeContext.Consumer>{(context) => {return( *JSX* )}}</ThemeContext.Consumer>    //04. The full Consumer
                    <ThemeContext.Consumer>{(context) => {

                        //const {}                                                       //05. The curly braces creates multiple variables
                        const {isLightTheme, light, dark} = context;                     //06. Extracting properties from "context" instead of "this.context" (Topic 3) and store into individual variable names created
                        //const theme                                                    //07. This creates another variable "theme" as the active theme
                        const theme = isLightTheme ? light : dark;                       //08. If isLightTheme is true, then set "theme" as light. If false, set "theme" as dark (object ? true : false)

                        return(

                            <nav style={{background: theme.ui, color: theme.syntax}}> 
                                <h1>Context App</h1>
                                <ul>
                                    <li>Home</li>
                                    <li>About</li>
                                    <li>Contact</li>
                                </ul>
                            </nav> 

                        )
                    }}
                    </ThemeContext.Consumer>
                );
            }
        }
        export default Navbar;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Updating Context Data
    
    Read 11 points
    Using ThemeToggle.js to change the state in ThemeContext.js
        ../src/component/ThemeToggle.js
    
    Files (Existing)
        src/component/Navbar.js (From Topic 4)
        src/component/BookList.js (From Topic 3)
        src/App.js (From Topic 2)
        src/index.css (From topic 1)
        src/contexts/ThemeContext.js (From Topic 2)

    ThemeToggle.js                                                             //01. Create the ThemeToggle file
        import React, {Component} from 'react';
        import {ThemeContext} from '../contexts/ThemeContext';                 //06. import ThemeContext for contextType
        
        class ThemeToggle extends Component {
            static contextType = ThemeContext                                  //07. Add contextType and link this to ThemeContext
            render () {
                const {toggleTheme} = this.context;                            //08. Destructuring the context
                return (
                    //<button onClick={}>Toggle the theme</button>             //02. Adds the toggle button
                    <button onClick={toggleTheme}>Toggle the theme</button>    //09. Adds the event
                );
            }
        }
        export default ThemeToggle;

    ThemeContext.js
        import React, {createContext, Component} from 'react';
        
        export const ThemeContext = createContext();  

        class ThemeContextProvider extends Component {
            state = {
                isLightTheme: true,           
                light: {syntax: '#555', ui: '#ddd', bg: '#eee'},   
                dark: {syntax: '#ddd', ui: '#333', bg: '#555'}
            }
            
            //toggleTheme = () => {}                                                                 //03. Adds the toggle state changer
            toggleTheme = () => {
                this.setState({isLightTheme: !this.state.isLightTheme});
            }    
            
            render() {
                return(                                 
                    //<ThemeContext.Provider value={{...this.state}}> 
                    //<ThemeContext.Provider value={{...this.state, toggleTheme}}>                   //04. Adds toggleTheme variable (can be of another name)
                    <ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}>   //05. Sets to the toggleTheme state changer as defined above
                        {this.props.children}       
                    </ThemeContext.Provider>
                );
            }
        }
        export default ThemeContextProvider;

    App.js
        import React from 'react';
        import Navbar from './components/Navbar';
        import BookList from './components/BookList';
        import ThemeContextProvider from './contexts/ThemeContext';  
        import ThemeToggle from './components/ThemeToggle';                     //10. Imports ThemeToggle
        
        function App() {
            return(
                <div className="App">
                    <ThemeContextProvider>   
                        <Navbar />
                        <BookList />
                        <ThemeToggle />                                        //11. Add ThemeToggle to be rendered by App.js
                    </ThemeContextProvider>
                </div>
            );
        }
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Creating Multiple Contexts
    
    Create authentication context file
        src/contexts/AuthContext.js
        The base program is similar to ThemeContext.js
    
    Files (Existing)
        src/component/Navbar.js (From Topic 4)
        src/component/BookList.js (From Topic 3)
        src/component/ThemeToggle.js (From Topic 5)
        src/App.js (From Topic 5)
        src/index.css (From topic 1)
        src/contexts/ThemeContext.js (From Topic 5)

    AuthContext.js
        import React, {createContext, Component} from 'react';
        
        export const AuthContext = createContext();  

        class AuthContextProvider extends Component {
            state = {
                isAuthenticated: false
            } 
            
           toggleAuth = () => {
                this.setState({isAuthenticated: !this.state.isAuthenticated});
           } 
           
            render() {
                return(                                 
                    <AuthContext.Provider value={{...this.state, toggleAuth: this.toggleAuth}}>
                        {this.props.children}       
                    </AuthContext.Provider>
                );
            }
        }
        export default AuthContextProvider;        

    App.js
        import React from 'react';
        import Navbar from './components/Navbar';
        import BookList from './components/BookList';
        import ThemeContextProvider from './contexts/ThemeContext';  
        import ThemeToggle from './components/ThemeToggle'; 
        import AuthContextProvider from './contexts/AuthContext';        //01. Imports AuthContext.js
        
        function App() {
            return(
                <div className="App">
                    //<ThemeContextProvider>   
                    //    <Navbar />
                    //    <BookList />
                    //    <ThemeToggle />      
                    //</ThemeContextProvider>
                    
                    <ThemeContextProvider>   
                        <AuthContextProvider>                             //02. Wraps with AuthContextProvider. This can also wraps up ThemeContextProvider
                            <Navbar />
                            <BookList />
                            <ThemeToggle />      
                        </AuthContextProvider>
                    </ThemeContextProvider>
                </div>
            );
        }
        export default App;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Consuming Multiple Contexts
    
    Read 9 points
    Using 2 properties "contextType" in a single component file
        Can't have 2 "contextType" within a file, the contextTypes will conflict with each other
        First method is to use 1 contextType and the other will be consumer tag (i.e <ThemeContext.Consumer>)
        Second method is to use 2 consumer tags (i.e <ThemeContext.Consumer>)
    
    Files (Existing)
        src/component/Navbar.js (From Topic 4)
        src/component/BookList.js (From Topic 3)
        src/component/ThemeToggle.js (From Topic 5)
        src/App.js (From Topic 6)
        src/index.css (From Topic 1)
        src/contexts/ThemeContext.js (From Topic 5)
        src/contexts/AuthContext.js (From Topic 6)

    Navbar.js
        import React, {Component} from 'react';
        import {ThemeContext} from '../contexts/ThemeContext';  
        import (AuthContext) from '../contexts/AuthContext';                          //01. Imports AuthContext
        
        class Navbar extends Component {
            render() {
                return(
                    //<AuthContext.Consumer>                                          //02. Wraps up "ThemeContext.Consumer" with "AuthContext.Consumer"
                    //<AuthContext.Consumer>{(authContext) => ()}                     //05. Add a function to return JSX which is all of ThemeContext.Consumer tag
                    //    //<ThemeContext.Consumer>{(context) => {
                    //    <ThemeContext.Consumer>{(themeContext) => {                 //03. Rename the context from generic "context" to "themeContext"
                    //        const {isLightTheme, light, dark} = themeContext;       //04. Rename the context from generic "context" to "themeContext"
                    //        const theme = isLightTheme ? light : dark; 
                    //        return(
                    //            <nav style={{background: theme.ui, color: theme.syntax}}> 
                    //                <h1>Context App</h1>
                    //                <ul>
                    //                    <li>Home</li>
                    //                    <li>About</li>
                    //                    <li>Contact</li>
                    //                </ul>
                    //            </nav> 
                    //        )
                    //    }}</ThemeContext.Consumer>
                    //</AuthContext.Consumer>
                    
                    <AuthContext.Consumer>{(authContext) => (                          //06. All ThemeContext.Consumer tag inside of the function
                        <ThemeContext.Consumer>{(themeContext) => { 
                            const {isAuthenticated, toggleAuth} = authContext;         //07. Refer to AuthContext.js for the properties
                            const {isLightTheme, light, dark} = themeContext;   
                            const theme = isLightTheme ? light : dark; 
                            return(
                                <nav style={{background: theme.ui, color: theme.syntax}}> 
                                    <h1>Context App</h1>
                                    <div onClick={toggleAuth}>                         //09. Enables a button to toggle between Logged in or logged out
                                        {isAuthenticated ? 'LoggedIn' : 'LoggedOut'}   //08. Destructure the authentication to toggle between true (Logged in) or false (Logged out)
                                    </div>
                                    <ul>
                                        <li>Home</li>
                                        <li>About</li>
                                        <li>Contact</li>
                                    </ul>
                                </nav> 
                            )
                        }}</ThemeContext.Consumer>
                    )}</AuthContext.Consumer>                    
                );
            }
        }
        export default Navbar;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Hooks

    Files (Existing)
        src/component/Navbar.js (From Topic 7)
        src/component/BookList.js (From Topic 3)
        src/component/ThemeToggle.js (From Topic 5)
        src/App.js (From Topic 6)
        src/index.css (From Topic 1)
        src/contexts/ThemeContext.js (From Topic 5)
        src/contexts/AuthContext.js (From Topic 6)























