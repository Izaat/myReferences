Industrial Robot Programming
ABB Robot Studio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01 - Start
02 - Coordinate Systems
03 - Motion Types
04 - Tool Frames
05 - Work Objects
06 - Configurations and Programming
07 - Robot Configuration - Determine robot motions on every path, ConfL, ConfJ, SingArea
08 - Using Work Objects

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01 Start
    New 
        Solution with Station and Robot Controller
            RobotModel: IRB4600 40kg
    Menu > Controller > 
        Backup              //backup files
        Restart             //restart controller
        Input/Outputs   //add input and outputs
        FlexPendant      //Controls the pendant from RStudio
        Control Panel   //Controlling the power, estop, manual/auto buttons of IRC from the RStudio
    Menu > RAPID
        Synchronize > Sync to RAPID     //Syncing to text based program language
        Synchronize > Sync to Station    //Syncing to the real robot
        Start   //Start program
        Run Mode //Selecting Single Cycle or Continuous
        Program     //Load, save, rename, save to controller, load from controller
        Apply          //Updates the controller with the changes made on RStudio

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02 Coordinate Systems 
    Set to Local coordinate reference
        Menu > Target > Reference > Local
            Local: This will will follow the end of arm coordinate system
            World: This follows the Base of the robot
            ABB = wobj
            Fanuc = userframe
            X, Y, Z, Pitch (A), Roll (B), Yaw (C) 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03 Motion Types 
    Setting up Paths
        Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > Workobjects & Targets > wobj0 > wobj0_of > Target_10
            Duplicate Target_10 (CopyPaste)
            In Toolbar, find Freehand Tools, select the Linear icon (linear arrow and a mouse cursor)
            Move the 3D orientation for each Targetfile
            Repeat the duplicate-move-rename process. Rename them to 10, 20, 30, ...
            Highlight all the path files you created            
            RightClick > Add New Path
            New sub tree will be added to Paths & Procedures Tree
                Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > Paths & Procedures > Path_# > 
                    MoveL--- Target10
                    MoveL--- Target20
                    MoveL--- Target30
        
    Menu at the bottom of the screen.
        MoveL | v1000 | z100 | tool0 | WObj:=wobj0
        MoveL > 
            MoveJ: Joint (Uses sperical tolerance - not accurate)
            MoveL: Linear (Tighter constraints)
            MoveAbsJ:Joint Absolute
            MoveExtJ: 
        v1000 > Velocity/Speed (m/s)
            Use v30 for real robot
        z100 > Zone 
            The accuracy of the endpoint //Unit in mm diameter (sphere), the smaller the number the tighter the tolerance
            The shortcut path the robot takes (It will always take the shortcut when it passes through a point )

    To run the robot
        RightClick on Path_#
            Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > Paths & Procedures > Path_#
            Select Sychronize to RAPID
            Once completed, open RAPID Tab in the Main Menu
            
        Naming the module (If error "RAPID symbol 'main' in T_ROB not found" appears )
            RightClick on T_ROB
            Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > New Module
                Input  name to Module Name (Name it as "main")
                The 'main' file will appear under Program modules tree
                    DoubleClick to open the file and input the following
                    
                    MODULE mainProg
                        PROC main()
                            Path_#;
                        ENDPROC                        
                    ENDMODULE
                
                Head over to ToolBarMenu > Controller Section 
                    Click on Apply Icon
        
        Open RAPID Tab
            Main Menu > RAPID > Solution Panel > IRB_Model > RAPID > T_ROB1 > Module > Path_#
                DoubleClick on Path_#
                Code willl show up in the main screen                

        Position data
            pos trans = translation
            orient rot = orientation
            confdata robconf = robot's configuration
            extjoint extax = external joints if you have extra axes
        
        In main screen, open the View1 tab
            Click on play button to RUN

    Adjusting the orientation of the robot in case "Joint out of range" error appears
        Highlight the Target file in wobj# tree,
            Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > Workobjects & Targets > wobj0 > wobj0_of > Target_10
            RightClick > ModifyTarget > Rotate
                "Rotate: Target_#" will appear
                Under Rotation (deg)
                    Add (-5) value and click apply.
                    Click apply few times to move the robot to correction position
        RightClick on Target file in wobj# tree again
            Solutions Panel > Paths & Target Tab > Solution > IRB > T_ROB > Workobjects & Targets > wobj0 > wobj0_of > Target_10
                Select "View Robot at Target"

        Main Menu Toolbar > Synchronize > Synchronize to Station
            Check all boxes and hit OK

        Turning off the program Pointers
            Main Menu ToolBar > Test and Debug > Uncheck Follow Program Pointer

        Return to View# Tab and Hit Play 

    Actual Robot Path
        The robot will move From Target10, through Target20, ends at Target30 without returning. It will return to Target10 without passing through Target20
        To make the robot returns to Target10 in 1 cycle,
            RAPID > T_ROB > Module1 > Path_#
                Under PROC Function, copy and paste Target10 path below Target30
            RAPID TAB > Toolbar Menu > Controller Section > Apply
        Hit Play in View Tab again to watch the updated path
    
    Changing Linear Motion to Joint Motion 
        Just replace the MoveL to MoveJ in the programming section and Click on Apply in RAPID > Toolbar > Controller Section
        
    SingleCycle / ContinuousCycle
        RAPID Tab > Toolbar Menu > Controller > Run Mode > Single Cycle / Continuous
        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04 Tool Frames
    //Make new part/tool
        Main Menu > Modelling > Solid > Pyramid
            Reference: World
            Base Center Point: 0, 0, 0
            Orientation: 0, 0, 0
            Center to Corner Point: 150mm
            Center to Side: This is automatically calculated with Center to Corner Point
            Height: 300mm
            Number of Sides: 40
            * This will create a pyramid directly at the base of the robot arm
        On the left hand side panel, under the modelling tab, Components>Part# will appear
            Rename this to 'Tool01'
            Right Click > Attach To > IRB
            Update: Yes
            The pyramid will attach itself to the end of arm after selecting 'Yes'
    //Creating tool Data to make robot coordinate its path according to the tool
        Main Menu > Home Tab > Other > Create Tool Data
        On the left hand side panel, Create tool data tab will appear.
            MiscData > 
                Name : PyramidToolData
                Robot holds tool : True
            ToolFrame > 
                Position: X:0, Y:0, Z:300   //Offset value of tooltip to the end of arm flange, 
                                                        //You can get the value by hovering mouse over the tip and click on the sphere when it appears
                Rotation: rx: 0, ry:0, rz:0  //RPY=Roll,Pitch,Yaw //Quaternion
            LoadData >
                Weight: This will automatically change the dynamics and collision detection of the robot
            Create and a new crossair will appear at the tip of the pyramid
        Solution > IRB > T_ROB > Tooldata >
            tool0 = the data of the default position of the end of arm
            PyramidToolData = The data you just created
        Selecting tool data as the default when you work with the robot
            Main Menu > Home Tab >  
                Freehand Section > Change World to Active Tool
                Settings Section > Workobject
                    Tool: Pyramid Tool Data
        Click on the Robot to move
    //Snapping tool tip to robot path
        Left hand side panel > Paths & Targets > Solution > IRB > T_ROB > Workobject > wobj0 > wobj_of > 
            Right Click on Target_10
            Select View Robot as Target
    //Reorientate the tool
        Left hand side panel > Paths & Targets > Solution > IRB > T_ROB > Workobject > wobj0 > wobj_of > 
            Right Click on Target_10
            Select ModifyTarget > Rotate
        Rotation (deg) : -5 and click Apply multiple time to rotate
    
            Red: X
            Green: Y
            Blue: Z
            
        NOTE: While performing reorientation, make sure tool doesn't crash into itself before Synchronizing to RAPID

    //Teaching
        Move robot to any position
        Main Menu > Home Tab > Path Programming Section > Teach Target
            This will add another Target file into the workobject tree        
        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05 Work Objects - Make Robot Move Automatically To Path
    //Syncing Pyramid Tool Data and Virtual Robot
        Main Menu > Home Tab > Synchronize > Synchronize to RAPID >
            Check all checkboxes except Workobject 
                Tool Data > PyramidToolData > Module Column > user
                This will add 'user' module tree to system module LeftHandPanel > IRB > RAPID > T_ROB > Module# > 'user'
        LeftHandPanel > IRB > RAPID > T_ROB > Module# > Path#
            In T_ROB/Module/PROC function,
                MoveL Target_#, v1000, z100, tool0\WObj:=wobj0;
                    Change ALL 'tool0\WObj:' to 'PyramidToolData\WObj:'         //where tool0 is the robot end of arm flange
                    In Main Menu > RAPID Tab > Hit Apply
                    Return to Main Menu > Home Tab > Hit Play
        Now your tool will be playing along the created path

    //Teaching Robot Barriers as Workobject 
        Main Menu > Home Tab > Other > Create Workobject
            In Workobject Tab (Left Hand Side Panel)
                Robot holds workobject : For multi robots, since only one robot sitting on the ground, then false
                Moved by mechanical unit : Move by extra axis i.e conveyor
                Programmed : False if controlled by external sources program i.e External Motion Controller
                User Frame : General Area / Fixtures
                    Click on "..." button unter "Position X,Y,Z" and click on the corner of the "barrier" in the sim viewer
                Object Frame : Multiple Object on a Table / Fixture
                Click on Create button and now you'll have "Workobject_1_of" subtree under T_ROB > Workobject & Targets > Workobject_1_of
    
    //Creating Task / Target
        Highlight "Workobject_1_of", Go to Main Menu > Home Tab > Target
            In Right Hand Side > Create Target Tab > 
                Reference : Workobject
                Target name: Target_1 , EStop
                Workobject: Workobject_1
                In sim viewer panel, click on any of the point snapping icon to snap the point to the target, 
                    This will create a "Point" in Create Target Tab, Points Section
                Click on Create button and close the tab
                This creates the "Target File" under "Workobject_1_of"
                Click on "Target File" and reposition the Snap Point in the Sim Viewer
        Right Click on "Target File" and click on Modify Target > Rotate OR click on
            Home Tab > Freehand > Rotation Icon, to move the robot to the position            
        Highlight the Target File
            Right Click and Select "Add to new path"
                This Creates another (Path_#2) under "Paths & Procedures" 
                Rename this to "Push"
                Highlight "Push", Right Click, and select Synchronize to RAPID
                    Click OK
            Now you'll see another PROC function appears in the programming window (MainMenu > RAPID Tab > Highlight Path_#)
        Edit the Path_# 
            Copy Paste Target_10 code and place this inside Push(), ON TOP and BELOW of "MoveL Target_Push"      
            Click on Apply (Main Menu > RAPID Tab > Apply)
        Edit the Main Program
            RAPID Tab > Left Hand Side Panel > Solution > IRB > RAPID > T_ROB > mainProg > main
            Under PROC main()
                !Path_10;
                Push;
        Highlight Home Tab > Paths & Procedures > Push
            Synchronize to Station
        Disable Path_#
            Right Click Home Tab > Paths & Procedures > Path_#
                Select View > Uncheck Visible
        Play Robot
            Main Menu > Home Tab > Sim Viewer > Play Button

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06 Configurations and Programming
    
    //RAPID Tab >> Controller Tab >> Tree (Station > RAPID > T_ROB > Module > Push) >> IRB Tab >> T_ROB/Module Tab >>
        MODULE Module1
            CONST robtarget Target_10:=[...];
            CONST robtarget Target_20:=[...];
            CONST robtarget Target_30:=[...];
            CONST robtarget Target_Push_10:=[...];
            PROC Path_10()
                MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                MoveL Target_20, v1000, z100, PyramidToolData\WObj:=wobj0;
                MoveL Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;
            ENDPROC
            
            PROC Push()
                !Start at Home
                MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                
                !Go to target
                MoveL Target_Push_10, v500, z15, PyramidToolData\WObj:=Workobject_1;     //Change speed from v30 to v500 (0.5m/s)
                
                !Push
                //FUNC robtarget RelTool (robtarget Point, num Dx, num Dy, num Dz [\Rx:=num] [\Ry:=num] [\Rz:=num])         
                //The ones in Square Brackets (Rotational X, Y, Z) are optional, units in mm
                MoveL RELTOOL (Target_Push_10, 10, 0, 0, 25) v30, z15, PyramidToolData\WObj:=Workobject_1;
                
                !Retracting after push
                MoveL RELTOOL (Target_Push_10, 10, 0, 0, -50) v500, z15, PyramidToolData\WObj:=Workobject_1;
                
                !Return Home
                MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
            ENDPROC
            
        ENDMODULE
    
    //Once done, Main Menu > RAPID Tab > Apply
    //Head back to the Simulation viewer tab
    //Main Menu > RAPID > Synchronize > Synchronize to Station
    //Hit Play button in Simulation Viewer - NOTE: This wil cause an error for you to do the configuration
    //Configurations let you choose the orientations of each robot axis. A single pose of the robot may have multiple configurations since each axis has 360 deg

    //Right Click on Main Menu > Home Tab > Solution panel > Paths & Targets Tab > Solution > IRB > T_ROB > Workobjects & Targets > wobj0 > wobj0_of > Target_10
        Select Configurations and Configurations Tab will open
            Under the configurations section box, a list of configurations will appear
            Select one from that list and hit apply
        Now when the robot reaches the path (Target_10), your robot will be at your selected configuration.
        Notice that the warning sign on Target_10 disappears
        NOTE: Avoid flipping the entire robot base around.

    //Delete RELTOOL Paths under Home > Solution > Paths & Procedures Tree > Push > MoveL RELTOOL

    //Right Click on Home > Solution > Paths & Procedures Tree > Push
        Select Configurations > Auto Configuration
            Verify Configuration to double check on the movements
    //Right Click on Home > Solution > Paths & Procedures Tree > Push
        Select Synchronize to RAPID
    
    //Since it is not advisable to use Linear motion when the robot is moving, re-edit the program to the one below
        //Linear motion follows path (Moves exactly along the path) - This slows down the process
        //Joint motion follows the path points. Faster to get from one point to another. But careful with this as the robot may crash into something.

    //RAPID Tab >> Controller Tab >> Tree (Station > RAPID > T_ROB > Module > Push) >> IRB Tab >> T_ROB/Module Tab >>
        MODULE Module1
            CONST robtarget Target_10:=[...];
            CONST robtarget Target_20:=[...];
            CONST robtarget Target_30:=[...];
            CONST robtarget Target_Push_10:=[...];
            PROC Path_10()
                MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                MoveL Target_20, v1000, z100, PyramidToolData\WObj:=wobj0;
                MoveL Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;
            ENDPROC
            
            PROC Push()
                !Start at Home
                MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;                               
                
                !Move to position
                MoveJ Target_Push_10, v500, z15, PyramidToolData\WObj:=Workobject_1
                
                !Push
                //FUNC robtarget RelTool (robtarget Point, num Dx, num Dy, num Dz [\Rx:=num] [\Ry:=num] [\Rz:=num])  
                //The ones in Square Brackets (Rotational X, Y, Z) are optional, units in mm
                MoveL Reltool (Target_Push_10, 10, 0, 0, 25) v20, fine, PyramidToolData\WObj:=Workobject_1;
                
                //PROC WaitRob([\InPos] | [\ZeroSpeed])               //Wait until stop point or zerospeed
                WaitRob \InPos;                                       //This is useful if there are bunch of outputs that needs to be activated (Start Spindle or Lightings or etc). 
                //                                                    //Otherwise the robot will immediately start on the next command line
                
                !Retracting after push
                MoveL Reltool (Target_Push_10, 10, 0, 0, -50) v500, z50, PyramidToolData\WObj:=Workobject_1;  //Change z15 to z50               
                
                !Return Home
                MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
            ENDPROC
            
        ENDMODULE

    //Once done, Main Menu > RAPID Tab > Apply
    //Head back to the Simulation viewer tab
    //Main Menu > RAPID > Synchronize > Synchronize to Station
    //Hit Play button in Simulation Viewer

    //If the robot speed is too slow and need adjustment
        Main Menu > RAPID Tab > Test and Debug Section > Stop Button                                        //Stopping the simulation
        Main Menu > RAPID Tab > Test and Debug Section > Program Pointer > Follow Program Pointer           //The icon will mark which part of code you are currently on
        Main Menu > RAPID Tab > Test and Debug Section > Program Pointer > Go to Motion Pointer 
 
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07 Robot Configuration - Determine robot motions on every path
    //Avoiding every axis from abruptly rotating 360 deg during motion as there are multiple configurations for each path
    //Matching robot positions
        Main Menu > Home Tab > Solution > IRB > T_ROB > Workobjects > wobj > wobj_of > Target_#
            Right Click on Target_# and select 'Add new path'
                This will create a new path under 'Paths & Procedures' tree
                Right Click on the new Path# and select 'Configurations > Auto Configuration'
    //ConfL & ConfJ
        //ConfL - Monitors the configuration during linear movement
        //ConfJ - Monitors the configuration during joint movement
        //If you are doing Joint movements while there are linear movements around the part, and you do not want to worry about the configuration.
        //You can switch the configuration to ON or OFF. Example, 
        //PROC ConfL( [\ON] | [\OFF])
        //Example:
        //RAPID Tab >> Controller Tab >> Tree (Station > RAPID > T_ROB > Module > Push) >> IRB Tab >> T_ROB/Module Tab >>
            MODULE Module1
                CONST robtarget Target_10:=[...];
                CONST robtarget Target_20:=[...];
                CONST robtarget Target_30:=[...];
                CONST robtarget Target_Push_10:=[...];
                PROC Path_10()
                    MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                    MoveL Target_20, v1000, z100, PyramidToolData\WObj:=wobj0;
                    MoveL Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;
                ENDPROC
                
                PROC Push()
                    !Start at Home
                    MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;                               
                    
                    !Move to position
                    MoveJ Target_Push_10, v500, z15, PyramidToolData\WObj:=Workobject_1
                    
                    !Push
                    ConfL \On;                                                                                                                                                 //This activates Linear Configuration
                    MoveL Reltool (Target_Push_10, 10, 0, 0, 25) v20, fine, PyramidToolData\WObj:=Workobject_1;                     
                    WaitRob \InPos;                                          
                    
                    !Retracting after push
                    MoveL Reltool (Target_Push_10, 10, 0, 0, -50) v500, z50, PyramidToolData\WObj:=Workobject_1;       
                    ConfL \Off;                                                                                                                                                  //This deactivatesLinear Configuration
                    
                    !Return Home
                    MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                ENDPROC
                
            ENDMODULE    
    
    //SingArea  - Singularity Area - Defines interpolation around singular points
        //PROC SingArea ( [\Wrist] | [\LockAxis4] | [\Off] )
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08 Using Work Objects
    //Adding another workobject (Adding same task but at different position)
    //NOTE: All tasks are relative to the Workobject points. See Point 05.
    //Add object - Main Menu > Home Tab > Import Library > Equipment/UserLibrary
        The new object will appear in Main Menu > Home Tab > Solution Panel > Layout Tab
    //Move Object - Main Menu > Home Tab > Freehand Section > Move
    //Assign datum point to workobject - Main Menu > Home Tab > Other > Create Workobject
        Create Workobject Tab will appear in Solution Panel
            Click the text box in User Frame Section > Position X,Y, Z
            Head to the Simulation Viewer screen and click on the datum point of the new object (Same as Workobject 1)
            Click on Create
            Workobject 2 will appear in Solution Panel > Paths & Targets Tab
    //Sync to RAPID - Main Menu > Home Tab > Controller > Synchronize > Sync to RAPID
        Select all the workobjects listed under T_ROB > Workobject
    //Toggling between robot positions - See the various robot positions based on its points along the path in Simulation Viewer
            Main Menu > Home Tab > Solution Panel > Paths & Targets Tab > 
                In Workobjects & Target Tree, select any Target_# file
    //Adding robot configuration when robot approaches the new workobject
        Right Click on the Workobjects & Targets Tree > wobj0 > wobj0_of > Target_30
            Select Configurations, Configurations tab will appear in Soulution Panel
                Select the configurations from the list and Click Apply button
    //Program editing
        RAPID Tab >> Controller Tab >> Tree (Station > RAPID > T_ROB > Module > Push) >> IRB Tab >> T_ROB/Module Tab >>
            MODULE Module1
                CONST robtarget Target_10:=[...];
                CONST robtarget Target_20:=[...];
                CONST robtarget Target_30:=[...];
                CONST robtarget Target_Push_10:=[...];
                PROC Path_10()
                    MoveL Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                    MoveL Target_20, v1000, z100, PyramidToolData\WObj:=wobj0;
                    MoveL Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;
                ENDPROC
                
                PROC Push()
                    !Start at Home
                    MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;                               
                    
                    !Move to position
                    MoveJ Target_Push_10, v500, z15, PyramidToolData\WObj:=Workobject_1
                    
                    !Push                    
                    MoveL Reltool (Target_Push_10, 10, 0, 0, 25) v20, fine, PyramidToolData\WObj:=Workobject_1;                     
                    WaitRob \InPos;                                          
                    
                    !Retracting after push
                    MoveL Reltool (Target_Push_10, 10, 0, 0, -50) v500, z50, PyramidToolData\WObj:=Workobject_1;       
                    
                    
                    !Return Home
                    MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;
                    
                    MoveJ Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;      //01. This line is the new workobject
                    
                    !Start robot to Workobject 20                                                               //05. Add this line. Remember to change to Workobject_2           
                    
                    !Move to position                                                                                 //02. Copy and paste the entire path movements here
                    MoveJ Target_Push_10, v500, z15, PyramidToolData\WObj:=Workobject_2;
                    
                    !Push                    
                    MoveL Reltool (Target_Push_10, 10, 0, 0, 25) v20, fine, PyramidToolData\WObj:=Workobject_2;                     
                    WaitRob \InPos;                                          
                    
                    !Retracting after push
                    MoveL Reltool (Target_Push_10, 10, 0, 0, -50) v500, z50, PyramidToolData\WObj:=Workobject_2;     
                    
                    !Done with workobject 20
                    
                    !Back Home
                    MoveJ Target_30, v1000, z100, PyramidToolData\WObj:=wobj0;      //03. Copied from poit 01.
                    MoveJ Target_10, v1000, z100, PyramidToolData\WObj:=wobj0;      //04. Copied from !Start at Home
                    
                ENDPROC
                
            ENDMODULE   
        
        Once done with editing, Click on RAPID Tab > Controller Section > Apply
        In Simulation Viewer, Click on Play
    //Synchronize to Station once everything runs smoothly in Simulation Viewer
        RAPID Tab > Synchronize to Station
            Select all and click on Ok

    //Repositioning Workobject 2
        In Home Tab > Soluton Panel > Layout Tab
            Right click the Workobject you want to reposition and select Position > Offset Position 
            Offset Position will appear in Solution Panel
                Reference: World
                Edit the relative value to current position in the Translation and Rotation.
                Click Apply
        Matching robot path to new workobject location
            Right click on Home Tab > Solution Panel > Paths & Targets > T_ROB Tree > Workobjects & Targets > Workobject_2
                Select Offset Position - Offset Position Tab will appear
                    Reference: Local
                    Input the new relative value
        Synchronize to RAPID           
            Select all Workobjects (including the tree) and press Ok
    //Play Simulation 























 
 
 
 
 
 
 
 
 
 
 
 
 
 
