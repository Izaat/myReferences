//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Matlab 2015a
5e-3 = 5*10^-3 = 0.005
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Introduction (Basic syntax, command window, and working directory)
02. Basic matrix arithmetic in Matlab including an overview of different operators
03. Built in functions, constants and write custom functions
04. Linear equations
05. For loops, while loops, and if statements
06. Data types
07. Plotting data with Fibonacci Sequence
08. Plots useful for data analysis
09. Loading and Saving data
10. Subplots, 3D plots, and labeling plots
11. Sound is a wave of air particles
12. Reversing a signal
13. The Fourier transform (Viewing the frequency components of a signal)
14. Fourier transform of a sine wave
15. Applying a low-pass filter to an audio stream
16. Saving images (resolution sampling)
17. Image manipulation (Flip images, etc)
18. Convolution (Blurring an image)
19. Gaussian filter (Reduce image noise and detail)
20. Blur and edge detection with Gaussian filter
30. Probability
31. Measuring probability
32. Generating random values
33. Birthday paradox
34. Continuous variables
35. Mean and variance
36. Gaussian (normal) distribution
37. Test for normality
38. 2 sample tests
39. Multivariate Gaussian

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Introduction (Basic syntax, command window, and working directory)

    3 Basic types of numbers in Matlab
        Scalars (Plain numbers), Physical quantity described by magnitude (Volume, density, speed, etc)
        Vectors (List of numbers), Physical quantity described by magnitude and direction (Force, velocity, etc)
        Matrices (Table of numbers)
            Matlab recognizes variables as matrices by default
            Type in:
                x=5
                size(x)
                Answer will be 1, 1. 
                Unlike other programming languages, "x" will be a table
            Rows and Columns
                [1, 3]
                [R, C]
                Row = horizontal
                Column = vertical
        
    Syntax
        Basics:
            x=5
            size(x)
            Answer will be 1, 1. 
            Unlike other programming languages, "x" will be a table
        Commas:
            v = [1, 2, 3];
            v = [1 2 3];
            Matlab doesn't really need commas
        Semicolon:
            v=[1 2 3]        //Automatically prints out "v = 1 2 3"
            v=[1 2 3];       //Auto print disabled
            
    Matrices/Vectors
        Separating rows:
            A = [1 2; 3 4]   //This will be 2x2 matrix. 1 and 2 in first row, 3 and 4 second row
        Transpose a matrix/vector (Horizontal to Vertical)
            v = [1 2 3];   //(1,3)
            v = v'            //(3,1)
        Calling values from matrices/vectors
            A = [1 2; 3 4];
            A(2,1)              //Prints out "3"
        Prints ALL values in a Row
            A = [1 2; 3 4];
            A(2,:)              //Prints out "3, 4"
        Prints ALL values in a Column
            A = [1 2; 3 4];
            A(:,2)              //Prints out "2, 4"
        Prints entire table
            A = [1 2; 3 4];
            A(:,:)              //Prints out entire table
            A                   //Prints out entire table
        Matlab does not do indexing like normal programming languages (Start with 0)
            A = [1 2 3 4; 5 6 7 8; 9 10 11 12; 13 14 15 16]
            A(1, 1)            //Prints out 1
        Prints inner table (2,2) from a (4, 4) matrix
            A = [1 2 3 4; 5 6 7 8; 9 10 11 12; 13 14 15 16]
            A(2:3, 2:3)      //Prints out 6, 7, 10, 11
        Range of numbers
            1:10               //Prints out 1 through 10
            w=1:10;         //Stores a vector of single row of 10 columns
            size(w)          //(1, 10)        

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Basic matrix arithmetic in Matlab including an overview of different operators

    Refer
        https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html
        
    Adding, Subtracting, Multiply and Divide Matrices
        A = [1 2; 3 4];
        B = [5 6; 7 8];
        B2=[1 2; 4 5; 6 7]
        A+B                  //Ans=[6 8; 10 12]
        A-B                  //Ans=[-4 -4; -4 -4]
        A*B                  //Ans=[19 22; 43 50] - Matrix dimensions must be the same, Ref Matrix multiplication 
         //                      [A B; C D] * [E F; G H] = [(AE+BG)  (AF+BH);  (CE+DG)  (CF+DH)]
        A*B2'                //Ans=[5 14 20; 11 32 46], where the apostrophe represents transpose B2 from (3,2) to (2,3)
        A/B                  //Ans=[3.0 -2.0; 2.0 -1.0] - https://www.mathworks.com/help/fixedpoint/ref/mrdivide.html
        1/3                  //0.333
        3\1                  //3 - https://www.mathworks.com/help/symbolic/mldivide.html

    Check whether 2 values are equal
        1 == 1                           //Ans: 1 (True)
        1 == 0                           //Ans: 0 (False)  

    Elementwise, Multiply and Division
        A = [1 2; 3 4];
        B = [5 6; 7 8];
        A.*B              //Ans=[5 12; 21 32]
        A./B              //Ans=[0.2 0.33; 0.43 0.5]    

    Inner Product, Outer Product, Cross Product
        Row Vectors
            x=[1 2 3];
            y=[4 5 6];
            x*y'           //Ans=32, Inner product
            dot(x,y)       //Ans=32, same answer as x*y'
            x'*y           //Ans= [4 5 6; 8 10 12; 12 15 18],  Outer product
            cross(x,y)     //Ans=[-3 6 -3], Cross product
        Column Vectors
            x=[1; 2; 3];
            y=[4; 5; 6];
            x'*y           //Ans=32, Inner product
            dot(x,y)       //Ans=32, same answer as x*y'
            x*y'           //Ans= [4 5 6; 8 10 12; 12 15 18], Outer product
            cross(x,y)     //Ans=[-3; 6; -3], Cross product

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Built in functions, constants and write custom functions

    Functions
        Sine, Cosine, Tangent
            sin(0)       //Ans=0
            cos(0)       //Ans=1
            tan(0)       //Ans=0
        Functions with Matrix
            A = [1 2; 3 4];
            sin(A)       //Ans=[0.84 0.91; 0.14 -0.76], elementwise
        Exponential, Logarithm, Squareroot
            exp(0)       //Ans=1
            log(1)       //Ans=0
            log(exp(1))  //Ans=1
            sqrt(4)      //Ans=2
        Built in Constants (Pi, Variable E, i)
            pi           //By default, this constant is at 3.1416
            pi=2         //pi can be assigned to another value, 2. To reset to its default value, go to workspace panel and delete "pi"
            exp(1)       //There is no vaiable e in Matlab. e^1 = exp(1)
            sqrt(-1)     //Ans=0.0000 + 1.0000i
            i            //Ans=0.0000 + 1.0000i
            i*i OR i^2   //Ans= -1
            sin(pi) + i*cos(pi)  //Ans=0.0000-1.000i
        Identity matrix (1s in diagonal)
            A=[1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]    //Ans: [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]
            eye(4)                                    //Ans: [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]
        Matrix of zeros and ones
            zeros(4)                   //Ans: [0 0 0 0; 0 0 0 0; 0 0 0 0; 0 0 0 0] - (4, 4) matrix
            zeros(3,2)                 //Ans: [0 0; 0 0; 0 0] - (3,2) matrix
            ones(4)                    //Ans: [1 1 1 1; 1 1 1 1; 1 1 1 1; 1 1 1 1] - (4, 4) matrix
            ones(3,2)                  //Ans: [1 1; 1 1; 1 1] - (3,2) matrix
        Modulus
            mod(3,2)                   //Ans: 1, Returns remainder - Since the "%" is used for the comment, MATLAB uses "mod" for modulus operations
        Invert
            ~0                         //Ans: 1, This returns the opposite number
            ~1                         //Ans: 0, This returns the opposite number

    Define custom functions
        Home Tab > New > Function > Editor Panel  
            -OR-   
        Right Click on Current Folder Panel > New File > Function
        Editor
            function [output_args] = untitled(input_args)
                %function code goes in here
            end
        Syntax
            When the function returns things, specify "output_arguments"
            If more than 1 "output_args", specify as an array
            If no "output_args", remove "[output_args] ="
        Saving the Function file
            The function name must be the same as the filename

    Define hyperbolic sine function
        Hyperbolic sine formula:
            sinh z = (0.5) * [(e^z) - (e^-z)]
        Editor
            function y = my_sinh(x)
                y = (exp(x) - exp(-x))/2;
            end
        Save file as "my_sinh.m"
        Command:
            my_sinh(1)                 //Ans=1.1752
            my_sinh(0)                 //Ans=0
        Calculate Hyperbolic sine of matrix "x"
            x=0:10;
            my_sinh(x)                 //Ans: 1.0e+04 * 0 ... 1.1013
        
    Define "is_even.m" function
        Editor
            function y = is_even(x)
                %function return 1 if x is even
                y = ~mod(x,2);                
            end        
        Command
            is_even([1 2 3 4 5])       //Ans: [0 1 0 1 0]


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Linear equations
    
    Method
        Solving Linear Equations
            3x + 2y - z = 1
            2x - 2y + 4z = -2
            -x + 0.5y - z = 0
        Solution in Command Window
            A = [3 2 -1; 2 -2 4; -1 0.5 -1];
            b = [1 -2 0];
            inv(A)*b'            //Transpose b to column vector. Ans: 1, -2, -2
            NOTE:
                12/3 = 4
                12*3^-1 = 12*inv(3) = 12*(1/3),
                12*(1/3) = (12/3) = 4
        Other Method
            https://www.mathworks.com/help/symbolic/mldivide.html
            Ax = b               //This is similar to x = inv(A)*b OR A\b in MATLAB (mldivide - left matrix division)
            A\b'                 //Transpose b to column vector. Ans: 1, -2, -2
        Determinant
            det(A)               //Ans: -3
        Eigenvalues
            https://www.mathworks.com/help/matlab/ref/eig.html
            eig(A)               //Ans: [3.63; -3.84; 0.22]
        Eigenvectors
            [V, D] = eig(A)      //D = diagonal matrix, V = eigenvectors
        Checking eig
            A*V == V*D           //Ans: Should be an array of ones. But there will always be round off errors, therefore returning arrays of zeros
            A*V - V*D            //This finds out the differences between both matrices, it should return a very small number, ie "1.0e-14"
            norm(A*V - V*D)      //This finds out how big or small the values are, the distance from the origin (Especially for large matrix)
            norm(A*V - V*D, 2)   //Ans: Same as above because P = 2 by default
    Norms
        norm(A*V - V*D)          //Euclidian Distance - Square the values, then add the results and then take the squareroot
        norm(A*V - V*D, 2)       //P Norm - Value power of P, sum the results, get the p root
        norm(A*V - V*D, 1)       //P Norm - Manhattan distance, (L1 Norm)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. For loops, while loops, and if-else statements

    Timing
        To measure the function, add "tic" at the begining of the code and "toc" at the end of code
    
    FOR LOOPS
        Example 1
            Code:
                for i=[1 2 4 8 16 32]
                    disp(i);
                end
            Output:
                Prints out 1 through 32 on every line
                
        Example 2
            Code:
                for i=1:10
                    disp(i);
                end
            Output:
                Prints out 1 through 10 on every line      

        Example 3: Mean Squared Error
            Takes the difference between predicted value and actual value, squares them all, add all and then divide for average
            Code:
                E=randn(1000, 1)          //Generates random numbers in an array, this represents the differences
                SSE = 0;                  //Initialize sum of error to 0
                for i=1:1000              //Iterates 1 to 1000
                    SSE=SSE+E(i)*E(i);    //Squares every single value and adds to previous sum result
                end    
                MSE=SSE/1000;
            Command:
                MSE                       //Ans: Sum
            Shorter method
                E'*E/1000

    IF STATEMENT - Example 1 - Return 1 if the number in x is even
        CODE: 
            X=1:10;
            Y=zeros(1,10);
            for i=1:10
                if mod(X(i),2) == 0
                    Y(i)=1;
                else
                    Y(i)=0;
                end
            end
        Command:
            Y             //Ans: [0 1 0 1 0 1 0 1 0 1]

    IF STATEMENT - Example 2 - Return 1 if the number in x is divisible by 3
        CODE: 
            X=1:10;
            Y=zeros(1,10);
            S = 0;
            for i=1:10
                if mod(X(i),3) == 0
                    S = S + X(i);
                end
            end
        Command:
            S             //Ans: 18, which is 3 + 6 + 9

    WHILE LOOP - Example - Find element in a matrix    
        X=1:10;
        found = 0;
        i=0;
        while ~found    
            i = i+1
            if X(i) == 8
                disp('I found it!\n');
                found=1;
            end
        end

    FOR LOOP - Example - Find element in a matrix    
        X=1:10;
        found = 0;
        i=0;
        for i=1:10
            fprintf('i=%d\n', i);
            if X(i) == 8
                disp('I found it!\n');
                break;
            end
        end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Data types

    Strings
        disp('Hello there')
        Workspace panel but in Command window
            whos                           //Similar to "dir/w" in DOS6.2. Also not that "Hello" and "there" are in double and not string
            class('Hello there')           //Note this is returned as "char"
        Enter as "char"
            myString = 'Hello there'       //This will return as "char in "whos"

    Structs
        my_struct.name = 'My new struct'   //Single field struct, this case adds a string
        my_struct.age = 12                 //Adds another field dynamically, this case adds integer
        class()                            //Returns data type
        class(my_struct)                   //Returns data type for "my_struct"
        class(my_struct.name)              //Returns data type for name (char)
        class(my_struct.age)               //Returns data type for age (double)
        isfield(my_struct, 'name')         //Returns if the field (name) exists in "my_struct". Returns Boolean where 1 is true
        rmfield(my_struct, 'age')          //Removes a field (age) from "my_struct"
        setfield(my_struct, 'gender', 'f') //Similar to adding a field (my_struct.**), but setfield can be used while the program is running
        
    Struct within a struct
        my_struct.contact.phone = 123456789          //Adds a contact struct inside of my-struct, adds contact stuct with phone field
        my_struct.contact.email = person@gmail.com   //Adds a contact struct inside of my-struct, adds email field to contact struct
        my_struct.contact                            //Shows fields in my_struct.contact

    Initialize a struct
        S = struct('name', 'Abu', 'email', 'abu@gmail.com')   //Creates a struct (S) with name and email fields

    Cell
        Similar to struct but contains arbitrary fields (array, index, matrix, etc)
        my_cell{1} = 'hello bitch';              //Creates a cell with values containing "hello bitch"
        my_cell                                  //Prints out "hello bitch"
        my_cell2{1} = 'hello';
        my_cell2{'A'} = [1 2; 3 4];              //Adds a 2x2 matrix to cell A
        my_cell2                                 //Prints out rows and columns
        my_cell2{1}                              //Print out 'hello'
        my_cell2{'A'}                            //Prints out matrix


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Plotting data with Fibonacci Sequence










//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





