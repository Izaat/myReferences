///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React Native - Mobile App Development

All 3 links below must be understood before heading out here
  https://github.com/Izaat/references/blob/main/React%20Fundamentals
  https://github.com/Izaat/references/blob/main/React%20App
  https://github.com/Izaat/references/blob/main/React%20Context%20and%20Hooks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Creating React Native App  - npm install expo-cli --global
02. View, Text and Styles
03. Using State
04. Text Inputs
05. Lists and ScrollView - Mapping Method
06. List Component
07. Touchable Components
08. Todo App - Part 1
09. Todo App - Part 2 - Add Press event
10. Todo App - Part 3

11. Todo App - Part 4 - Alerts
12. Dismissing the Keyboard
13. Flexbox Basics
14. Icons and more Flexbox
15. Reviews App
16. Custom Fonts
17. Global Styles
18. React Navigation Setup
19. Stack Navigator
20. Navigating Around

21. Passing Data Between Screens
22. Navigation Options
23. Drawer Navigation
24. Custom Header Component
25. Custom Card Component
26. Using Images
27. Background Images
28. Modals
29. Formik Forms - Part 1
30. Formik Forms - Part 2
31. Validation with Yup
32. Showing Form Errors
33. Custom Button Component

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Creating React Native App

    React Native Apps can be coded in multiple different ways in CLI (Command Line Interface): 
        Expo CLI - For beginners (Simplified app development workflow) - Standalone dev GUI
        React Native CLI - Requires Xcode or Android Studio to get started

    Installing Expo CLI
        npm install expo-cli --global
        Paste the line above into Command Prompt/Terminal

    Create Project (From Terminal)
        Navigate into your target directory and enter the lines below
            expo init myproject
            cd myproject
            expo start
        
        A menu will appear and select "Blank - Minimal app as clean as empty canvas"
        Type in project name
            "expo"; {
                "name": "myproject",
                "slug": "myproject"
            }

        To start coding
            cd myproject       //Enter directory
            code .             //To open project with VSCode
            expo start         //To begin coding in VSCode (Enter this line in Command Prompt/Terminal) - OR - npm start
            
            NOTE: The browser is more for a debugging tool. Scan the QR code (With Expo Client) to  preview your project app inside the phone
    
    Preview Menu in Command Prompt / VS Code Terminal
        a - Android Emulator (Open Emulator first before pressing "a")
        e - email
        s - Sign in to Expo
        Ctrl+C - Exit menu
    
    Previewing App directly from iPhone
        Install app "Expo Client"

    Preview App from Android Studio
        Start Android Studio > Configure > AVD Manager > Create Android Virtual Device > Press Play
        Browser > Side Panel > Run on Android Device/Emulator - To install and allow drawing on Expo
        Browser > Side Panel > Run on Android Device/Emulator - To download and run app

    Project Directory
        ../assets - Images
        ../node_modules - dependencies and packages
        gitignore - version control
        App.js - project codes
        app.json - project information
        babel.config.js - Babel is a compiler that allows project to use modern javascript features
        package-lock.json - Project information
        package.json - Project information

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. View, Text and Styles

    ////////////////////////////////////
    App.js (Default Code)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>                     //"View" is similar to "Div" in Html
                    <Text>Open up App.js to start working on your app!</Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({                           //This will be like stylesheet from CSS but without ".container" in "stylesheet.css"
            container: {
                flex: 1,
                backgroundColor: '#fff',                                  //Notice that in CSS, the title will be "background-color", but in React, titles use camel cases (backgroundColor) 
                alignItems: 'center',
                justifyContent: 'center',
            },
        });
        
    ////////////////////////////////////
    App.js (Adding HTML style header container and body container)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    //<Text>Open up App.js to start working on your app!</Text>        //Remove
                    <View style={styles.header}>                                       //Add another View within a view (Just like Div)
                        //<Text>Hello</Text>
                        <Text style={styles.boldText}>Hello</Text>                     //Add style to the text, to be reflected in "style"
                    </View>
                    
                    <View style={styles.body}>                                         //Add body texts
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                                                                  //Add header stylesheet
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                                                               //Add body stylesheet
                backgroundColor: 'yellow',
                padding: 20,                                                      //In pixels
                //fontWeight: bold,                                               //Note that the body will not inherit fontWeight from header container
            },
        });

    ////////////////////////////////////
    App.js (Using bold fonts to body container) - 3 Points
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <View style={styles.header}>    
                        <Text style={styles.boldText}>Hello</Text>
                    </View>
                    
                    <View style={styles.body}>                  
                        //<Text>Lorem ipsum dolor sit amet</Text>
                        //<Text style={styles.boldText}>Lorem ipsum dolor sit amet </Text>          //02. Similar method from header container will be used for body instead
                        <Text style={styles.boldText}>   
                            Lorem ipsum <Text>Test</Text>  dolor sit amet                           //03. The text inside text component (child components) will also inherit the parent's bold style
                        </Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                            
                backgroundColor: 'yellow',
                padding: 20,                           
                //fontWeight: bold,                                                               //01. Note that the body will not inherit fontWeight from the header container
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Using State

    ////////////////////////////////////
    App.js (Default)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <Text></Text>
                    <Text></Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (Using react hooks for deploying state in a function component) - 16 points
        import React, {useState} from 'react';                                   //01. Add useState library
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, Button} from 'react-native';             //06. Import react default button styles
        
        export default function App() {
            //const []                                                           //02. Create an array
            const [name, setName] = useState('izaat');                           //03. name will get value of izaat. Use "setName" to change "name" value (Note that this is a string)
            
            //const [person, setPerson] = useState({});                          //13. Use useState as object
            const [person, setPerson] = useState({name: 'mario', age: 40});      //14. Use 2 properties for the object (name and age)
            
            //const clickHandler = () => {}                                      //10.  Const for the function
            const clickHandler = () => {
                setName('Ali');                                                  //11. Add the setName and assign as another name
                setPerson({name: 'luigi', age: 39});                             //16. Add and assign the new properties to the button
            }   
            
            return (
                <View style={styles.container}>           
                    //<Text></Text>
                    <Text>My name is {name} </Text>                              //04. To output the name
                    
                    <Text>His name is {person.name} and his age is {person.age}</Text>        //15. Deploy the 2 properties into the text
                    
                    <View style={styles.buttonContainer}>                        //05. Add button style
                        //<Button title='update name' />                         //07. Add the button to update name. Notice this is the default style button and can't be customized
                        //<Button title='update name' onPress{} />               //09. Make the button clickable, but first, create a const for the function
                        <Button title='update name' onPress{clickHandler} />     //12. Assign the function to the button (When button is clicked, Ali will appear instead)
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            buttonContainer: {
                marginTop: 20,                                                      //08. This brings doen the button lower (Similar to padding)
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Text Inputs

    //////////////////////////////////// 
    App.js (Default)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (With text input fields)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, TextInput} from 'react-native';         //01. Import TextInput
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Enter name:</Text>                            //02. Add Text input field
                    //<TextInput />                                     //03. Add text input tag (But with this line, it wont show the box, just plain)
                    //<TextInput style={styles.input} />                //04. Add styles to the text input field
                    <TextInput 
                        //multiline                                     //10. Just add this line for the expanding box feature
                        style={styles.input} 
                        placeholder = 'e.g John Doe'                    //06. Add placeholder (Greyed out example)
                        //onChangeText = {() => setName()}              //07. Enable text input field to capture the entered value
                        onChangeText = {(val) => setName(val)}          //08. Set as anonymous variable
                    />

                    <Text>Enter age:</Text>                             //09. Add for age
                    <TextInput 
                        //keyboardType='numeric'                        //11. Only shows the numeric keyboard to enter age
                        style={styles.input} 
                        placeholder = 'e.g 18-99'      
                        onChangeText = {(val) => setAge(val)} 
                    />

                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            //input: {}                                                   //05. Add style to text input field 
            input: {
                borderWidth: 1,               
                borderColor: '#777',            
                padding: 8,                          
                margin: 10,             
                width: 200,              
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Lists and ScrollView - Mapping Method

    //////////////////////////////////// 
    App.js (With input list)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native';     
        
        export default function App() {
            //const [people, setPeople] = useState([]);       //01. Set as array  
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                    //{people.map}                                             //06. Use map method to turn an array into a list
                    //{people.map( ()=>{} )}                               //07. Add arrow function that will execute each item in the array
                    //{people.map( (item)=>{} )}                        //08. Assign a name to retrieve the item from array
                    //{people.map( (item)=>{ return() } )}          //09. To return JSX code for each item in the array
                    {people.map( (item)=>{ 
                        return(
                            //<View>
                            <View key={item.key}>                          //11. Retrieve the unique key for each property/item
                                //<Text>{item.name}</Text>            //10. This will grab the name property from the array
                                <Text style={styles.item}>{item.name}</Text>    //12. Add styles
                            </View>
                        ) 
                    })} 
                    
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                                                 //02. Add padding
                paddingHorizontal: 20,                                       //03. Add padding
                //alignItems: 'center',                                        //04. Not in use
                //justifyContent: 'center',                                  //05. Not in use
            },
            item: {                                                                   //13. Add style
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    App.js (With ScrollView)
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View} from 'react-native';     
        import {StyleSheet, Text, View, ScrollView} from 'react-native';        //01. Import ScrollView
        
        export default function App() {
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                
                    //{people.map( (item)=>{ 
                    //    return(
                    //        <View key={item.key}>       
                    //            <Text style={styles.item}>{item.name}</Text>   
                    //        </View>
                    //    ) 
                    //})} 
                    
                    //<ScrollView>{people.map}</ScrollView>                      //02. Add everything into ScrollView
                    
                    //<ScrollView>
                    //    {people.map( (item)=>{ 
                    //        return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                    //        ) 
                    //    })} 
                    //</ScrollView>  
                    
                    //CLEANING UP THE CODE
                    //<ScrollView>
                        //{people.map( (item)=>{ 
                        //{people.map( item=>{                                     //03. Bracket not required since single item is used
                    //    {people.map( item=>(                                     //04. Curly braces and return line wont be used and this can be done directly 
                            //return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                            //) 
                        //})} 
                    //    ))} 
                    //</ScrollView>  
                    
                    //THEREFORE AFTER CLEANING UP
                    <ScrollView>
                        {people.map( item=>(         
                            <View key={item.key}>       
                                <Text style={styles.item}>{item.name}</Text>   
                            </View>
                        ))} 
                    </ScrollView>  

                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. List Component - FlatList
    
    ////////////////////////////////////  - 10 points
    FlatList only updates the differences in the list (Fast loading cycle)
    Scrollview rerender everything from the beginning (Slow loading cycle)
    
    App.js (With FlatList)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';             //01. Import FlatList
        
        export default function App() {
            const [people, setPeople] = useState([
                //{ name: 'izaat', key: '1' },                                     //06. Using "id" instead of "key" like database. App will give warning about missing keys
                //{ name: 'yoshi', key: '2' },
                //{ name: 'mario', key: '3' },
                //{ name: 'luigi', key: '4' },
                //{ name: 'peach', key: '5' },
                //{ name: 'toad', key: '6' },
                //{ name: 'bowser', key: '7' },
                
                { name: 'izaat', id: '1' },                                        //07. To work around the missing key, "keyExtractor" will be used
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    //<FlatList />                                                  //02. Add FlatList
                    <FlatList 
                        //keyExtractor={() => }                                     //08. To mention what will be used for the keys
                        //keyExtractor={(item) => }                                 //09. Iterates each item in the array
                        keyExtractor={(item) => item.id}                            //10. Declaring "id" as the key
                        data={people}                                               //03. Us people array as the data
                        //renderItem={()=>(JSX)}                                    //04. Add renderItem to render the data
                        //renderItem={({item})=>(JSX)}                              //05. Add array properties (item) to function (Curly braces is to destructure the array)
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    From the above code, the app only output the array in a single column
    numColumns enables the app to output multiple columns
    
    App.js (With numColumns)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';     
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}                                                            //01. Added numColumns
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,                                                             //02. Add horizontal margins to columns
                marginTop: 24,                                                                    //03. Add top margins
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Touchable Components
    
    13 points
    Adding onPress event to individual items (Use button and attach to onPress prop)
    But the method can't be applied to text components "<Text>"
    Although <Text> components can be turned into buttons, custom stylized props can't be added to those buttons
    To use custom styled buttons on text components, touchable component will be used
    Take note of the entire list of Touchable components available and the one being used here is "TouchableOpacity" - Transparent when touched
    
    App.js 
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList} from 'react-native';     
        import {StyleSheet, Text, View, FlatList, TouchableOpacity} from 'react-native';     //01. Import TouchableOpacity
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            //const pressHandler = ()  => {}                              //06. Create pressHandler function
            //const pressHandler = (id)  => {}                            //07. pressHandler to take in id as the value
            const pressHandler = (id)  => {
                console.log(id);                                          //08. Output to console (To view console, check Expo in browser)
                //setPeople([]);                                          //09. Add function to edit entire array (Tap to add new value - empty means delete) - Slow as it edit the entire array
                //setPeople(() => {});                                    //10. Add function to edit what is selected leaving the unselected at current state
                
                //setPeople(() => {
                setPeople((prevPeople) => {                                                   //11. Takes the current state
                    //return prevPeople.filter();                                             //12. Filter out the selected items from the unselected ones
                    return prevPeople.filter(person => person.id != id);                      //13. Filter will run a function that returns a boolean where TRUE is when the id selected is not equal to the id
                });
            } 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}         
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            //<Text style={styles.item}>{item.name}</Text>
                            //<TouchableOpacity><Text style={styles.item}>{item.name}</Text></TouchableOpacity>   //02. Add Touchable Component
                            
                            //<TouchableOpacity>
                            //<TouchableOpacity onPress={}>                                                       //03. Add onPress prop
                            //<TouchableOpacity onPress={() => pressHandler()}>                                   //04. Add function
                            //<TouchableOpacity onPress={() => pressHandler(item.id)}>                            //05. Add id of every property in the array
                                <Text style={styles.item}>{item.name}</Text>
                            </TouchableOpacity>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,          
                marginTop: 24,               
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Todo App - Part 1

    ///////////////////////////
    App.js (Initial Code)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 

        export default function App() {
            return (
                <View style={styles.container}>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
        });

    ///////////////////////////
    App.js (Format)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 

        export default function App() {
            return (
                <View style={styles.container}>
                    {/* header */}
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            {/* todo list */}
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
        });

    ///////////////////////////
    App.js (Code)
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, FlatList} from 'react-native';           //01. Add FlatList

        export default function App() {
            //const [todos, setTodos] = useState([]);                            //03. Add data array
            const [todos, setTodos] = useState([                                 //04. Add data
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            return (
                <View style={styles.container}>
                    {/* header */}
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            //{/* todo list */}
                            //<FlatList />                                         //02. Add FlatList component
                            <FlatList 
                                data={todos}                                       //05. Add todos data
                                //renderItem={}                                    //06. This renders each item in the list
                                //renderItem={() => ()}                            //07. Is a function to return JSX
                                //renderItem={({item}) => ()}                      //08. Extracts the item
                                renderItem={({item}) => (
                                    <Text>{item.text}</Text>                       //09. Output the item text i.e buy coffee
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            //content: {}                   //10. Styling under <View style={styles.content}> (Move text to right)
            content: {
                padding: 40,
            },
            //list: {}                      //11. Styling under <View style={styles.list}> (Move text down)
            list: {
                marginTop: 20,
            }
        });

    ///////////////////////////
    Creating header and form with another file
        Create new folder under "MYPROJECT" and name it "components"
        Add new files under "components" folder
        Explorer
            Myproject
                .expo
                .expo-shared
                assets
                node_modules
                components                     //01. Add components folder
                    header.js                  //02. Add file
                App.js
    
    header.js
        import React from 'react';                               //03. Import default
        import {StyleSheet, Text, View} from 'react-native';     //04. Import 3 items
    
        //export default function Header() {}                    //05. header.js will ultimately be exported to App.js as a function called "Header"
        export default function Header() {
            //return ()                                          //06. To return some JSX
            return (
                //<View></View>                                  //07. Add View
                //<View>
                <View style={styles.header}>                     //08. Add style property for header
                    //<Text>My Todos</Text>
                    <Text style={style.title}>My Todos</Text>    //09. Add style property for title
                </View>
            )   
        }
    
        //const styles = StyleSheet.create({});                  //10. Create stylesheet
        const styles = StyleSheet.create({
            header: {                                            //11. Add stylesheet properties
                height: 80,
                paddingTop: 38,
                backgroundColor: 'coral'
            },
            title: {
                textAlign: 'center',
                color: '#fff',
                fontSize: 20,
                fontWeight: 'bold'
            }
        });        
    
    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';                        //12. Import header file

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            return (
                <View style={styles.container}>
                    //{/* header */}
                    <Header />                                             //13. Add header.js
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <Text>{item.text}</Text>  
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Todo App - Part 2 - Add Press event to delete item
    
    File Structure <Explorer>
        MyProject
            Component
                header.js [Topic 7]
                todoItem.js                                                  // 01. To create
            App.js    
    
    todoItem.js
        import React from 'react';                                         
        import {StyleSheet, Text, TouchableOpacity} from 'react-native';     //02. Surround text with TouchableOpacity
        
        //export default function TodoItem() {}                              //03. Add in export function
        //export default function TodoItem(props) {}                         //04. To pass in props item from App.js
        //export default function TodoItem({item}) {}                        //09. Use destructuring method to get the item instead of using "props"
        //export default function TodoItem({item}) {
        export default function TodoItem({item, pressHandler}) {             //22. Destucture the pressHandler
            return(
                //<TouchableOpacity>
                //<TouchableOpacity onPress={}>                              //14. Add onPress event handler
                //<TouchableOpacity onPress={() => pressHandler()}>          //23. Calls the function
                <TouchableOpacity onPress={() => pressHandler(item.key)}>    //24. Also to pass in the key 
                    //<Text>{item.text}</Text>                               //10. Add Text that is surrounded by TouchableOpacity
                    <Text style={styles.item}>{item.text}</Text>             //12. Apply style to the texts
                </TouchableOpacity>
            )
        }
    
        const styles = StyleSheet.create({                                    //11. Add StyleSheet
            item: {                              
                padding: 16,
                marginTop: 16,
                borderColor: '#bbb',
                borderWidth: 1,
                borderStyle: 'dashed',
                borderRadius: 10
            }
        }) 

    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';  
        import TodoItem from './components/todoItem';                     //13. Import todoItem.js

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            //const pressHandler = (key) => {}                            //15. Add pressHandler for onPress function
            const pressHandler = (key) => {
                //setTodos(() => {})                                      //16. Pass a function
                //setTodos((prevTodos) => {})                             //17. Add previous todos
                setTodos((prevTodos) => {
                    //return prevTodos.filter()                           //18. Filter out previous todos from current array and take out the one with the same key
                    //return prevTodos.filter(todo)                       //19. Takes in individual todo as it cycles through the array
                    return prevTodos.filter(todo => todo.key != key);     //20. Return true or false
                }) 
            } 
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    //<Text>{item.text}</Text>              //05. Remove
                                    //<TodoItem />                          //06. To use separate <TodoItem /> component file instead
                                    //<TodoItem item={} />                  //07. Add in props
                                    //<TodoItem item={item} />              //08. To be equal to item being rendered in "renderItem={}"
                                    <TodoItem item={item} pressHandler={pressHandler} />             //21. Pass down the pressHandler function as prop
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Todo App - Part 3 - Create form and add a Press event to add items
    
    Create Form = Point 1 to 15
    Adding Press event = Point 16 to 27
    NOTE: Scrolling wont work since Flatlist is used
    
    File Structure <Explorer>
        MyProject
            Component
                header.js [Topic 7]
                todoItem.js  [Topic 9]
                addTodo.js                                                         //01. Create addTodo.js in "Component" folder
            App.js    

    addTodo.js
        import React, {useState} from 'react';                                      //02. Import React and useState
        import {StyleSheet, Text, View, TextInput, Button} from 'react-native';     //03. Import View, TextInput and Button
        
        //export default function AddTodo() {}                                      //04. add export default function
        //export default function AddTodo() {
        export default function AddTodo({submitHandler}) {                          //26. Destructure "submitHandler" prop
            
            const [text, setText] = useState('');                                   //10. Add a function that tracks the user's text in text input box where the default is an empty string
            
            //const changeHandler = () => {}                                        //09. Add changeHandler function
            //const changeHandler = (val) => {}                                     //11. Takes in a parameter pushed by "onChangeText"
            const changeHandler = (val) => {
                setText(val);                                                       //12. Set the text
            } 
            
            return (
                <View>
                    //<TextInput />                                                 //05. Add Text input container
                    <TextInput 
                        style={styles.input}                                        //13. Add styles to text
                        placeholder='new todo...'                                   //06. The default text inside text input box
                        //onChangeText={(val) => changeHandler(val)}                //07. Triggers a function (changeHandler) once text input box has user text and push to "val"
                        onChangeText={changeHandler}                                //08.  Shorter version of above code
                    /> 
                    
                    //<Button onPress={} text='add todo' color='coral' />           //17. Add button with placeholder text and color
                    //<Button onPress={() => console.log(text)} title='add todo' color='coral' />      //18. Add anonymous function and output the current text to console (Run app to see result)
                    <Button onPress={() => submitHandler(text)} title='add todo' color='coral' />      //27. Pass text to submitHandler instead of console.log
                </View>
            )
        }     
        
        //const styles = StyleSheet.create({})                              //14. Add StyleSheet function
        const styles = StyleSheet.create({
            input: {
                marginBottom: 10,
                paddingHorizontal: 8,
                paddingVertical: 6,
                borderBottomWidth: 1,
                borderBottomColor: '#ddd'
            }
        })  

    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';                           //15. Link file "addTodo" to "App.js"

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            //const submitHandler = (text) => {}                                 //19. This function is to push the text to the useState array
            const submitHandler = (text) => {
                //setTodos()                                                     //20. Add setTodos() to update the useState array
                //setTodos((prevTodos) => {})                                    //21. Add function as an argument and capture current array as "prevTodos"
                setTodos((prevTodos) => {
                    //return[];                                                  //22. Return a new array
                    return[
                        {text: text, key: Math.random.toString},                 //24. Add in new text into array and tag a key with random number to it and convert it into a string. DO NOT USE MATH OPERATION FOR PRODUCTION CODE
                        ...prevTodos                                             //23. Use spread operator to spread out the array
                    ];
                })
            }     
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        //{/* todo form */}
                        //<AddTodo />                                             //16. Nest AddTodo
                        <AddTodo submitHandler={submitHandler} />                 //25. Add "submitHandler" as prop
                        
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <TodoItem item={item} pressHandler={pressHandler} />   
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Todo App - Part 4 - Alerts
    
    Add minimum character limit: Point 1 to 4
    Add alert: Point 5 to 9
    
    File Structure <Explorer>
        MyProject
            Component
                header.js      [Topic 7]
                todoItem.js   [Topic 9]
                addTodo.js   [Topic 10]
            App.js               [Topic 10]

    App.js
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import {StyleSheet, Text, View, FlatList, Alert} from 'react-native';       //05. Add Alert component
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';       

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            const submitHandler = (text) => {
                
                //if(text.length > 3){}                                        //01. If the characters entered into the text input box is more than 3 chracters, then updating useState is enabled
                if(text.length > 3){
                    setTodos((prevTodos) => {                                  //03. Paste here
                        return[
                            {text: text, key: Math.random.toString},    
                            ...prevTodos                        
                        ];
                    });                                                        //04. Add semicolon since it is no longer a main function
                //} 
                //}else{}                                                      //06. Add else statement
                }else{
                    //Alert.alert();                                           //07. Calling ".alert()" method on the "Alert." object
                    //Alert.alert('Oops', 'Todos title too short', []);        //08. Alert.alert('Title', 'message', [array])
                    Alert.alert('Oops', 'Todos title too short', [
                        {text: 'OK', onPress: () => console.log('alert closed')}  //09. This adds the alert text box with OK button
                    ]);
                }   
                
                //setTodos((prevTodos) => {                                     //02. Move setTodos into the "if" function
                //    return[
                //        {text: text, key: Math.random.toString},    
                //        ...prevTodos                        
                //    ];
                //})
            }     
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        <AddTodo submitHandler={submitHandler} />  
                        
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <TodoItem item={item} pressHandler={pressHandler} />   
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Dismissing the Keyboard

    Enabling a feature that hides the keyboard after tapping outside the keyboard
    Wrap a component with another component - TouchableWithoutFeedback (Touchable component that won't affect the content)
    
    File Structure <Explorer>
        MyProject
            Component
                header.js      [Topic 7]
                todoItem.js   [Topic 9]
                addTodo.js   [Topic 10]
            App.js               [Topic 11]


    App.js
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList, Alert} from 'react-native';    
        import {StyleSheet, Text, View, FlatList, Alert, TouchableWithoutFeedback, Keyboard} from 'react-native';    //01. Import component and keyboard component
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';       

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            const submitHandler = (text) => {
                
                if(text.length > 3){
                    setTodos((prevTodos) => {               
                        return[
                            {text: text, key: Math.random.toString},    
                            ...prevTodos                        
                        ];
                    });                                                       
                }else{
                    Alert.alert('Oops', 'Todos title too short', [
                        {text: 'OK', onPress: () => console.log('alert closed')} 
                    ]);
                }   
                
            }     
            
            return (
                //<View style={styles.container}>
                //    <Header />    
                //    <View style={styles.content}>
                //        <AddTodo submitHandler={submitHandler} />  
                //        
                //        <View style={styles.list}>
                //            <FlatList 
                //                data={todos}          
                //                renderItem={({item}) => (
                //                    <TodoItem item={item} pressHandler={pressHandler} />   
                //                )} 
                //            />
                //        </View>
                //    </View>
                //</View>
                
                //<TouchableWithoutFeedback>                               //02. Wrap the component            
                //<TouchableWithoutFeedback onPress={() => {}}>            //03. Add onPress tag with a function
                <TouchableWithoutFeedback onPress={() => {
                    //console.log('keyboard hide activated');              //04. For testing - Check in console
                    Keyboard.dismiss();                                    //05. Add function that hides the keyboard
                }}> 
                    <View style={styles.container}>
                        <Header />    
                        <View style={styles.content}>
                            <AddTodo submitHandler={submitHandler} />  
                            
                            <View style={styles.list}>
                                <FlatList 
                                    data={todos}          
                                    renderItem={({item}) => (
                                        <TodoItem item={item} pressHandler={pressHandler} />   
                                    )} 
                                />
                            </View>
                        </View>
                    </View>
                </ TouchableWithoutFeedback>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Flexbox Basics
























///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








