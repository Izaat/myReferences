///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React Native - Mobile App Development

All 3 links below must be understood before heading out here
  https://github.com/Izaat/references/blob/main/React%20Fundamentals
  https://github.com/Izaat/references/blob/main/React%20App
  https://github.com/Izaat/references/blob/main/React%20Context%20and%20Hooks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Creating React Native App  - npm install expo-cli --global
02. View, Text and Styles
03. Using State
04. Text Inputs
05. Lists and ScrollView - Mapping Method
06. List Component
07. Touchable Components
08. Todo App - Part 1
09. Todo App - Part 2
10. Todo App - Part 3

11. Alerts
12. Dismissing the Keyboard
13. Flexbox Basics
14. Icons and more Flexbox
15. Reviews App
16. Custom Fonts
17. Global Styles
18. React Navigation Setup
19. Stack Navigator
20. Navigating Around

21. Passing Data Between Screens
22. Navigation Options
23. Drawer Navigation
24. Custom Header Component
25. Custom Card Component
26. Using Images
27. Background Images
28. Modals
29. Formik Forms - Part 1
30. Formik Forms - Part 2
31. Validation with Yup
32. Showing Form Errors
33. Custom Button Component

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Creating React Native App

    React Native Apps can be coded in multiple different ways in CLI (Command Line Interface): 
        Expo CLI - For beginners (Simplified app development workflow) - Standalone dev GUI
        React Native CLI - Requires Xcode or Android Studio to get started

    Installing Expo CLI
        npm install expo-cli --global
        Paste the line above into Command Prompt/Terminal

    Create Project (From Terminal)
        Navigate into your target directory and enter the lines below
            expo init myproject
            cd myproject
            expo start
        
        A menu will appear and select "Blank - Minimal app as clean as empty canvas"
        Type in project name
            "expo"; {
                "name": "myproject",
                "slug": "myproject"
            }

        To start coding
            cd myproject       //Enter directory
            code .             //To open project with VSCode
            expo start         //To begin coding in VSCode (Enter this line in Command Prompt/Terminal) - OR - npm start
            
            NOTE: The browser is more for a debugging tool. Scan the QR code (With Expo Client) to  preview your project app inside the phone
    
    Preview Menu in Command Prompt / VS Code Terminal
        a - Android Emulator (Open Emulator first before pressing "a")
        e - email
        s - Sign in to Expo
        Ctrl+C - Exit menu
    
    Previewing App directly from iPhone
        Install app "Expo Client"

    Preview App from Android Studio
        Start Android Studio > Configure > AVD Manager > Create Android Virtual Device > Press Play
        Browser > Side Panel > Run on Android Device/Emulator - To install and allow drawing on Expo
        Browser > Side Panel > Run on Android Device/Emulator - To download and run app

    Project Directory
        ../assets - Images
        ../node_modules - dependencies and packages
        gitignore - version control
        App.js - project codes
        app.json - project information
        babel.config.js - Babel is a compiler that allows project to use modern javascript features
        package-lock.json - Project information
        package.json - Project information

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. View, Text and Styles

    ////////////////////////////////////
    App.js (Default Code)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>                     //"View" is similar to "Div" in Html
                    <Text>Open up App.js to start working on your app!</Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({                           //This will be like stylesheet from CSS but without ".container" in "stylesheet.css"
            container: {
                flex: 1,
                backgroundColor: '#fff',                                  //Notice that in CSS, the title will be "background-color", but in React, titles use camel cases (backgroundColor) 
                alignItems: 'center',
                justifyContent: 'center',
            },
        });
        
    ////////////////////////////////////
    App.js (Adding HTML style header container and body container)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    //<Text>Open up App.js to start working on your app!</Text>        //Remove
                    <View style={styles.header}>                                       //Add another View within a view (Just like Div)
                        //<Text>Hello</Text>
                        <Text style={styles.boldText}>Hello</Text>                     //Add style to the text, to be reflected in "style"
                    </View>
                    
                    <View style={styles.body}>                                         //Add body texts
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                                                                  //Add header stylesheet
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                                                               //Add body stylesheet
                backgroundColor: 'yellow',
                padding: 20,                                                      //In pixels
                //fontWeight: bold,                                               //Note that the body will not inherit fontWeight from header container
            },
        });

    ////////////////////////////////////
    App.js (Using bold fonts to body container) - 3 Points
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <View style={styles.header}>    
                        <Text style={styles.boldText}>Hello</Text>
                    </View>
                    
                    <View style={styles.body}>                  
                        //<Text>Lorem ipsum dolor sit amet</Text>
                        //<Text style={styles.boldText}>Lorem ipsum dolor sit amet </Text>          //02. Similar method from header container will be used for body instead
                        <Text style={styles.boldText}>   
                            Lorem ipsum <Text>Test</Text>  dolor sit amet                           //03. The text inside text component (child components) will also inherit the parent's bold style
                        </Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                            
                backgroundColor: 'yellow',
                padding: 20,                           
                //fontWeight: bold,                                                               //01. Note that the body will not inherit fontWeight from the header container
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Using State

    ////////////////////////////////////
    App.js (Default)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <Text></Text>
                    <Text></Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (Using react hooks for deploying state in a function component) - 16 points
        import React, {useState} from 'react';                                   //01. Add useState library
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, Button} from 'react-native';             //06. Import react default button styles
        
        export default function App() {
            //const []                                                           //02. Create an array
            const [name, setName] = useState('izaat');                           //03. name will get value of izaat. Use "setName" to change "name" value (Note that this is a string)
            
            //const [person, setPerson] = useState({});                          //13. Use useState as object
            const [person, setPerson] = useState({name: 'mario', age: 40});      //14. Use 2 properties for the object (name and age)
            
            //const clickHandler = () => {}                                      //10.  Const for the function
            const clickHandler = () => {
                setName('Ali');                                                  //11. Add the setName and assign as another name
                setPerson({name: 'luigi', age: 39});                             //16. Add and assign the new properties to the button
            }   
            
            return (
                <View style={styles.container}>           
                    //<Text></Text>
                    <Text>My name is {name} </Text>                              //04. To output the name
                    
                    <Text>His name is {person.name} and his age is {person.age}</Text>        //15. Deploy the 2 properties into the text
                    
                    <View style={styles.buttonContainer}>                        //05. Add button style
                        //<Button title='update name' />                         //07. Add the button to update name. Notice this is the default style button and can't be customized
                        //<Button title='update name' onPress{} />               //09. Make the button clickable, but first, create a const for the function
                        <Button title='update name' onPress{clickHandler} />     //12. Assign the function to the button (When button is clicked, Ali will appear instead)
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            buttonContainer: {
                marginTop: 20,                                                      //08. This brings doen the button lower (Similar to padding)
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Text Inputs

    //////////////////////////////////// 
    App.js (Default)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (With text input fields)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, TextInput} from 'react-native';         //01. Import TextInput
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Enter name:</Text>                            //02. Add Text input field
                    //<TextInput />                                     //03. Add text input tag (But with this line, it wont show the box, just plain)
                    //<TextInput style={styles.input} />                //04. Add styles to the text input field
                    <TextInput 
                        //multiline                                     //10. Just add this line for the expanding box feature
                        style={styles.input} 
                        placeholder = 'e.g John Doe'                    //06. Add placeholder (Greyed out example)
                        //onChangeText = {() => setName()}              //07. Enable text input field to capture the entered value
                        onChangeText = {(val) => setName(val)}          //08. Set as anonymous variable
                    />

                    <Text>Enter age:</Text>                             //09. Add for age
                    <TextInput 
                        //keyboardType='numeric'                        //11. Only shows the numeric keyboard to enter age
                        style={styles.input} 
                        placeholder = 'e.g 18-99'      
                        onChangeText = {(val) => setAge(val)} 
                    />

                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            //input: {}                                                   //05. Add style to text input field 
            input: {
                borderWidth: 1,               
                borderColor: '#777',            
                padding: 8,                          
                margin: 10,             
                width: 200,              
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Lists and ScrollView - Mapping Method

    //////////////////////////////////// 
    App.js (With input list)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native';     
        
        export default function App() {
            //const [people, setPeople] = useState([]);       //01. Set as array  
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                    //{people.map}                                             //06. Use map method to turn an array into a list
                    //{people.map( ()=>{} )}                               //07. Add arrow function that will execute each item in the array
                    //{people.map( (item)=>{} )}                        //08. Assign a name to retrieve the item from array
                    //{people.map( (item)=>{ return() } )}          //09. To return JSX code for each item in the array
                    {people.map( (item)=>{ 
                        return(
                            //<View>
                            <View key={item.key}>                          //11. Retrieve the unique key for each property/item
                                //<Text>{item.name}</Text>            //10. This will grab the name property from the array
                                <Text style={styles.item}>{item.name}</Text>    //12. Add styles
                            </View>
                        ) 
                    })} 
                    
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                                                 //02. Add padding
                paddingHorizontal: 20,                                       //03. Add padding
                //alignItems: 'center',                                        //04. Not in use
                //justifyContent: 'center',                                  //05. Not in use
            },
            item: {                                                                   //13. Add style
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    App.js (With ScrollView)
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View} from 'react-native';     
        import {StyleSheet, Text, View, ScrollView} from 'react-native';        //01. Import ScrollView
        
        export default function App() {
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                
                    //{people.map( (item)=>{ 
                    //    return(
                    //        <View key={item.key}>       
                    //            <Text style={styles.item}>{item.name}</Text>   
                    //        </View>
                    //    ) 
                    //})} 
                    
                    //<ScrollView>{people.map}</ScrollView>                      //02. Add everything into ScrollView
                    
                    //<ScrollView>
                    //    {people.map( (item)=>{ 
                    //        return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                    //        ) 
                    //    })} 
                    //</ScrollView>  
                    
                    //CLEANING UP THE CODE
                    //<ScrollView>
                        //{people.map( (item)=>{ 
                        //{people.map( item=>{                                     //03. Bracket not required since single item is used
                    //    {people.map( item=>(                                     //04. Curly braces and return line wont be used and this can be done directly 
                            //return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                            //) 
                        //})} 
                    //    ))} 
                    //</ScrollView>  
                    
                    //THEREFORE AFTER CLEANING UP
                    <ScrollView>
                        {people.map( item=>(         
                            <View key={item.key}>       
                                <Text style={styles.item}>{item.name}</Text>   
                            </View>
                        ))} 
                    </ScrollView>  

                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. List Component - FlatList
    
    ////////////////////////////////////  - 10 points
    FlatList only updates the differences in the list (Fast loading cycle)
    Scrollview rerender everything from the beginning (Slow loading cycle)
    
    App.js (With FlatList)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';             //01. Import FlatList
        
        export default function App() {
            const [people, setPeople] = useState([
                //{ name: 'izaat', key: '1' },                                     //06. Using "id" instead of "key" like database. App will give warning about missing keys
                //{ name: 'yoshi', key: '2' },
                //{ name: 'mario', key: '3' },
                //{ name: 'luigi', key: '4' },
                //{ name: 'peach', key: '5' },
                //{ name: 'toad', key: '6' },
                //{ name: 'bowser', key: '7' },
                
                { name: 'izaat', id: '1' },                                        //07. To work around the missing key, "keyExtractor" will be used
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    //<FlatList />                                                  //02. Add FlatList
                    <FlatList 
                        //keyExtractor={() => }                                     //08. To mention what will be used for the keys
                        //keyExtractor={(item) => }                                 //09. Iterates each item in the array
                        keyExtractor={(item) => item.id}                            //10. Declaring "id" as the key
                        data={people}                                               //03. Us people array as the data
                        //renderItem={()=>(JSX)}                                    //04. Add renderItem to render the data
                        //renderItem={({item})=>(JSX)}                              //05. Add array properties (item) to function (Curly braces is to destructure the array)
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    From the above code, the app only output the array in a single column
    numColumns enables the app to output multiple columns
    
    App.js (With numColumns)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';     
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}                                                            //01. Added numColumns
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,                                                             //02. Add horizontal margins to columns
                marginTop: 24,                                                                    //03. Add top margins
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Touchable Components
    
    13 points
    Adding onPress event to individual items (Use button and attach to onPress prop)
    But the method can't be applied to text components "<Text>"
    Although <Text> components can be turned into buttons, custom stylized props can't be added to those buttons
    To use custom styled buttons on text components, touchable component will be used
    Take note of the entire list of Touchable components available and the one being used here is "TouchableOpacity" - Transparent when touched
    
    App.js 
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList} from 'react-native';     
        import {StyleSheet, Text, View, FlatList, TouchableOpacity} from 'react-native';     //01. Import TouchableOpacity
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            //const pressHandler = ()  => {}                              //06. Create pressHandler function
            //const pressHandler = (id)  => {}                            //07. pressHandler to take in id as the value
            const pressHandler = (id)  => {
                console.log(id);                                          //08. Output to console (To view console, check Expo in browser)
                //setPeople([]);                                          //09. Add function to edit entire array (Tap to add new value - empty means delete) - Slow as it edit the entire array
                //setPeople(() => {});                                    //10. Add function to edit what is selected leaving the unselected at current state
                
                //setPeople(() => {
                setPeople((prevPeople) => {                                                   //11. Takes the current state
                    //return prevPeople.filter();                                             //12. Filter out the selected items from the unselected ones
                    return prevPeople.filter(person => person.id != id);                      //13. Filter will run a function that returns a boolean where TRUE is when the id selected is not equal to the id
                });
            } 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}         
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            //<Text style={styles.item}>{item.name}</Text>
                            //<TouchableOpacity><Text style={styles.item}>{item.name}</Text></TouchableOpacity>   //02. Add Touchable Component
                            
                            //<TouchableOpacity>
                            //<TouchableOpacity onPress={}>                                                       //03. Add onPress prop
                            //<TouchableOpacity onPress={() => pressHandler()}>                                   //04. Add function
                            //<TouchableOpacity onPress={() => pressHandler(item.id)}>                            //05. Add id of every property in the array
                                <Text style={styles.item}>{item.name}</Text>
                            </TouchableOpacity>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,          
                marginTop: 24,               
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Todo App - Part 1





























///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








