///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React Native - Mobile App Development

All 3 links below must be understood before heading out here
  https://github.com/Izaat/references/blob/main/React%20Fundamentals
  https://github.com/Izaat/references/blob/main/React%20App
  https://github.com/Izaat/references/blob/main/React%20Context%20and%20Hooks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Creating React Native App  - npm install expo-cli --global
02. View, Text and Styles
03. Using State
04. Text Inputs
05. Lists and ScrollView - Mapping Method
06. List Component
07. Touchable Components
08. Todo App - Part 1
09. Todo App - Part 2 - Add Press event
10. Todo App - Part 3

11. Todo App - Part 4 - Alerts
12. Dismissing the Keyboard
13. Flexbox Basics
14. Icons and more Flexbox
15. Reviews App                       [New App]
16. Custom Fonts
17. Global Styles
18. React Navigation Setup
19. Stack Navigator
20. Navigating Around

21. Passing Data Between Screens
22. Navigation Options
23. Drawer Navigation
24. Custom Header Component
25. Custom Card Component
26. Using Images
27. Background Images
28. Modals
29. Formik Forms - Part 1 - npm install formik
30. Formik Forms - Part 2
31. Validation with Yup - npm install yup
32. Showing Form Errors
33. Custom Button Component

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Creating React Native App

    React Native Apps can be coded in multiple different ways in CLI (Command Line Interface): 
        Expo CLI - For beginners (Simplified app development workflow) - Standalone dev GUI
        React Native CLI - Requires Xcode or Android Studio to get started

    Installing Expo CLI
        npm install expo-cli --global
        Paste the line above into Command Prompt/Terminal

    Create Project (From Terminal)
        Navigate into your target directory and enter the lines below
            expo init myproject
            cd myproject
            expo start
        
        A menu will appear and select "Blank - Minimal app as clean as empty canvas"
        Type in project name
            "expo"; {
                "name": "myproject",
                "slug": "myproject"
            }

        To start coding
            cd myproject       //Enter directory
            code .             //To open project with VSCode
            expo start         //To begin coding in VSCode (Enter this line in Command Prompt/Terminal) - OR - npm start
            
            NOTE: The browser is more for a debugging tool. Scan the QR code (With Expo Client) to  preview your project app inside the phone
    
    Preview Menu in Command Prompt / VS Code Terminal
        a - Android Emulator (Open Emulator first before pressing "a")
        e - email
        s - Sign in to Expo
        Ctrl+C - Exit menu
    
    Previewing App directly from iPhone
        Install app "Expo Client"

    Preview App from Android Studio
        Start Android Studio > Configure > AVD Manager > Create Android Virtual Device > Press Play
        Browser > Side Panel > Run on Android Device/Emulator - To install and allow drawing on Expo
        Browser > Side Panel > Run on Android Device/Emulator - To download and run app

    Project Directory
        ../assets - Images
        ../node_modules - dependencies and packages
        gitignore - version control
        App.js - project codes
        app.json - project information
        babel.config.js - Babel is a compiler that allows project to use modern javascript features
        package-lock.json - Project information
        package.json - Project information

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. View, Text and Styles

    ////////////////////////////////////
    App.js (Default Code)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>                     //"View" is similar to "Div" in Html
                    <Text>Open up App.js to start working on your app!</Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({                           //This will be like stylesheet from CSS but without ".container" in "stylesheet.css"
            container: {
                flex: 1,
                backgroundColor: '#fff',                                  //Notice that in CSS, the title will be "background-color", but in React, titles use camel cases (backgroundColor) 
                alignItems: 'center',
                justifyContent: 'center',
            },
        });
        
    ////////////////////////////////////
    App.js (Adding HTML style header container and body container)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    //<Text>Open up App.js to start working on your app!</Text>        //Remove
                    <View style={styles.header}>                                       //Add another View within a view (Just like Div)
                        //<Text>Hello</Text>
                        <Text style={styles.boldText}>Hello</Text>                     //Add style to the text, to be reflected in "style"
                    </View>
                    
                    <View style={styles.body}>                                         //Add body texts
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                                                                  //Add header stylesheet
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                                                               //Add body stylesheet
                backgroundColor: 'yellow',
                padding: 20,                                                      //In pixels
                //fontWeight: bold,                                               //Note that the body will not inherit fontWeight from header container
            },
        });

    ////////////////////////////////////
    App.js (Using bold fonts to body container) - 3 Points
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <View style={styles.header}>    
                        <Text style={styles.boldText}>Hello</Text>
                    </View>
                    
                    <View style={styles.body}>                  
                        //<Text>Lorem ipsum dolor sit amet</Text>
                        //<Text style={styles.boldText}>Lorem ipsum dolor sit amet </Text>          //02. Similar method from header container will be used for body instead
                        <Text style={styles.boldText}>   
                            Lorem ipsum <Text>Test</Text>  dolor sit amet                           //03. The text inside text component (child components) will also inherit the parent's bold style
                        </Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                            
                backgroundColor: 'yellow',
                padding: 20,                           
                //fontWeight: bold,                                                               //01. Note that the body will not inherit fontWeight from the header container
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Using State

    ////////////////////////////////////
    App.js (Default)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <Text></Text>
                    <Text></Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (Using react hooks for deploying state in a function component) - 16 points
        import React, {useState} from 'react';                                   //01. Add useState library
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, Button} from 'react-native';             //06. Import react default button styles
        
        export default function App() {
            //const []                                                           //02. Create an array
            const [name, setName] = useState('izaat');                           //03. name will get value of izaat. Use "setName" to change "name" value (Note that this is a string)
            
            //const [person, setPerson] = useState({});                          //13. Use useState as object
            const [person, setPerson] = useState({name: 'mario', age: 40});      //14. Use 2 properties for the object (name and age)
            
            //const clickHandler = () => {}                                      //10.  Const for the function
            const clickHandler = () => {
                setName('Ali');                                                  //11. Add the setName and assign as another name
                setPerson({name: 'luigi', age: 39});                             //16. Add and assign the new properties to the button
            }   
            
            return (
                <View style={styles.container}>           
                    //<Text></Text>
                    <Text>My name is {name} </Text>                              //04. To output the name
                    
                    <Text>His name is {person.name} and his age is {person.age}</Text>        //15. Deploy the 2 properties into the text
                    
                    <View style={styles.buttonContainer}>                        //05. Add button style
                        //<Button title='update name' />                         //07. Add the button to update name. Notice this is the default style button and can't be customized
                        //<Button title='update name' onPress{} />               //09. Make the button clickable, but first, create a const for the function
                        <Button title='update name' onPress{clickHandler} />     //12. Assign the function to the button (When button is clicked, Ali will appear instead)
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            buttonContainer: {
                marginTop: 20,                                                      //08. This brings doen the button lower (Similar to padding)
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Text Inputs

    //////////////////////////////////// 
    App.js (Default)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (With text input fields)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, TextInput} from 'react-native';         //01. Import TextInput
        
        export default function App() {
            const [name, setName] = useState('izaat');  
            const [age, setAge] = useState('30');   
            
            return (
                <View style={styles.container}>           
                    <Text>Enter name:</Text>                            //02. Add Text input field
                    //<TextInput />                                     //03. Add text input tag (But with this line, it wont show the box, just plain)
                    //<TextInput style={styles.input} />                //04. Add styles to the text input field
                    <TextInput 
                        //multiline                                     //10. Just add this line for the expanding box feature
                        style={styles.input} 
                        placeholder = 'e.g John Doe'                    //06. Add placeholder (Greyed out example)
                        //onChangeText = {() => setName()}              //07. Enable text input field to capture the entered value
                        onChangeText = {(val) => setName(val)}          //08. Set as anonymous variable
                    />

                    <Text>Enter age:</Text>                             //09. Add for age
                    <TextInput 
                        //keyboardType='numeric'                        //11. Only shows the numeric keyboard to enter age
                        style={styles.input} 
                        placeholder = 'e.g 18-99'      
                        onChangeText = {(val) => setAge(val)} 
                    />

                    <Text>Name is: {name}, Age is: {age} </Text>       
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            //input: {}                                                   //05. Add style to text input field 
            input: {
                borderWidth: 1,               
                borderColor: '#777',            
                padding: 8,                          
                margin: 10,             
                width: 200,              
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Lists and ScrollView - Mapping Method

    //////////////////////////////////// 
    App.js (With input list)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native';     
        
        export default function App() {
            //const [people, setPeople] = useState([]);       //01. Set as array  
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                    //{people.map}                                             //06. Use map method to turn an array into a list
                    //{people.map( ()=>{} )}                               //07. Add arrow function that will execute each item in the array
                    //{people.map( (item)=>{} )}                        //08. Assign a name to retrieve the item from array
                    //{people.map( (item)=>{ return() } )}          //09. To return JSX code for each item in the array
                    {people.map( (item)=>{ 
                        return(
                            //<View>
                            <View key={item.key}>                          //11. Retrieve the unique key for each property/item
                                //<Text>{item.name}</Text>            //10. This will grab the name property from the array
                                <Text style={styles.item}>{item.name}</Text>    //12. Add styles
                            </View>
                        ) 
                    })} 
                    
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                                                 //02. Add padding
                paddingHorizontal: 20,                                       //03. Add padding
                //alignItems: 'center',                                        //04. Not in use
                //justifyContent: 'center',                                  //05. Not in use
            },
            item: {                                                                   //13. Add style
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    App.js (With ScrollView)
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View} from 'react-native';     
        import {StyleSheet, Text, View, ScrollView} from 'react-native';        //01. Import ScrollView
        
        export default function App() {
            const [people, setPeople] = useState([
                { name: 'izaat', key: '1' },
                { name: 'yoshi', key: '2' },
                { name: 'mario', key: '3' },
                { name: 'luigi', key: '4' },
                { name: 'peach', key: '5' },
                { name: 'toad', key: '6' },
                { name: 'bowser', key: '7' },
            ]); 
            
            return (
                <View style={styles.container}>           
                
                    //{people.map( (item)=>{ 
                    //    return(
                    //        <View key={item.key}>       
                    //            <Text style={styles.item}>{item.name}</Text>   
                    //        </View>
                    //    ) 
                    //})} 
                    
                    //<ScrollView>{people.map}</ScrollView>                      //02. Add everything into ScrollView
                    
                    //<ScrollView>
                    //    {people.map( (item)=>{ 
                    //        return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                    //        ) 
                    //    })} 
                    //</ScrollView>  
                    
                    //CLEANING UP THE CODE
                    //<ScrollView>
                        //{people.map( (item)=>{ 
                        //{people.map( item=>{                                     //03. Bracket not required since single item is used
                    //    {people.map( item=>(                                     //04. Curly braces and return line wont be used and this can be done directly 
                            //return(
                    //            <View key={item.key}>       
                    //                <Text style={styles.item}>{item.name}</Text>   
                    //            </View>
                            //) 
                        //})} 
                    //    ))} 
                    //</ScrollView>  
                    
                    //THEREFORE AFTER CLEANING UP
                    <ScrollView>
                        {people.map( item=>(         
                            <View key={item.key}>       
                                <Text style={styles.item}>{item.name}</Text>   
                            </View>
                        ))} 
                    </ScrollView>  

                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. List Component - FlatList
    
    ////////////////////////////////////  - 10 points
    FlatList only updates the differences in the list (Fast loading cycle)
    Scrollview rerender everything from the beginning (Slow loading cycle)
    
    App.js (With FlatList)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';             //01. Import FlatList
        
        export default function App() {
            const [people, setPeople] = useState([
                //{ name: 'izaat', key: '1' },                                     //06. Using "id" instead of "key" like database. App will give warning about missing keys
                //{ name: 'yoshi', key: '2' },
                //{ name: 'mario', key: '3' },
                //{ name: 'luigi', key: '4' },
                //{ name: 'peach', key: '5' },
                //{ name: 'toad', key: '6' },
                //{ name: 'bowser', key: '7' },
                
                { name: 'izaat', id: '1' },                                        //07. To work around the missing key, "keyExtractor" will be used
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    //<FlatList />                                                  //02. Add FlatList
                    <FlatList 
                        //keyExtractor={() => }                                     //08. To mention what will be used for the keys
                        //keyExtractor={(item) => }                                 //09. Iterates each item in the array
                        keyExtractor={(item) => item.id}                            //10. Declaring "id" as the key
                        data={people}                                               //03. Us people array as the data
                        //renderItem={()=>(JSX)}                                    //04. Add renderItem to render the data
                        //renderItem={({item})=>(JSX)}                              //05. Add array properties (item) to function (Curly braces is to destructure the array)
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
            },
        });

    //////////////////////////////////// 
    From the above code, the app only output the array in a single column
    numColumns enables the app to output multiple columns
    
    App.js (With numColumns)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';     
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}                                                            //01. Added numColumns
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            <Text style={styles.item}>{item.name}</Text>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,                                                             //02. Add horizontal margins to columns
                marginTop: 24,                                                                    //03. Add top margins
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Touchable Components
    
    13 points
    Adding onPress event to individual items (Use button and attach to onPress prop)
    But the method can't be applied to text components "<Text>"
    Although <Text> components can be turned into buttons, custom stylized props can't be added to those buttons
    To use custom styled buttons on text components, touchable component will be used
    Take note of the entire list of Touchable components available and the one being used here is "TouchableOpacity" - Transparent when touched
    
    App.js 
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList} from 'react-native';     
        import {StyleSheet, Text, View, FlatList, TouchableOpacity} from 'react-native';     //01. Import TouchableOpacity
        
        export default function App() {
            const [people, setPeople] = useState([
                
                { name: 'izaat', id: '1' },                      
                { name: 'yoshi', id: '2' },
                { name: 'mario', id: '3' },
                { name: 'luigi', id: '4' },
                { name: 'peach', id: '5' },
                { name: 'toad', id: '6' },
                { name: 'bowser', id: '7' },
                
            ]); 
            
            //const pressHandler = ()  => {}                              //06. Create pressHandler function
            //const pressHandler = (id)  => {}                            //07. pressHandler to take in id as the value
            const pressHandler = (id)  => {
                console.log(id);                                          //08. Output to console (To view console, check Expo in browser)
                //setPeople([]);                                          //09. Add function to edit entire array (Tap to add new value - empty means delete) - Slow as it edit the entire array
                //setPeople(() => {});                                    //10. Add function to edit what is selected leaving the unselected at current state
                
                //setPeople(() => {
                setPeople((prevPeople) => {                                                   //11. Takes the current state
                    //return prevPeople.filter();                                             //12. Filter out the selected items from the unselected ones
                    return prevPeople.filter(person => person.id != id);                      //13. Filter will run a function that returns a boolean where TRUE is when the id selected is not equal to the id
                });
            } 
            
            return (
                <View style={styles.container}>           
                    <FlatList 
                        numColumns={2}         
                        keyExtractor={(item) => item.id}     
                        data={people}                          
                        renderItem={({item})=>(       
                            //<Text style={styles.item}>{item.name}</Text>
                            //<TouchableOpacity><Text style={styles.item}>{item.name}</Text></TouchableOpacity>   //02. Add Touchable Component
                            
                            //<TouchableOpacity>
                            //<TouchableOpacity onPress={}>                                                       //03. Add onPress prop
                            //<TouchableOpacity onPress={() => pressHandler()}>                                   //04. Add function
                            //<TouchableOpacity onPress={() => pressHandler(item.id)}>                            //05. Add id of every property in the array
                                <Text style={styles.item}>{item.name}</Text>
                            </TouchableOpacity>
                        )}                   
                    />
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                paddingTop: 40,                         
                paddingHorizontal: 20,       
            },
            item: {                      
                marginTop: 24,
                padding: 30,
                backgroundColor: 'pink',
                fontSize: 24,
                marginHorizontal: 10,          
                marginTop: 24,               
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Todo App - Part 1

    ///////////////////////////
    App.js (Initial Code)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 

        export default function App() {
            return (
                <View style={styles.container}>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
        });

    ///////////////////////////
    App.js (Format)
        import React, {useState} from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 

        export default function App() {
            return (
                <View style={styles.container}>
                    {/* header */}
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            {/* todo list */}
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
        });

    ///////////////////////////
    App.js (Code)
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, FlatList} from 'react-native';           //01. Add FlatList

        export default function App() {
            //const [todos, setTodos] = useState([]);                            //03. Add data array
            const [todos, setTodos] = useState([                                 //04. Add data
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            return (
                <View style={styles.container}>
                    {/* header */}
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            //{/* todo list */}
                            //<FlatList />                                         //02. Add FlatList component
                            <FlatList 
                                data={todos}                                       //05. Add todos data
                                //renderItem={}                                    //06. This renders each item in the list
                                //renderItem={() => ()}                            //07. Is a function to return JSX
                                //renderItem={({item}) => ()}                      //08. Extracts the item
                                renderItem={({item}) => (
                                    <Text>{item.text}</Text>                       //09. Output the item text i.e buy coffee
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            //content: {}                   //10. Styling under <View style={styles.content}> (Move text to right)
            content: {
                padding: 40,
            },
            //list: {}                      //11. Styling under <View style={styles.list}> (Move text down)
            list: {
                marginTop: 20,
            }
        });

    ///////////////////////////
    Creating header and form with another file
        Create new folder under "MYPROJECT" and name it "components"
        Add new files under "components" folder
        Explorer
            Myproject
                .expo
                .expo-shared
                assets
                node_modules
                components                     //01. Add components folder
                    header.js                  //02. Add file
                App.js
    
    header.js
        import React from 'react';                               //03. Import default
        import {StyleSheet, Text, View} from 'react-native';     //04. Import 3 items
    
        //export default function Header() {}                    //05. header.js will ultimately be exported to App.js as a function called "Header"
        export default function Header() {
            //return ()                                          //06. To return some JSX
            return (
                //<View></View>                                  //07. Add View
                //<View>
                <View style={styles.header}>                     //08. Add style property for header
                    //<Text>My Todos</Text>
                    <Text style={style.title}>My Todos</Text>    //09. Add style property for title
                </View>
            )   
        }
    
        //const styles = StyleSheet.create({});                  //10. Create stylesheet
        const styles = StyleSheet.create({
            header: {                                            //11. Add stylesheet properties
                height: 80,
                paddingTop: 38,
                backgroundColor: 'coral'
            },
            title: {
                textAlign: 'center',
                color: '#fff',
                fontSize: 20,
                fontWeight: 'bold'
            }
        });        
    
    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';                        //12. Import header file

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            return (
                <View style={styles.container}>
                    //{/* header */}
                    <Header />                                             //13. Add header.js
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <Text>{item.text}</Text>  
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Todo App - Part 2 - Add Press event to delete item
    
    File Structure <Explorer>
        MyProject
            Component
                header.js [Topic 7]
                todoItem.js                                                  // 01. To create
            App.js    
    
    todoItem.js
        import React from 'react';                                         
        import {StyleSheet, Text, TouchableOpacity} from 'react-native';     //02. Surround text with TouchableOpacity
        
        //export default function TodoItem() {}                              //03. Add in export function
        //export default function TodoItem(props) {}                         //04. To pass in props item from App.js
        //export default function TodoItem({item}) {}                        //09. Use destructuring method to get the item instead of using "props"
        //export default function TodoItem({item}) {
        export default function TodoItem({item, pressHandler}) {             //22. Destucture the pressHandler
            return(
                //<TouchableOpacity>
                //<TouchableOpacity onPress={}>                              //14. Add onPress event handler
                //<TouchableOpacity onPress={() => pressHandler()}>          //23. Calls the function
                <TouchableOpacity onPress={() => pressHandler(item.key)}>    //24. Also to pass in the key 
                    //<Text>{item.text}</Text>                               //10. Add Text that is surrounded by TouchableOpacity
                    <Text style={styles.item}>{item.text}</Text>             //12. Apply style to the texts
                </TouchableOpacity>
            )
        }
    
        const styles = StyleSheet.create({                                    //11. Add StyleSheet
            item: {                              
                padding: 16,
                marginTop: 16,
                borderColor: '#bbb',
                borderWidth: 1,
                borderStyle: 'dashed',
                borderRadius: 10
            }
        }) 

    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';  
        import TodoItem from './components/todoItem';                     //13. Import todoItem.js

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            //const pressHandler = (key) => {}                            //15. Add pressHandler for onPress function
            const pressHandler = (key) => {
                //setTodos(() => {})                                      //16. Pass a function
                //setTodos((prevTodos) => {})                             //17. Add previous todos
                setTodos((prevTodos) => {
                    //return prevTodos.filter()                           //18. Filter out previous todos from current array and take out the one with the same key
                    //return prevTodos.filter(todo)                       //19. Takes in individual todo as it cycles through the array
                    return prevTodos.filter(todo => todo.key != key);     //20. Return true or false
                }) 
            } 
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        {/* todo form */}
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    //<Text>{item.text}</Text>              //05. Remove
                                    //<TodoItem />                          //06. To use separate <TodoItem /> component file instead
                                    //<TodoItem item={} />                  //07. Add in props
                                    //<TodoItem item={item} />              //08. To be equal to item being rendered in "renderItem={}"
                                    <TodoItem item={item} pressHandler={pressHandler} />             //21. Pass down the pressHandler function as prop
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Todo App - Part 3 - Create form and add a Press event to add items
    
    Create Form = Point 1 to 15
    Adding Press event = Point 16 to 27
    NOTE: Scrolling wont work since Flatlist is used
    
    File Structure <Explorer>
        MyProject
            Component
                header.js [Topic 7]
                todoItem.js  [Topic 9]
                addTodo.js                                                         //01. Create addTodo.js in "Component" folder
            App.js    

    addTodo.js
        import React, {useState} from 'react';                                      //02. Import React and useState
        import {StyleSheet, Text, View, TextInput, Button} from 'react-native';     //03. Import View, TextInput and Button
        
        //export default function AddTodo() {}                                      //04. add export default function
        //export default function AddTodo() {
        export default function AddTodo({submitHandler}) {                          //26. Destructure "submitHandler" prop
            
            const [text, setText] = useState('');                                   //10. Add a function that tracks the user's text in text input box where the default is an empty string
            
            //const changeHandler = () => {}                                        //09. Add changeHandler function
            //const changeHandler = (val) => {}                                     //11. Takes in a parameter pushed by "onChangeText"
            const changeHandler = (val) => {
                setText(val);                                                       //12. Set the text
            } 
            
            return (
                <View>
                    //<TextInput />                                                 //05. Add Text input container
                    <TextInput 
                        style={styles.input}                                        //13. Add styles to text
                        placeholder='new todo...'                                   //06. The default text inside text input box
                        //onChangeText={(val) => changeHandler(val)}                //07. Triggers a function (changeHandler) once text input box has user text and push to "val"
                        onChangeText={changeHandler}                                //08.  Shorter version of above code
                    /> 
                    
                    //<Button onPress={} text='add todo' color='coral' />           //17. Add button with placeholder text and color
                    //<Button onPress={() => console.log(text)} title='add todo' color='coral' />      //18. Add anonymous function and output the current text to console (Run app to see result)
                    <Button onPress={() => submitHandler(text)} title='add todo' color='coral' />      //27. Pass text to submitHandler instead of console.log
                </View>
            )
        }     
        
        //const styles = StyleSheet.create({})                              //14. Add StyleSheet function
        const styles = StyleSheet.create({
            input: {
                marginBottom: 10,
                paddingHorizontal: 8,
                paddingVertical: 6,
                borderBottomWidth: 1,
                borderBottomColor: '#ddd'
            }
        })  

    
    App.js
        import React, {useState} from 'react';
        import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';                           //15. Link file "addTodo" to "App.js"

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            //const submitHandler = (text) => {}                                 //19. This function is to push the text to the useState array
            const submitHandler = (text) => {
                //setTodos()                                                     //20. Add setTodos() to update the useState array
                //setTodos((prevTodos) => {})                                    //21. Add function as an argument and capture current array as "prevTodos"
                setTodos((prevTodos) => {
                    //return[];                                                  //22. Return a new array
                    return[
                        {text: text, key: Math.random.toString},                 //24. Add in new text into array and tag a key with random number to it and convert it into a string. DO NOT USE MATH OPERATION FOR PRODUCTION CODE
                        ...prevTodos                                             //23. Use spread operator to spread out the array
                    ];
                })
            }     
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        //{/* todo form */}
                        //<AddTodo />                                             //16. Nest AddTodo
                        <AddTodo submitHandler={submitHandler} />                 //25. Add "submitHandler" as prop
                        
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <TodoItem item={item} pressHandler={pressHandler} />   
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Todo App - Part 4 - Alerts
    
    Add minimum character limit: Point 1 to 4
    Add alert: Point 5 to 9
    
    File Structure <Explorer>
        MyProject
            Component
                header.js      [Topic 7]
                todoItem.js   [Topic 9]
                addTodo.js   [Topic 10]
            App.js               [Topic 10]

    App.js
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList} from 'react-native';  
        import {StyleSheet, Text, View, FlatList, Alert} from 'react-native';       //05. Add Alert component
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';       

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            const submitHandler = (text) => {
                
                //if(text.length > 3){}                                        //01. If the characters entered into the text input box is more than 3 chracters, then updating useState is enabled
                if(text.length > 3){
                    setTodos((prevTodos) => {                                  //03. Paste here
                        return[
                            {text: text, key: Math.random.toString},    
                            ...prevTodos                        
                        ];
                    });                                                        //04. Add semicolon since it is no longer a main function
                //} 
                //}else{}                                                      //06. Add else statement
                }else{
                    //Alert.alert();                                           //07. Calling ".alert()" method on the "Alert." object
                    //Alert.alert('Oops', 'Todos title too short', []);        //08. Alert.alert('Title', 'message', [array])
                    Alert.alert('Oops', 'Todos title too short', [
                        {text: 'OK', onPress: () => console.log('alert closed')}  //09. This adds the alert text box with OK button
                    ]);
                }   
                
                //setTodos((prevTodos) => {                                     //02. Move setTodos into the "if" function
                //    return[
                //        {text: text, key: Math.random.toString},    
                //        ...prevTodos                        
                //    ];
                //})
            }     
            
            return (
                <View style={styles.container}>
                    <Header />    
                    <View style={styles.content}>
                        <AddTodo submitHandler={submitHandler} />  
                        
                        <View style={styles.list}>
                            <FlatList 
                                data={todos}          
                                renderItem={({item}) => (
                                    <TodoItem item={item} pressHandler={pressHandler} />   
                                )} 
                            />
                        </View>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Dismissing the Keyboard

    Enabling a feature that hides the keyboard after tapping outside the keyboard
    Wrap a component with another component - TouchableWithoutFeedback (Touchable component that won't affect the content)
    
    File Structure <Explorer>
        MyProject
            Component
                header.js      [Topic 7]
                todoItem.js   [Topic 9]
                addTodo.js   [Topic 10]
            App.js               [Topic 11]


    App.js
        import React, {useState} from 'react';
        //import {StyleSheet, Text, View, FlatList, Alert} from 'react-native';    
        import {StyleSheet, Text, View, FlatList, Alert, TouchableWithoutFeedback, Keyboard} from 'react-native';    //01. Import component and keyboard component
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';       

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            const submitHandler = (text) => {
                
                if(text.length > 3){
                    setTodos((prevTodos) => {               
                        return[
                            {text: text, key: Math.random.toString},    
                            ...prevTodos                        
                        ];
                    });                                                       
                }else{
                    Alert.alert('Oops', 'Todos title too short', [
                        {text: 'OK', onPress: () => console.log('alert closed')} 
                    ]);
                }   
                
            }     
            
            return (
                //<View style={styles.container}>
                //    <Header />    
                //    <View style={styles.content}>
                //        <AddTodo submitHandler={submitHandler} />  
                //        
                //        <View style={styles.list}>
                //            <FlatList 
                //                data={todos}          
                //                renderItem={({item}) => (
                //                    <TodoItem item={item} pressHandler={pressHandler} />   
                //                )} 
                //            />
                //        </View>
                //    </View>
                //</View>
                
                //<TouchableWithoutFeedback>                               //02. Wrap the component            
                //<TouchableWithoutFeedback onPress={() => {}}>            //03. Add onPress tag with a function
                <TouchableWithoutFeedback onPress={() => {
                    //console.log('keyboard hide activated');              //04. For testing - Check in console
                    Keyboard.dismiss();                                    //05. Add function that hides the keyboard
                }}> 
                    <View style={styles.container}>
                        <Header />    
                        <View style={styles.content}>
                            <AddTodo submitHandler={submitHandler} />  
                            
                            <View style={styles.list}>
                                <FlatList 
                                    data={todos}          
                                    renderItem={({item}) => (
                                        <TodoItem item={item} pressHandler={pressHandler} />   
                                    )} 
                                />
                            </View>
                        </View>
                    </View>
                </ TouchableWithoutFeedback>
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
            },
            list: {
                marginTop: 20,
            }
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Flexbox Basics
    
    Notice that when there are too many items in the list, the list will bleed off screen and users can't see what is off screen
    Flexbox solves this problem and has the exact same characteristics with CSS Flexbox
    Read all 30 points
    
    File Structure <Explorer>
        MyProject
            Component
                addTodo.js   [Topic 10]
                header.js      [Topic 7]
                sandbox.js    [Add sandbox file]
                todoItem.js   [Topic 9]
            App.js               [Topic 12]


    sandbox.js [Default]                                                                 //01. Create sandbox.js file
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 
        
        export default function Sandbox() {
            return (
                <Text>sandbox</Text>
            )
        }
        
        const styles = StyleSheet.create({});

    sandbox.js [Code]                        
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native'; 
        
        export default function Sandbox() {
            return (
                //<Text>sandbox</Text>
                //<View style = {styles.container}></View>                                 //05. Add view wrapper with style container
                <View style = {styles.container}>
                    <Text style={styles.boxOne}> one </Text>                               //10. Add a nest of texts
                    <Text style={styles.boxTwo}> two </Text>
                    <Text style={styles.boxThree}> three </Text>
                    <Text style={styles.boxFour}> four </Text>
                </View>
            )
        }
        
        const styles = StyleSheet.create({
            //container: {}                                                                 //06. Add style container
            container: {
                //flex: 1,                                                                  //09. Try adding flexbox and hit save. The light grey box (#ddd) will cover entire screen (stretch).   //15. If removed, only the padding area is filled
                //flexDirection: 'column',                                                  //13. Adding the default style of flexbox. Save this and nothing will happen
                flexDirection: 'row',                                                       //14. Notice that by changing column to "row", everything is vertical. Not that this is the declaration for the "main axis" while the secondary will be "column"
                justifyContent: 'space-around',                                             //16. How different element should be spread out in the main axis (center/flex-end/flex-start(default)/space-around/space-between/space-evenly)
                //alignItems: 'center',                                                     //17. For secondary axis (baseline/center/flex-end/flex-start/stretch). Save and note that nothing will change until the paddings for each box are different
                alignItems: 'flex-start',                                                   //19. If flex-start is used, boxes of different sizes will aligned to the top. Flex-end is bottom
                paddingTop: 40,                                                             //07. Add paddings
                backgroundColor: '#ddd',                                                    //08. Add color - light grey. When hit save here, a grey strip appears at the top
            },
            
            //boxOne: {},                                                                   //11. Add nest of styles
            //boxTwo: {},
            //boxThree: {},
            //boxFour: {},
            
            boxOne: {
                //flex: 1,                                                                   //20a. Add flex 1 and this will stretch out the box. 
                flex: 3,                                                                     //21. [Add all the numbers of flexes across all boxes and divide by the entire length of column, this will give the size of flex number]
                backgroundColor: 'violet',                                                   //12a. Add properties. Save and test to see the bars of different colors on screen
                padding: 10,                                                                 //12b. Also note that the default behavior of flex is that it takes the entire width or height
            },                                                                               //12c. And for this, flexDirection style is set as 'column' (horizontal) as default
            boxTwo: {
                flex: 1,                                                                     //20b
                backgroundColor: 'gold',
                //padding: 10,                                                               //18a. Change 10 to 20
                padding: 20, 
            },
            boxThree: {
                flex: 1,                                                                      //20c
                backgroundColor: 'coral',
                //padding: 10,                                                                //18b. Change 10 to 30
                padding: 30, 
            },
            boxFour: {
                flex: 1,                                                                      //20d. Save and watch the 4 boxes stretch horizontally
                backgroundColor: 'skyblue',
                //padding: 10,                                                                //18c. Change 10 to 40 (Save and see the boxes of different sizes are centered horizontally)
                padding: 40, 
            }
        });

    App.js
        import React, {useState} from 'react'; 
        import {StyleSheet, Text, View, FlatList, Alert, TouchableWithoutFeedback, Keyboard} from 'react-native';
        import Header from './components/header';  
        import TodoItem from './components/todoItem';      
        import AddTodo from './components/addTodo';       
        import Sandbox from './components/sandbox';                                       //03. Import sandbox file into App.js

        export default function App() {
            const [todos, setTodos] = useState([   
                { text: 'buy coffee', key: '1' },
                { text: 'create an app', key: '2' },
                { text: 'play on the switch', key: '3' },
            ]);  
            
            const pressHandler = (key) => {
                setTodos((prevTodos) => {
                    return prevTodos.filter(todo => todo.key != key);   
                }) 
            } 
            
            const submitHandler = (text) => {
                
                if(text.length > 3){
                    setTodos((prevTodos) => {               
                        return[
                            {text: text, key: Math.random.toString},    
                            ...prevTodos                        
                        ];
                    });                                                       
                }else{
                    Alert.alert('Oops', 'Todos title too short', [
                        {text: 'OK', onPress: () => console.log('alert closed')} 
                    ]);
                }   
                
            }     
            
            return (
                //<TouchableWithoutFeedback onPress={() => {                                  //02. Comment out touchable component
                //    Keyboard.dismiss();                              
                //}}> 
                //    <View style={styles.container}>
                //        <Header />    
                //        <View style={styles.content}>
                //            <AddTodo submitHandler={submitHandler} />  
                //            
                //            <View style={styles.list}>
                //                <FlatList 
                //                    data={todos}          
                //                    renderItem={({item}) => (
                //                        <TodoItem item={item} pressHandler={pressHandler} />   
                //                    )} 
                //                />
                //            </View>
                //        </View>
                //    </View>
                //</ TouchableWithoutFeedback>
                
                //<Sandbox />                                                                   //04. Add sandbox. Save project and "sandbox" text will appear on the screen.      //22. Remove sandbox
                
                <TouchableWithoutFeedback onPress={() => {                                      //23. Add back Touchable to implement flexbox method to enable scroll
                    Keyboard.dismiss();                              
                }}> 
                    <View style={styles.container}>
                        <Header />    
                        <View style={styles.content}>                                           //24. Only 2 wrapper can be setup for flexbox. "container" and "content" Since flex already exist in "container" (stretch to screen height), "content" is left for scroll
                            <AddTodo submitHandler={submitHandler} />  
                            
                            <View style={styles.list}>
                                <FlatList 
                                    data={todos}          
                                    renderItem={({item}) => (
                                        <TodoItem item={item} pressHandler={pressHandler} />   
                                    )} 
                                />
                            </View>
                        </View>
                    </View>
                </ TouchableWithoutFeedback>
                
            );
        }
        
        const styles = StyleSheet.create({
            container: {
                flex: 1,
                backgroundColor: '#fff',
            },
            content: {
                padding: 40,
                //backgroundColor: 'pink',                                                      //25. Add this and save to see where the wrapper actually is on screen           //29. Remove
                flex: 1,                                                                      //26. The wrapper will stretch as more todo list elements are being added
            },
            list: {
                marginTop: 20,
                //backgroundColor: 'yellow',                                                     //27. Add this and save to see where the wrapper actually is on screen             //30. Remove
                flex: 1,                                                                      //28. The wrapper will constraint to content flexbox as more todo list elements are being added
            }
        });



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Icons and more Flexbox

    Using Expo Icon Collections
        docs.expo.io/versions/latest/guides/icons/
        Click on @expo/vector-icons directory
        expo.github.io/vector-icons/                   //Note where the icons come from (Example: AntDesign, MaterialIcons, etc)

    File Structure <Explorer>
        MyProject
            Component
                addTodo.js   [Topic 10]
                header.js      [Topic 7]
                sandbox.js    [Topic 13]
                todoItem.js   [Topic 9]
            App.js               [Topic 13]

    todoItem.js
        import React from 'react';                                         
        //import {StyleSheet, Text, TouchableOpacity} from 'react-native';
        import {StyleSheet, Text, TouchableOpacity, View} from 'react-native';        //02. Add View component
        import {MaterialIcons} from '@expo/vector-icons';                             //01. Import icons
        
        export default function TodoItem({item, pressHandler}) { 
            return(
                <TouchableOpacity onPress={() => pressHandler(item.key)}>  
                    //<View></View>                                                    //03. Add View component
                    //<View style={styles.item}></View>                                //04. Add styles to view component
                    <View style={styles.item}>
                        //<MaterialIcons name='delete' />                              //05. Add MaterialIcons tag
                        <MaterialIcons name='delete' size={18} color='#333' />         //09. Add style to icon where "18" is pixel size. Note icon is still on top of of text.
                        //<Text style={styles.item}>{item.text}</Text>                 //07. Inside view component and test the app. The icon will show up outside the box on top of text
                        //<Text>{item.text}</Text>                                     //08. Icon will appear inside the box on top of text
                        <Text style={styles.itemText}>{item.text}</Text>               //11. To add space between icon and text
                    </View>
                    //<Text style={styles.item}>{item.text}</Text>                     //06. Move this line to View component
                </TouchableOpacity>
            )
        }
    
        const styles = StyleSheet.create({      
            item: {                              
                padding: 16,
                marginTop: 16,
                borderColor: '#bbb',
                borderWidth: 1,
                borderStyle: 'dashed',
                borderRadius: 10,
                flexDirection: 'row'                                                     //10. This will relocate the icon to the side of text. Note that there is no space in between
            },
            itemText: {
                marginLeft: 10,                                                          //12. Add space spacing and save.
            }
        }) 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Reviews App

    **New App. Previous App stays at topic 14
    
    Structure of "Reviews App"
        Screens
            Home
            Reviews Details
            About
        Behaviour
            Modal -> Slider & Popup, Also Adds a review to the app
            React Navigation -> Linking between Screens

                +------------------------------------------------------+
                |                                                      |
        +---------+                  +--------------------+      +---------+
        |   Home  |----<-------->----| Review Details     |      |  About  |
        +---------+                  +--------------------+      +---------+


    Starting Up
        Command Prompt > Navigate to Project Folder > 
            Example: "C:\Users\...\...\Project\apps>"
        Type in:
            expo init gamezone                         //01. Where "gamezone" is the name of the project. 
        A menu will appear and under "Managed workflow", choose "blank" and press Enter
        A script will appear and replace "<The name of your app ... screen>" with "gamezone"
        Press Enter and React Native project will be created.
        
        Type In:
            cd gamezone                                 //01. This will enter the newly created directory
            code .                                      //02. This opens up VSCode
        
        In terminal, makesure it's in the correct directory "../app/gamezone>"
        Type In:
            expo start                                  //03. This will open up the Expo development GUI

        In Expo Dev GUI > Left Panel > Click on "Run on Android device/emulator"
        Dummy app will appear in the ALREADY OPENED Android emulator - This will show whatever being coded in App.js

    File Structure <Explorer>
        Gamezone
           >.expo
           >.expo-shared
           >assets
           >node_modules
            .gitignore
            App.js
            app.json
            babel.config.js
            package-lock.json
            package.json
           
    Create a new folder and name it to "screens"
    Create new files under the "screens" folder         //04. Right click and click on "New File"
        about.js
        home.js
        reviewsDetails.js


    home.js
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        
        //export default function Home() {}
        export default function Home() {
            return (
                //<View>
                <View style={styles.container}>          //05. Add style container
                    <Text>Home Screen</Text>
                </View>
            )
        }

        //const styles = StyleSheet.create({})          //06. Create style ffor style container
        const styles = StyleSheet.create({
            container: {
                padding: 24                             //07. This will add top padding to the screen
            }
        });   


    about.js                                            //08. Copy paste code from home.js to about.js
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        
        export default function About() {
            return (
                <View style={styles.container}> 
                    <Text>About Screen</Text>
                </View>
            )
        }

        const styles = StyleSheet.create({
            container: {
                padding: 24  
            }
        });   

    reviewDetails.js                                       //09. Copy paste code from home.js to reviewDetails.js
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        
        export default function ReviewDetails() {
            return (
                <View style={styles.container}> 
                    <Text>Review Details Screen</Text>
                </View>
            )
        }

        const styles = StyleSheet.create({
            container: {
                padding: 24  
            }
        });   

    App.js                         
        import React from 'react';
        //import {StyleSheet, View, Text} from 'react-native';     //11. Remove this line
        import Home from './screens/home';                         //13. This will import home.js to App.js
        
        export default function App() {
            return (
                //<View style={styles.container}>                  //12. Remove the JSX block
                //    <Text>Open up App.js to start working on your app!</Text>
                //</View>
                
                <Home />                                           //14. This will load up the Home.js as App.js mainscreen
                
            );
        }

        //const styles = StyleSheet.create({                       //10. Remove entire block
        //    container: {
        //        flex: 1,
        //        backgroundColor: '#fff',
        //        alignItems: 'center',
        //        justifyContent: 'center',
        //    },
        //});   



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16. Custom Fonts
    
    Read 20 Points
    
    Links: 
        docs.expo.io/versions/latest/guides/using-custom-fonts/
        fonts.google.com/       -> Downloadable fonts, download Nunit Font for this example
        Terminal: 
            npm install --save expo
        Import: 
            import * as Font from 'expo-font';
        Loading Code: 
            export default class App extends React.Component {
                componentDidMount() {
                    Font.loadAsync({
                        'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),
                    });
                }
            }
    
    File Structure <Explorer>
        Gamezone
           >screens
                home.js              [Topic 15]
                about.js              [Topic 15]
                reviewDetails.js [Topic 15]
           >.expo
           >.expo-shared
           >assets
               >fonts                                                //01. Create fonts folder and add in font files to be used
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 15]
            app.json
            babel.config.js
            package-lock.json
            package.json


    App.js                         
        //import React from 'react';
        import React, {useState} from 'react';                         //09. Import "useState" for point 8
        import * as Font from 'expo-font';                             //02. Import fonts
        import Home from './screens/home';   
        import {AppLoading} from 'expo';                               //13. AppLoading for loading component manually in If-else statement
        
        //componentDidMount() {}                                       //03. No access to "componentDidMount" lifecycle hook inside functional components
        //const getFonts () => {}                                      //04. Using arrow function instead
        
        //const getFonts () => {                                       //06. Can be shortened. See point 07 for shortened version
        //    //return Font.loadAsync({})                              //05. Adds the loader with key object inside it
        //    return Font.loadAsync({
        //        'nunito-regular': require('./assets/fonts/Nunito-Regular.ttf'),
        //        'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf')
        //    });
        //}  
        
        const getFonts () => Font.loadAsync({                          //07. Shortened version
            'nunito-regular': require('./assets/fonts/Nunito-Regular.ttf'),
            'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf')
        });
        
        export default function App() {
            const [fontsLoaded, setFontsLoaded] = useState(false);     //08. This is to hold App() from executing first by default, and make it wait for fonts to load up first.
            
            //return (                                                 //10. To use If-else statement instead. If fonts are loaded, then it will be true. If true, load home component. Else, load fonts.
            //    <Home />          
            //);
            
            //if(fontsLoaded){} else {}                                //11.  The If-else statement skeleton
            
            if(fontsLoaded){                                           //12. "If" statement with home component.
                return(
                    <Home />
                );
            } else {
                //return(<AppLoading />)                               //14. Execute the AppLoading. Just a skeleton.
                return(
                    <AppLoading 
                        //startAsync={}                                //15. Start Async property with AppLoading. But the function is not defined.
                        startAsync={getFonts}                          //16. Start Async property with AppLoading with defined function "getFonts"
                        
                        //onFinish={() => ()}                          //17. State change function but state is undefined
                        onFinish={() => setFontsLoaded(true)}          //18. Once loading is complete, change state to "true"
                        
                    />
                )
            }
        }


    home.js
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        
        export default function Home() {
            return (
                <View style={styles.container}> 
                    //<Text>Home Screen</Text>                        //19. Add loaded fonts to the title text using style container
                    <Text style={styles.titleText}>Home Screen</Text>
                </View>
            )
        }

        const styles = StyleSheet.create({
            container: {
                padding: 24       
            },
            titleText: {
                fontFamily: 'nunito-bold',                            //20. The style container for titleText
                fontSize: 18,
            }
        });   


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
17. Global Styles
    
    Instead of copying and paste long "titleText" into every page, Global Styles provides a shorter code.
    To do this, "global.js" will be used where it contains ALL the styles instead of having those codes in every single page

    File Structure <Explorer>
        Gamezone
           >screens
                home.js               [Topic 16]
                about.js               [Topic 15]
                reviewDetails.js  [Topic 15]
           >styles    
                global.js                                                                //01. Add folder and file
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 16]
            app.json
            babel.config.js
            package-lock.json
            package.json

    global.js                                                
        import {StyleSheet} from 'react-native';

        //const styles = StyleSheet.create({                              //02. Codes copied from home.js "styles"
        //    container: {
        //        padding: 24       
        //    },
        //    titleText: {
        //        fontFamily: 'nunito-bold',
        //        fontSize: 18,
        //    }
        //});  

        export const globalStyles = StyleSheet.create({
            container: {
                flex: 1,
                padding: 20,       
            },
            titleText: {
                fontFamily: 'nunito-bold',
                fontSize: 18,
                color: '#333',
            },
            paragraph: {
                marginVertical: 8,
                lineHeight: 20,
            }
        });  

    
    home.js
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        import {globalStyles} from '../styles/global';                                    //03. Import globalStyles.js
        
        export default function Home() {
            return (
                //<View style={styles.container}>                                                 //04. Convert "styles.container" to "globalStyles.container"
                <View style={globalStyles.container}> 
                    //<Text style={styles.titleText}>Home Screen</Text>              //05. Convert "styles.titleText" to "globalStyles.titleText"
                    <Text style={globalStyles.titleText}>Home Screen</Text>
                </View>
            )
        }

        //const styles = StyleSheet.create({                                                       //06. Code block no longer in use
        //    container: {
        //        padding: 24       
        //    },
        //    titleText: {
        //        fontFamily: 'nunito-bold',
        //        fontSize: 18,
        //    }
        //});  
    
    **DO THE SAME ON about.js and reviewDetails.js, except for "Text" container
    
    about.js                        
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        import {globalStyles} from '../styles/global'; 
        
        export default function About() {
            return (
                <View style={globalStyles.container}> 
                    <Text>About Screen</Text>
                </View>
            )
        }

    reviewDetails.js                        
        import React from 'react';
        import {StyleSheet, View, Text} from 'react-native';
        import {globalStyles} from '../styles/global'; 
        
        export default function ReviewDetails() {
            return (
                <View style={globalStyles.container}> 
                    <Text>Review Details Screen</Text>
                </View>
            )
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18. React Navigation Setup
    
    Using Stack Navigator
        This method stacks up pages over each other.
        Bottom stack will always be home. When About.js is being called, the page will be stacked on top of Home.js
        With Home.js at the bottom and About.js is on top, calling reviewDetails.js from About will stack reviewDetails on top of about.js
        To return to Home.js from reviewDetails, one needs to pop the stacked screens twice.
        The downside of using this Navigator is duplicated screens
        To avoid duplicate pages from happening, plan the pages carefully
        Stack Navigator will not be used for About.js
    
    Stack Navigator Structure
        Home - ReviewDetails screen can be called from
            ReviewDetails - With added "Back" button to return to Home
            
    Link: reactnavigation.org/docs/en/getting-started.html
    Installing: 
        npm install react-navigation
        expo install react-native-gesture-handler react-native-reanimated

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
19. Stack Navigator
    
    Installing:
        npm install react-navigation-stack
    
    File Structure <Explorer>
        Gamezone
           >routes                                                       //01. Create folder
                homeStack.js                                             //02. Add new file
           >screens
                home.js               [Topic 17]
                about.js               [Topic 17]
                reviewDetails.js  [Topic 17]
           >styles    
                global.js               [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 16]
            app.json
            babel.config.js
            package-lock.json
            package.json

    homeStack.js
        import { createStackNavigator } from 'react-navigation-stack';
        import { createAppContainer } from 'react-navigation';
        import Home from '../screens/home';                           //07. Import home.js as a component
        Import ReviewDetails from '../screens/reviewDetails';         //10. Import reviewDetails.js
        
        //const HomeStack = createStackNavigator();
        //const HomeStack = createStackNavigator({});                 //03. Add an object that will control home.js and reviewDetails.js to be configurable with stack navigator
        
        //const screens = {}                                          //04. Instead of using object, a constant is used to make it visually easy to code
        //const HomeStack = createStackNavigator(screens);

        const screens = {
            Home: {                                                   //05. "Home:" can be renamed to any word of your choice.
                //screen:                                             //06. "screen:" is to load which file. In this case, home.js
                screen: Home                                          //08. Adding imported Home component as the Home screen
            },
            ReviewDetails: {                                          //09. Same with Home screen. Also note that the top most screen will be the default screen
                screen: ReviewDetails                                 //11. Added ReviewDetails as the screen
            }
        }  
        
        const HomeStack = createStackNavigator(screens);              //12. With only this line, it cannot do anything. Needs to be wrapped in "createAppContainer" and exported to App.js
        
        export default createAppContainer(HomeStack);                 //13. Adding the wrapper and the export code


    App.js                         
        import React, {useState} from 'react';   
        import * as Font from 'expo-font';       
        import Home from './screens/home';   
        import {AppLoading} from 'expo';          
        import Navigator from './routes/homeStack';                    //14. Importing homeStack.js as component named "Navigator"
        
        const getFonts () => Font.loadAsync({  
            'nunito-regular': require('./assets/fonts/Nunito-Regular.ttf'),
            'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf')
        });
        
        export default function App() {
            const [fontsLoaded, setFontsLoaded] = useState(false);  
            
            if(fontsLoaded){      
                return(
                    //<Home />                                          //15. Instead of <Home />, Navigator will be used
                    <Navigator />
                );
            } else {
                return(
                    <AppLoading 
                        startAsync={getFonts}          
                        onFinish={() => setFontsLoaded(true)} 
                    />
                )
            }
        }

    RELOADING:                                                          //16. Reloading the app after installing packages
        In VSCode > Terminal > 
            expo start
            
        In Android Emulator >
            Exit the opened emulated App (Swipe up)

        In Expo > Left panel
            Click on "Run on Android device/emulator"

    Once reloaded, an empty top bar will appear. Usually this may contain the back button, etc. 

    |------------------------------------------------------------------------------------------------|
    |                                     REACT NAVIGATION                                           |
    |------------------------------------------------------------------------------------------------|
    |                                                                                                |
    |                           App <Navigator/>                                                     |
    |                             /                                                                  |
    |                            /                                                                   |
    |       +---------------HomeStack------------+                                                   |
    |       |                                    |                                                   |
    |       |  Home  <------>  ReviewDetails     |                    About                          |
    |       |                                    |                                                   |
    |       +------------------------------------+                                                   |
    |                                                                                                |
    |------------------------------------------------------------------------------------------------|



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20. Navigating Around


    File Structure <Explorer>
        Gamezone
           >routes      
                homeStack.js           [Topic 19]
           >screens
                home.js                [Topic 17]
                about.js               [Topic 17]
                reviewDetails.js  [Topic 17]
           >styles    
                global.js              [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                  [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 19]
            app.json
            babel.config.js
            package-lock.json
            package.json

    home.js  -  Navigation Method
        import React from 'react';
        //import {StyleSheet, View, Text} from 'react-native';
        import {StyleSheet, View, Text, Button} from 'react-native';               //01. Import Button
        import {globalStyles} from '../styles/global';                  
        
        //export default function Home() {
        //export default function Home(props) {                                    //06. Usually, props object is used for onPress handler
        export default function Home({navigation}) {                               //07. Instead, destructure a navigation object
            
            //props.navigation                                                     //05. Used for navigating different screens within a stack
            
            //const pressHandler = () => {}                                        //04. Define onPress handler
            const pressHandler = () => {
                navigation.navigate('ReviewDetails');                              //08. This will call "AnyName:" but in this case, "ReviewDetails:" from the screen object in homeStack.js
            }
            
            return (               
                <View style={globalStyles.container}>   
                    <Text style={globalStyles.titleText}>Home Screen</Text>
                    //<Button title='go to review dets' />                         //02. Load button
                    <Button title='go to review dets' onPress={pressHandler} />    //03. Add onPress handler
                </View>
            )
        }
        
    *home.js  -  Navigation Method 2
        import React, {useState} from 'react';
        import {StyleSheet, View, Text, Button} from 'react-native';
        import {globalStyles} from '../styles/global';                  
        
        export default function Home({navigation}) {     
            
            const [name, setNames] = useState([ {title: 'ABC', rating:5, key:'1'}, {title: 'DEF', rating:2, key:'2'}, ]);
            
            return (               
                <View style={globalStyles.container}>   
                    <Text style={globalStyles.titleText}>Home Screen</Text>
                </View>
            )
        }
        
    *home.js  -  Push Method (Not in use with this App)
        import React from 'react';
        import {StyleSheet, View, Text, Button} from 'react-native'; 
        import {globalStyles} from '../styles/global';                  
        
        export default function Home({navigation}) {     
            
            const pressHandler = () => {
                //navigation.navigate('ReviewDetails');     
                navigation.push('ReviewDetails');                                 //09. Replace navigate to push. End result is the same. Here, we wont be using Push Method.
            }
            
            return (               
                <View style={globalStyles.container}>   
                    <Text style={globalStyles.titleText}>Home Screen</Text>
                    <Button title='go to review dets' onPress={pressHandler} />
                </View>
            )
        }

    reviewDetails.js                        
        import React from 'react';
        //import {StyleSheet, View, Text} from 'react-native';
        import {StyleSheet, View, Text, Button} from 'react-native';               //10. Import Button
        import {globalStyles} from '../styles/global'; 
        
        
        
        //export default function ReviewDetails() {
        export default function ReviewDetails({navigation}) {                      //13. Destructure navigation
        
            //const pressHandler = () => {}                                        //12. Define pressHandler
            const pressHandler = () => {
                navigation.goBack();                                               //14. Add event "goBack"
            }   
            
            return (
                <View style={globalStyles.container}> 
                    <Text>Review Details Screen</Text>
                    <Button title='back to home screen' onPress={pressHandler} />  //11. Add Button with pressHandler
                </View>
            )
        }

    *reviewDetails.js  - For Navigation Method 2    
        import React from 'react';
        import {StyleSheet, View, Text, Button} from 'react-native'; 
        import {globalStyles} from '../styles/global'; 
        
        export default function ReviewDetails({navigation}) {          
            
            return (
                <View style={globalStyles.container}> 
                    <Text>Review Details Screen</Text>
                </View>
            )
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
21. Passing Data Between Screens

    21 points

    File Structure <Explorer>
        Gamezone
           >routes      
                homeStack.js      [Topic 19]
           >screens
                home.js               [Topic 20]
                about.js               [Topic 17]
                reviewDetails.js  [Topic 20]
           >styles    
                global.js               [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 19]
            app.json
            babel.config.js
            package-lock.json
            package.json

    home.js  -  Navigation Method 2
        import React, {useState} from 'react';
        //import {StyleSheet, View, Text, Button} from 'react-native';
        import {StyleSheet, View, Text, FlatList, TouchableOpacity} from 'react-native';                //02. Remove button, Add FlatList and TouchableOpacity
        import {globalStyles} from '../styles/global';                  
        
        export default function Home({navigation}) {     
            
            //const [name, setNames] = useState([ {title: 'ABC', rating:5, key:'1'}, {title: 'DEF', rating:2, key:'2'}, ]);    //01. Load Navigation Method 2
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            return (               
                <View style={globalStyles.container}>   
                    //<Text style={globalStyles.titleText}>Home Screen</Text>                             //03. Remove to use the Flatlist instead
                    //<FlatList />
                    <FlatList 
                        //data={}                                                                         //04. Add function to specify what data to cycle through
                        data={reviews}                                                                    //05. Define which data to cycle
                        //renderItem={}                                                                   //06. Add renderItem
                        //renderItem={ () => () }                                                         //07. Add arrow object to return JSX
                        //renderItem={ ({item}) => () }                                                   //08. Add "item" to be destructured [reviews > title:, OR reviews > rating, etc]
                        renderItem={({item}) => (
                            //<TouchableOpacity></TouchableOpacity>                                       //09. Add TouchableOpacity component
                            
                            //<TouchableOpacity>
                            //<TouchableOpacity onPress={()=>()}>                                         //13. Add onPress Handler with arrow function
                            //<TouchableOpacity onPress={()=>navigation.navigate()}>                      //14. Use navigation object "Home({navigation})" to navigate into another object
                            //<TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails')}>       //15. Define the object to navigate into as ReviewDetails
                            //<TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', {})}>   //16. Add in another object as parameter to set it as accessible by the navigate function
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}>   //17. Define object with "item" to mark all items (title, rating, key, etc) as accessible
                                //<Text></Text>                                                           //10. Add text component
                                //<Text>{item.title}</Text>                                            //11. Grab "title" from item property
                                <Text style={globalStyles.titleText}>{item.title}</Text>               //12. Add text style
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

    reviewDetails.js  - Navigation Method 2    
        import React from 'react';
        import {StyleSheet, View, Text, Button} from 'react-native'; 
        import {globalStyles} from '../styles/global'; 
        
        export default function ReviewDetails({navigation}) {          
            
            return (
                //<View style={globalStyles.container}> 
                //    //<Text>Review Details Screen</Text>
                //    //<Text>{}</Text>                                                                 //18. Instead of text, use a function to output the item object
                //    //<Text>{navigation.getParam()}</Text>                                            //19. The statement for the function
                //    <Text>{navigation.getParam('title')}</Text>                                       //20. This will call the title from the item object to be displayed
                //</View>
                
                <View style={globalStyles.container}>                                                   //21. This will turn the entire container to call all the items
                    <Text>{navigation.getParam('title')}</Text> 
                    <Text>{navigation.getParam('body')}</Text> 
                    <Text>{navigation.getParam('rating')}</Text> 
                </View>
            )
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
22. Navigation Options

    Add Header name at main screen and Title Header when entering a review screen
    To do this, navigationOptions will be used.
        title = for header text
        headerStyle = for coloring the header
    12 points

    File Structure <Explorer>
        Gamezone
           >routes      
                homeStack.js          [Topic 19]
           >screens
                home.js               [Topic 21]
                about.js              [Topic 17]
                reviewDetails.js      [Topic 21]
           >styles    
                global.js             [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                 [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 19]
            app.json
            babel.config.js
            package-lock.json
            package.json


    homeStack.js - Long Method
        import { createStackNavigator } from 'react-navigation-stack';
        import { createAppContainer } from 'react-navigation';
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 

        const screens = {
            Home: {             
                screen: Home,          
                //navigationOptions: {}                                  //01. Add navigationOptions as an object "{}"
                navigationOptions: {
                    title: 'GameZone',                                   //02. This will show the title "GameZone" as the home screen header
                    //headerStyle: {}                                    //04. Add headerStyle
                    headerStyle: {
                        backgroundColor: '#eee'
                    }          
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                             //03. This will show the title "Review Details" as the home screen header
                    headerStyle: {                      
                        backgroundColor: '#eee'                          //05. Add headerStyle
                    }          
                }  
            }
        }  
        
        const HomeStack = createStackNavigator(screens); 
        export default createAppContainer(HomeStack);      


    homeStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import { createAppContainer } from 'react-navigation';
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 

        const screens = {
            Home: {             
                screen: Home,          
                navigationOptions: {
                    title: 'GameZone',   
                    headerStyle: {backgroundColor: '#333'}               //10. To overwrite the global "defaultNavigationOptions", add another headerStyle here
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                    
                }  
            }
        }  
        
        //const HomeStack = createStackNavigator(screens);                //06. Shorter method to add headerStyle [for apps with hundreds of screens]
        //const HomeStack = createStackNavigator(screens, {});            //07. Add object
        const HomeStack = createStackNavigator(screens, {
            //defaultNavigationOptions: {}                                //08. Add a function
            defaultNavigationOptions: {
                //headerStyle: {backgroundColor: '#eee'},                 //09. Add headerStyle property here instead of in point 4. 
                headerStyle: {backgroundColor: '#eee', height: 60},       //11. Adjust height of the header bar           
                headerTintColor: '#444',                                  //12. Lightens the header color including the text
            }  
        }); 
        export default createAppContainer(HomeStack);      


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
23. Drawer Navigation

    Totally different from stack navigator - A vertical menu
    A drawer navigator is when the user click on the "hamburger icon", a list will drop down or pop up from the side.
    Also note that drawer navigators have no headers
    Terminal:
        ..\apps\yourAppProject> npm install react-navigation-drawer
    Restart expo
        Terminal > Dropdown Menu > Select "node"
        ..\apps\yourAppProject> expo start
    Emulator
        exit app
    Browser
        Restart expo: "Run on Android device/emulator"

    |---------------------------------------------------------------------------------------------|
    |                                     REACT NAVIGATION                                        |
    |---------------------------------------------------------------------------------------------|
    |                                                                                             |
    |                                     App <Navigator/>                                        |
    |                                            |                                                |
    |                                            |                                                |
    |                                Drawer Navigator                                             |
    |                               /                   \                                         |    
    |                              /                      \                                       |    
    |                             /                         \                                     |
    |       +---------------HomeStack------------+     +----AboutStack-----+                      |
    |       |                                    |     |        \          |                      |
    |       |  Home  <------>  ReviewDetails     |     |       About       |                      |
    |       |                                    |     |                   |                      |
    |       +------------------------------------+     +-------------------+                      |
    |                                                                                             |
    |---------------------------------------------------------------------------------------------|

    File Structure <Explorer>
        Gamezone
           >routes      
                homeStack.js      [Topic 22]
                aboutStack.js                                             //01. Add file
                drawer.js                                                 //13. Add another file
           >screens
                home.js               [Topic 21]
                about.js               [Topic 17]
                reviewDetails.js  [Topic 21]
           >styles    
                global.js               [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 19]
            app.json
            babel.config.js
            package-lock.json
            package.json

    homeStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import { createAppContainer } from 'react-navigation';
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 

        const screens = {
            Home: {             
                screen: Home,          
                navigationOptions: {
                    title: 'GameZone',   
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                    
                }  
            }
        }  
        
        const HomeStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 
        //export default createAppContainer(HomeStack);                              //03. Since aboutStack is used, createAppContainer is no longer used
        export default HomeStack;     
        
    aboutStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        //import { createAppContainer } from 'react-navigation';                     //02. No longer in use
        //import Home from '../screens/home';                                        //10. No longer in use
        //Import ReviewDetails from '../screens/reviewDetails';                      //11. No longer in use
        import About from '../screens/about';                                        //12. import from screens/about.js

        const screens = {
            //Home: {                                                                //07. Change to About
            About: {       
                //screen: Home,                                                      //08. Change to About          
                screen: About,
                navigationOptions: {
                    //title: 'GameZone',                                             //09. Change to 'About GameZone'
                    title: 'About GameZone', 
                },  
            },
            //ReviewDetails: {                                                       //06. No longer used
            //    screen: ReviewDetails,
            //    navigationOptions: {
            //        title: 'Review Details',                    
            //    }  
            //}
        }  
        
        //const HomeStack = createStackNavigator(screens, {                          //05. Change HomeStack to AboutStack
        const AboutStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 
        //export default createAppContainer(HomeStack);                              //04. Since aboutStack is used, createAppContainer is no longer used
        export default AboutStack; 

    drawer.js
        import { createDrawerNavigator } from 'react-navigation-drawer';
        import { createAppContainer } from 'react-navigation';
        
        import AboutStack from './aboutStack';                                       //19. Import aboutStack
        import HomeStack from './homeStack';                                         //20. Import homeStack
        
        //const RootDrawerNavigator = createDrawerNavigator({})                      //14. Create a method
        const RootDrawerNavigator = createDrawerNavigator({
            //Home: {}                                                               //15. Add an object. Item inside the drawer menu bar
            Home: {
                screen: HomeStack,                                                   //16. Link to HomeStack
            },
            //About: {}                                                              //17. Add an object. Item inside the drawer menu bar
            About: {
                screen: AboutStack,                                                  //18. Link to AboutStack
            }
        });
        
        export default createAppContainer(RootDrawerNavigator);                      //21. Wrap drawer.js for export to App.js

    App.js                         
        import React, {useState} from 'react';   
        import * as Font from 'expo-font';       
        import Home from './screens/home';   
        import {AppLoading} from 'expo';          
        //import Navigator from './routes/homeStack';                                //22. Instead of using homeStack.js, drawer.js will be used
        import Navigator from './routes/drawer'; 
        
        const getFonts () => Font.loadAsync({  
            'nunito-regular': require('./assets/fonts/Nunito-Regular.ttf'),
            'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf')
        });
        
        export default function App() {
            const [fontsLoaded, setFontsLoaded] = useState(false);  
            
            if(fontsLoaded){      
                return(
                    <Navigator />
                );
            } else {
                return(
                    <AppLoading 
                        startAsync={getFonts}          
                        onFinish={() => setFontsLoaded(true)} 
                    />
                )
            }
        }



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24a. Custom Header Component
    
    Add "Burger" menu bar (Part 1)
    
    File Structure <Explorer>
        Gamezone
           >shared                                              //01. Create folder
                header.js                                       //02. Create header.js
           >routes      
                homeStack.js       [Topic 23]
                aboutStack.js      [Topic 23]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 21]
                about.js           [Topic 17]
                reviewDetails.js   [Topic 21]
           >styles    
                global.js          [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                  [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json


    header.js
        import React from 'react';
        import { StyleSheet, Text, View } from 'react-native';
        import { MaterialIcons } from '@expo/vector-icons';
        
        //export default function Header() {return()}                       //03. Copy
        export default function Header() {
            return(
                //<View style={styles.header}></View>                       //04. Add style
                <View style={styles.header}>
                    {/* icon for the menu */}                               //07. Add for future use
                    //<View><Text></Text></View>                            //05. Add Text
                    <View>
                        //<Text style={styles.headerText}></Text>           //06. Add style prop
                        <Text style={styles.headerText}>GameZone</Text>     //16. Add text and save. The old theader will still show up.
                    </View>     
                </View> 
            );
        }       

        //const styles = StyleSheet.create({});                              //08. Add Styles
        const styles = StyleSheet.create({
            //header: {}                                                     //09. Add Header Style
            header: {
                width: '100%',               //10. This will add a container header to the already existing header
                height: '100%',              //11. This will add a container header to the already existing header
                flexDirection: 'row',        //12. Specify direction to horizontal
                alignItems: 'center',        //13. Horizontally centered
                justifyContent: 'center',    //14a. Vertically centered in header container
                //backgroundColor: 'red',    //14b. Header's background color (Optional)
            },         
            //headerText: {}                                                 //15. Add text styling
            headerText: {
                fontWeight: 'bold',
                fontSize: 20,
                color: '#333',
                letterSpacing: 1,
            }, 
        });


    homeStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        //import { createAppContainer } from 'react-navigation';              //17. Not in use
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 
        import Header from '../shared/header';                                //18. Import header component
        import React from 'react';                                            //19. To enable library that provide communication with header component

        const screens = {
            Home: {             
                screen: Home,          
                navigationOptions: {
                    //title: 'GameZone',     
                    //title: () => <Header />,                   //20. Instead of using "text", header component will be used  (to call text from header.js)
                    headerTitle: () => <Header />,               //21. Uses another propertyname instead of "title" since title prop can't call a component. Save and see the headerbar again
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                    
                }  
            }
        }  
        
        const HomeStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 
        export default HomeStack;     

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24b. Custom Header Component

    Add "Burger" menu bar (Part 2)
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js               [Topic 24a] 
           >routes      
                homeStack.js            [Topic 24a]
                aboutStack.js           [Topic 23]
                drawer.js               [Topic 23]
           >screens
                home.js                 [Topic 21]
                about.js                [Topic 17]
                reviewDetails.js  [Topic 21]
           >styles    
                global.js               [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                       [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    aboutStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import About from '../screens/about'; 
        import Header from '../shared/header';                                           //01. Import header component
        import React from 'react';                                                       //02. Import React

        const screens = {
            About: {            
                screen: About,
                //navigationOptions: {                                                    //17. Same principle applies to aboutStack.js
                //    //title: 'About GameZone',                                          //03. Replace "title" with "headerTitle" that returns Header component
                //    headerTitle: () => <Header />                                       //04. This will duplicate the Header component across all pages (Save and refresh)
                //},  
                
                navigationOptions: ({ navigation }) => {                                  //18. Same principle applies to aboutStack.js
                    return {
                        headerTitle: () => <Header navigation={navigation} />, 
                    }
                } 
            },
        }  
        
        const AboutStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 

        export default AboutStack; 

    header.js
        import React from 'react';
        import { StyleSheet, Text, View } from 'react-native';
        import { MaterialIcons } from '@expo/vector-icons';
        
        //export default function Header() {
        export default function Header({ navigation }) {                                             //19. Add navigation property
            
            //const openMenu = () => {}                                                              //08. Add onPress handler
            const openMenu = () => {
                navigation.openDrawer();                                                             //20. By default, this object is not registered in Header(). To register, see points 12 to 19
            }        
            
            return(
                <View style={styles.header}>
                    //{/* icon for the menu */}   
                    //<MaterialIcons />                                                               //05. Add MaterialIcons component
                    //<MaterialIcons name="menu" />                                                   //06. Add Icons from "ExpoDocs" website
                    //<MaterialIcons name="menu" size={28} onPress={} style={styles.icon} />          //07. Add size, onPress handler and style property
                    <MaterialIcons name="menu" size={28} onPress={openMenu} style={styles.icon} />    //09. Add openMenu function. 
                    
                    <View>
                        <Text style={styles.headerText}>GameZone</Text>    
                    </View>     
                </View> 
            );
        }       

        const styles = StyleSheet.create({
            header: {
                width: '100%',     
                height: '100%',      
                flexDirection: 'row',       
                alignItems: 'center',        
                justifyContent: 'center',  
            },         

            headerText: {
                fontWeight: 'bold',
                fontSize: 20,
                color: '#333',
                letterSpacing: 1,
            }, 
            
            //icon: {},                                                                  //10. Add icon style property
            icon: {
                position: 'absolute',                                                    //11. This will position the icon to the very left of screen. Save and refresh to see the burger icon
                left: 16,
            }, 
            
        });


    homeStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 
        import Header from '../shared/header';           
        import React from 'react';               

        const screens = {
            Home: {             
                screen: Home,          
                //navigationOptions: {                                                   //12. Rewrite navigationOptions as a function so it can be used by header.js
                //    headerTitle: () => <Header />,  
                //}  
                
                //navigationOptions: () => {}                                            //13. Rewritten as function
                //navigationOptions: ({ navigation }) => {}                              //14. Enable destructure property
                navigationOptions: ({ navigation }) => {
                    return {
                        //headerTitle: () => <Header />,                                 //15. Function now able to push the object to header.js
                        headerTitle: () => <Header navigation={navigation} />,           //16. With navigation property enabled, destination object "{navigation}" is be added
                    }
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                    
                }  
            }
        }  
        
        const HomeStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 
        export default HomeStack;     


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
24c. Custom Header Component

    Add "Burger" menu bar (Part 3) - Dynamic title
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js            [Topic 24b] 
           >routes      
                homeStack.js         [Topic 24b]
                aboutStack.js        [Topic 24b]
                drawer.js            [Topic 23]
           >screens
                home.js              [Topic 21]
                about.js             [Topic 17]
                reviewDetails.js     [Topic 21]
           >styles    
                global.js            [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                    [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    aboutStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import About from '../screens/about'; 
        import Header from '../shared/header';                  
        import React from 'react';                                                               

        const screens = {
            About: {            
                screen: About,
                
                navigationOptions: ({ navigation }) => {   
                    return {
                        headerTitle: () => <Header navigation={navigation} title='About GameZone'  />,    //02. Add title property
                    }
                } 
            },
        }  
        
        const AboutStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 

        export default AboutStack; 

    header.js
        import React from 'react';
        import { StyleSheet, Text, View } from 'react-native';
        import { MaterialIcons } from '@expo/vector-icons';
        
        //export default function Header({ navigation }) {  
        export default function Header({ navigation, title }) {                                          //03. Add title object
            
            const openMenu = () => {
                navigation.openDrawer();    
            }        
            
            return(
                <View style={styles.header}>
                    <MaterialIcons name="menu" size={28} onPress={openMenu} style={styles.icon} />   
                    
                    <View>
                        //<Text style={styles.headerText}>GameZone</Text>    
                        <Text style={styles.headerText}>{ title }</Text>                                  //04. Dynamic output of the title
                    </View>     
                </View> 
            );
        }       

        const styles = StyleSheet.create({
            header: {
                width: '100%',     
                height: '100%',      
                flexDirection: 'row',       
                alignItems: 'center',        
                justifyContent: 'center',  
            },         

            headerText: {
                fontWeight: 'bold',
                fontSize: 20,
                color: '#333',
                letterSpacing: 1,
            }, 
            
            icon: {
                position: 'absolute',                                                         
                left: 16,
            }, 
            
        });


    homeStack.js - Shorter Method
        import { createStackNavigator } from 'react-navigation-stack';
        import Home from '../screens/home';        
        Import ReviewDetails from '../screens/reviewDetails'; 
        import Header from '../shared/header';           
        import React from 'react';               

        const screens = {
            Home: {             
                screen: Home,          

                navigationOptions: ({ navigation }) => {
                    return {
                        //headerTitle: () => <Header navigation={navigation} />, 
                        headerTitle: () => <Header navigation={navigation} title='GameZone' />,             //01. Add title property
                    }
                }  
            },
            ReviewDetails: {                         
                screen: ReviewDetails,
                navigationOptions: {
                    title: 'Review Details',                    
                }  
            }
        }  
        
        const HomeStack = createStackNavigator(screens, {
            defaultNavigationOptions: {
                headerStyle: {backgroundColor: '#eee', height: 60},           
                headerTintColor: '#444',    
            }  
        }); 
        export default HomeStack;     


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
25. Custom Card Component
    
    Display every single title as a "card", a user interface component
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js             [Topic 24c] 
                card.js                                           //01. Create card.js so this will be used on home, reviewDetails and about
           >routes      
                homeStack.js          [Topic 24c]
                aboutStack.js         [Topic 24c]
                drawer.js             [Topic 23]
           >screens
                home.js               [Topic 21]
                about.js              [Topic 17]
                reviewDetails.js      [Topic 21]
           >styles    
                global.js             [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                 [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json


    card.js
        import React from 'react';                                //02. Import the basic
        import { StyleSheet, View } from 'react-native';      
        
        //export default function Card() {}                       //03. Create function and name it Card
        //export default function Card(props) {}                  //04. Give Card function the ability to take in props
        export default function Card(props) {
            //return()                                            //05. Card function will return a JSX code
            return(
                //<View style={StyleSheet.card}></View>           //06. Add View widget and give it a style
                <View style={styles.card}>
                    //<View style={styles.cardContent}></View>    //07. Add another View widget and give it a style for cardContent
                    <View style={styles.cardContent}>
                        { props.children }                        //08. This will swallow up the <Text> widget inside "<Card>...</Card>" written anywhere in the App. A centralized control.
                    </View>
                </View>
            )     
        }

        //const styles = StyleSheet.create({});          //09. Create styles
        const styles = StyleSheet.create({
            //card: {},                                  //10. Create style property for card
            card: {
                borderRadius: 6,                         //15. Corner round edge
                elevation: 3,                            //16. Distance between back of card to the screen (Dropshadow)
                backgroundColor: '#fff',                 //17. White
                shadowOffset: {width: 1, height, 1},     //18. Height and width of the shadow (Imagine italic alphabets)
                shadowColor: '#333',                     //19. Black
                shadowOpacity: 0.3,                      //20. Value of 0 is totally transparent
                shadowRadius: 2,                         //21. How much shadow blends with the card
                marginHorizontal: 4,
                marginVertical: 6,
            },   
            
            //cardContent: {},                           //11. Create style property for cardContent
            cardContent: {
                marginHorizontal: 18,                    //22. Padding for text and card borders
                marginVertical: 10,                      //23. Padding for text and card borders
            },   
        });   

    home.js
        import React, {useState} from 'react';
        import {StyleSheet, View, Text, FlatList, TouchableOpacity} from 'react-native';  
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';                                                         //12. Import card.js
        
        export default function Home({navigation}) {     
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            return (               
                <View style={globalStyles.container}>   
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                //<Text style={globalStyles.titleText}>{item.title}</Text>         //13. Wrap with Card widget. See point 8
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>       //14. Wrapped so this will be forwarded to {props.children} in card.js
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

    reviewDetails.js  - Navigation Method 2    
        import React from 'react';
        import {StyleSheet, View, Text, Button} from 'react-native'; 
        import {globalStyles} from '../styles/global'; 
        import Card from '../shared/card';                                                  //24. Import card.js
        
        export default function ReviewDetails({navigation}) {          
            return (
                <View style={globalStyles.container}>         
                    //<Text>{navigation.getParam('title')}</Text>                           //25. Wrap all the lines into a card
                    //<Text>{navigation.getParam('body')}</Text> 
                    //<Text>{navigation.getParam('rating')}</Text> 
                    
                    <Card>
                        <Text>{navigation.getParam('title')}</Text>                         //26. Wrapped
                        <Text>{navigation.getParam('body')}</Text> 
                        <Text>{navigation.getParam('rating')}</Text> 
                    </Card>
                    
                </View>
            )
        }
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
26. Using Images
    
    Show images for the ratings. Example, 5hearts.png for rating of 5, etc
    Download assets:
        github.com/iamshaunjp/react-native-tutorial/tree/lesson-27/gamezone/assets

    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js            [Topic 24c] 
                card.js                [Topic 25] 
           >routes      
                homeStack.js      [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js             [Topic 23]
           >screens
                home.js               [Topic 25] 
                about.js               [Topic 17]
                reviewDetails.js  [Topic 25] 
           >styles    
                global.js               [Topic 17]
           >.expo
           >.expo-shared
           >assets
               >fonts                   [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    reviewDetails.js  - Navigation Method 2    
        import React from 'react';
        //import {StyleSheet, View, Text, Button} from 'react-native'; 
        import {StyleSheet, View, Text, Image} from 'react-native';        //04. Remove Button (No longer in use) and add in Image. 
        //import {globalStyles} from '../styles/global'; 
        import {globalStyles, images} from '../styles/global';             //14. Import images from global.js
        import Card from '../shared/card';        
        
        export default function ReviewDetails({navigation}) {     
            
            const rating = navigation.getParam('rating');                  //16. Create a variable to store the rating from home.js
            
            return (
                <View style={globalStyles.container}>         
                    
                    <Card>
                        <Text>{navigation.getParam('title')}</Text>     
                        <Text>{navigation.getParam('body')}</Text> 
                        //<Text>{navigation.getParam('rating')}</Text>      //01. Remove to make way for the image
                        
                        //<View style={styles.rating}></View>               //02. Insert View component with style
                        <View style={styles.rating}>
                            <Text>GameZone rating: </Text>                  //03. Add Text component
                            //<Image source={require()} />                                    //05. Add Image component with "source" prop and a function called "require"
                            //<Image source={require('../assets/rating-1.png')} />            //06. Add in the image link
                            //<Image source={require('../assets/rating-' + '1' + '.png')} />  //09. Another method is to use concatenate.
                            //<Image source={require('../assets/rating-' + navigation.getParam('rating') + '.png')} />    //10. For dynamic loading by using the state, but this will not work since "require" cant do concatenate.
                            //<Image source={require(images.ratings)} />                      //15. Load ratings from the list
                            <Image source={images.ratings[rating]} />                         //17. No longer need to use the function "require". "Ratings" will extract "rating" variable
                        </View>
                        
                    </Card>
                    
                </View>
            )
        }
        
        //const styles = StyleSheet.create({})                                //07. Create styles that passes in an object. Save and load app. 
        const styles = StyleSheet.create({                                    //08. You will see all ratings will show 1 heart image regardless the rating number
            rating: {                                                         //18. Add rating styles
                flexDirection: 'row',
                justifyContent: 'center',
                paddingTop: 16,
                marginTop: 16,
                borderTopWidth: 1,
                borderTopColor: '#eee',
            }
        });  

    global.js                                                
        import {StyleSheet} from 'react-native';

        export const globalStyles = StyleSheet.create({
            container: {
                flex: 1,
                padding: 20,       
            },
            titleText: {
                fontFamily: 'nunito-bold',
                fontSize: 18,
                color: '#333',
            },
            paragraph: {
                marginVertical: 8,
                lineHeight: 20,
            }
        });  
        
        //export const images = {};                                     //11. Solution for "require" function
        export const images = {
            //ratings: {}                                               //12. Create ratings as an object. Also note the name ratings VS rating in home.js
            ratings: {
                '1': require('../assets/rating-1.png'),                 //13. Create list for "require" function
                '2': require('../assets/rating-2.png'),
                '3': require('../assets/rating-3.png'),
                '4': require('../assets/rating-4.png'),
                '5': require('../assets/rating-5.png'),
            }   
        };        
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
27. Background Images
    
    Add an image to the header as logo and as background
        Background: game_bg.png
        Logo: heart_logo.png
    Only applicable to headers that uses custom header component like home screen and about screen in this app
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 24c] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 25] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
           >styles    
                global.js          [Topic 26]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                  [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json
        
    header.js
        import React from 'react';
        //import { StyleSheet, Text, View } from 'react-native';
        //import { StyleSheet, Text, View, Image } from 'react-native';                         //01. Import Image Tag
        import { StyleSheet, Text, View, Image, ImageBackground } from 'react-native';          //10. Import ImageBackground Tag
        import { MaterialIcons } from '@expo/vector-icons';
        
        export default function Header({ navigation, title }) { 
            
            const openMenu = () => {
                navigation.openDrawer();    
            }        
            
            return(
                //<View style={styles.header}>                                                  //11. Wrap everything with the ImageBackground
                //    <MaterialIcons name="menu" size={28} onPress={openMenu} style={styles.icon}  />   
                //    
                //    //<View>               
                //    <View style={styles.headerTitle}>                                         //06. Convert from column (default) to row
                //        <Image source={require('../assets/heart_logo.png')} />                //02. Add Image component. Save and load. Notice the image is oversized
                //        <Image source={require('../assets/heart_logo.png')} style={styles.headerImage} />         //03. Add style to the Image component
                //        <Text style={styles.headerText}>{ title }</Text>    
                //    </View>     
                //</View> 
                
                <ImageBackground source={require('../assets/game_bg.png')} style={styles.header}>                    //12. Wrap everything with the ImageBackground. 
                    <MaterialIcons name="menu" size={28} onPress={openMenu} style={styles.icon}  />        
                    <View style={styles.headerTitle}>                                              
                        <Image source={require('../assets/heart_logo.png')} />                         
                        <Image source={require('../assets/heart_logo.png')} style={styles.headerImage} />   
                        <Text style={styles.headerText}>{ title }</Text>    
                    </View>     
                </ImageBackground> 
                
            );
        }       

        const styles = StyleSheet.create({
            header: {
                width: '100%',     
                height: '100%',      
                flexDirection: 'row',       
                alignItems: 'center',        
                justifyContent: 'center',  
            },         

            headerText: {
                fontWeight: 'bold',
                fontSize: 20,
                color: '#333',
                letterSpacing: 1,
            }, 
            
            icon: {
                position: 'absolute',                                                         
                left: 16,
            }, 
            
            //headerTitle: {}                                      //07. Create headerTitle prop
            headerTitle: {
                flexDirection: 'row',                              //08. This will make the image to sit next to each other
            },                                     
            
            //headerImage: {}                                      //04. Create headerImage prop
            headerImage: {
                width: 26,
                height: 26,                             //05. For resizing of oversized image. Note that the image is on top of the header title and not next it
                marginHorizontal: 10,                              //09. Spacing between the image and the title
            }, 
                 
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
28a. Modals
    
    A modal is similar to a popup.
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 25] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
           >styles    
                global.js          [Topic 26]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                 [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    home.js
        import React, {useState} from 'react';
        //import {StyleSheet, View, Text, FlatList, TouchableOpacity} from 'react-native';  
        import {StyleSheet, View, Text, FlatList, TouchableOpacity, Modal} from 'react-native';            //01. Import Modal component
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';            
        import { MaterialIcons } from '@expo/vector-icons';                //08. Import MaterialIcons for the popup toggle button
        
        export default function Home({navigation}) {     
            
            //const [modalOpen, setModalOpen] = useState();                //05. To toggle Modal between visible of not visible via a button
            const [modalOpen, setModalOpen] = useState(false);             //06. Set default to false so the popup wont open automatically when App starts
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            return (               
                <View style={globalStyles.container}>   
                    
                    //<Modal visible={true}></Modal>                             //02. Add modal with visible prop
                    //<Modal visible={true}>
                    //<Modal visible={modalOpen}>                                //07. Set prop to "modalOpen"
                    <Modal visible={modalOpen} animationType='slide'>            //15. Add sliding animation
                        //<View style={styles.modalContent}></View>          //03. Add View component with style prop
                        <View style={styles.modalContent}>
                            
                            //<MaterialIcons />                         //12. Add another MaterialIcons component to close the opened popup
                            <MaterialIcons 
                                name='close'                            //13. Set to "close"
                                size={24}
                                onPress={() => setModalOpen(false)}     //14. Set to false. Save and run test
                            />
                            
                            <Text>Hello from the modal</Text>           //04. Add Text widget for testing. Save and test. Note: Restart the App to get rid of the popup
                        </View>
                    </Modal>   
                    
                    //<MaterialIcons />                                 //09. Add MaterialIcons component (To open start a popup)
                    <MaterialIcons 
                        name='add'                                      //10. Add props
                        size={24}
                        onPress={() => setModalOpen(true)}              //11. When pressed, setModalOpen prop turns into "true"
                    />
                    
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
28b. Modals
    
    Add styling to the button
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 28a] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
           >styles    
                global.js          [Topic 26]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                 [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    home.js
        import React, {useState} from 'react';
        import {StyleSheet, View, Text, FlatList, TouchableOpacity, Modal} from 'react-native';   
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';            
        import { MaterialIcons } from '@expo/vector-icons'; 
        
        export default function Home({navigation}) {     
            
            const [modalOpen, setModalOpen] = useState(false);     
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            return (               
                <View style={globalStyles.container}>   
                    
                    <Modal visible={modalOpen} animationType='slide'>        
                        <View style={styles.modalContent}>
                            
                            <MaterialIcons 
                                name='close'            
                                size={24}
                                //style={styles.modalToggle}                                 //04. Add style for close button
                                //style={{}}                                                 //05. To have an custom close button that doesnt share with open button, insert an object
                                style={{ ...styles.modalToggle, ...styles.modalClose }}      //06. Destructure the modalToggle and modalClose and combine them as the object
                                onPress={() => setModalOpen(false)}   
                            />
                            
                            <Text>Hello from the modal</Text>   
                        </View>
                    </Modal>   
                    
                    <MaterialIcons 
                        name='add'                      
                        size={24}
                        style={styles.modalToggle}               //01. Add style for open button
                        onPress={() => setModalOpen(true)}      
                    />
                    
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

        //const styles = StyleSheet.create({})     //02. Add stylesheet
        const styles = StyleSheet.create({
            //modalToggle: {}                      //03. Add modalToggle
            modalToggle: {
                marginBottom: 10,
                borderWidth: 1,
                borderColor: '#f2f2f2',
                padding: 10,
                borderRadius: 10,
                alignSelf: 'center',
            },

            //modalClose: {}                        //07. Add modalClose
            modalClose: {
                marginTop: 20,
                marginBottom: 0,
            },
            
            //modalContent: {}                      //08. Add modalContent styling for the contents in the popup
            modalContent: {
                flex: 1,                            //09. To make the content take up all the space available
            } 
        })     

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
29. Formik Forms - Part 1
    
    All 29 points
    Add a fill up form to the modal aka popup
    Use 2 3rd party libraries
        Formik: Helps create forms and track values (using state)
        Yop: A validation library that allows easily setup validation rules for each form field

    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js             [Topic 27] 
                card.js               [Topic 25] 
           >routes      
                homeStack.js          [Topic 24c]
                aboutStack.js         [Topic 24c]
                drawer.js             [Topic 23]
           >screens
                home.js               [Topic 28b] 
                about.js              [Topic 17]
                reviewDetails.js      [Topic 26] 
                reviewForm.js                                       //02. Create new file
           >styles    
                global.js             [Topic 26]
           >.expo
           >.expo-shared
           >assets
               >fonts                 [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                    [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    Terminal:
        ..\apps\gamezone> npm install formik                       //01. Install Formik
        Refresh process after installing a package
            Terminal > dropdown menu > 1:node > type in "expo start"
            Close app in smartphone emulator
            Browser > ExpoDevIDE > LeftPanel > Run on Android device/emulator
        
    reviewForm.js   
        import React from 'react';
        import { StyleSheet, Button, TextInput, View, Text } from 'react-native';
        import { globalStyles } from '../styles/global.js';
        import { Formik } from 'formik';

        //export default function ReviewForm() {}                  //02. Add export function
        export default function ReviewForm() {
            
            //return()                                             //03. Return JSX template
            return(
                //<View style={globalStyles.container}> </View>    //04. Add View component with style
                <View style={globalStyles.container}> 
                    //<Formik></Formik>                      //05. Add Formik tag and this tag can take in several props
                    <Formik
                        //initialValues={}                   //06. Add "initialValues" prop
                        //initialValues={{}}                 //07. The prop will be equal to an object and this object will list down different fields in the form
                        initialValues={{
                            title: '',                       //08. Add fields with empty strings. Initial value of the fields will be empty
                            body: '',
                            rating: '',
                        }} 
                        
                        //onSubmit={() => {}}                //09. Add onSubmit and this will be equal to a function
                        //onSubmit={(values) => {}}          //10. Will also take in an argument called "values". Represents the values taken by empty strings
                        onSubmit={(values) => {
                            console.log(values);                                      //26. Save and run. This will output the values
                        }}
                    >
                        //{() => ()}                                                  //11. Add a renderer that generates the form. Returns JSX
                        //{(props) => ()}                                             //12. Add Formik's internal props that handles the change inside the formfields
                        {(props) => (
                            //<View></View>                                           //13. Add View component
                            <View>
                                //<TextInput />                                       //14. This will output the title
                                <TextInput 
                                    style={globalStyles.input}                        //15. Add style prop
                                    placeholder='Review Title'                        //16. Add placeholder
                                    //onChangeText={}                                 //17. This prop expects a function whenever the text changes
                                    //onChangeText={props.handleChange()}             //18. Will take in props function from point 12
                                    onChangeText={props.handleChange('title')}        //19. This means when text in "title" box changes, a function will run (updates "values" property in point 10)
                                    value={props.values.title}                        //20. This will just update the value in realtime. i.e alphabets appears in textbox while typing
                                />   
                                
                                //<TextInput />                                       //21. Insert the second TextInput component for body
                                <TextInput 
                                    multiline                                         //22. Add to enable multiple line input textbox
                                    style={globalStyles.input}  
                                    placeholder='Review Body'    
                                    onChangeText={props.handleChange('body')}    
                                    value={props.values.body}                     
                                />   
                                
                                //<TextInput />                                       //23a. Insert the third TextInput component for rating
                                <TextInput                                  
                                    style={globalStyles.input}  
                                    placeholder='Rating (1-5)'    
                                    onChangeText={props.handleChange('rating')}    
                                    value={props.values.rating}                     
                                    keyboardType='numeric'                             //23b. Set textbox to only accept numbers
                                />   
                                
                                //<Button title='submit' color='maroon' onPress={} />                     //24. Add submit button
                                <Button title='submit' color='maroon' onPress={props.handleSubmit} />     //25. This will run point 9 when pressed
                                
                            </View>       
                        )} 
                        
                    </Formik>   
                </View>
            )
            
        } 

    home.js
        import React, {useState} from 'react';
        import {StyleSheet, View, Text, FlatList, TouchableOpacity, Modal} from 'react-native';   
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';            
        import { MaterialIcons } from '@expo/vector-icons'; 
        import ReviewForm from './reviewForm';                                 //27. Import from reviewForm.js
        
        export default function Home({navigation}) {     
            
            const [modalOpen, setModalOpen] = useState(false);     
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            return (               
                <View style={globalStyles.container}>   
                    
                    <Modal visible={modalOpen} animationType='slide'>        
                        <View style={styles.modalContent}>
                            
                            <MaterialIcons 
                                name='close'            
                                size={24}
                                style={{ ...styles.modalToggle, ...styles.modalClose }}
                                onPress={() => setModalOpen(false)}   
                            />
                            
                            //<Text>Hello from the modal</Text>   
                            <ReviewForm />                                     //28. This will render the reviewForm.js into the modal/popup
                            
                        </View>
                    </Modal>   
                    
                    <MaterialIcons 
                        name='add'                      
                        size={24}
                        style={styles.modalToggle}    
                        onPress={() => setModalOpen(true)}      
                    />
                    
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

        const styles = StyleSheet.create({
            modalToggle: {
                marginBottom: 10,
                borderWidth: 1,
                borderColor: '#f2f2f2',
                padding: 10,
                borderRadius: 10,
                alignSelf: 'center',
            },

            modalClose: {
                marginTop: 20,
                marginBottom: 0,
            },
            
            modalContent: {
                flex: 1,       
            } 
        })     

    global.js                                                
        import {StyleSheet} from 'react-native';

        export const globalStyles = StyleSheet.create({
            container: {
                flex: 1,
                padding: 20,       
            },
            titleText: {
                fontFamily: 'nunito-bold',
                fontSize: 18,
                color: '#333',
            },
            paragraph: {
                marginVertical: 8,
                lineHeight: 20,
            },
            
            //input: {}                                       //29. Add input prop, Save and run. Fill up form and see result in IDE
            input: {
                borderWidth: 1,
                borderColor: '#ddd',     //grey
                padding: 10,
                fontSize: 18,
                borderRadius: 6,
            }
            
        });  
        
        export const images = {
            ratings: {
                '1': require('../assets/rating-1.png'),     
                '2': require('../assets/rating-2.png'),
                '3': require('../assets/rating-3.png'),
                '4': require('../assets/rating-4.png'),
                '5': require('../assets/rating-5.png'),
            }   
        };      

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
30a. Formik Forms - Part 2
    
    Taking in Values from "reviewForm.js > console.log(values)", and add them to the state
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 29] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
                reviewForm.js      [Topic 29] 
           >styles    
                global.js          [Topic 29]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                 [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json


    home.js
        import React, {useState} from 'react';
        import {StyleSheet, View, Text, FlatList, TouchableOpacity, Modal} from 'react-native';   
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';            
        import { MaterialIcons } from '@expo/vector-icons'; 
        import ReviewForm from './reviewForm';           
        
        export default function Home({navigation}) {     
            
            const [modalOpen, setModalOpen] = useState(false);     
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            //const addReview = (review) => {}                   //01a. Add arrow function and add parameter called "review"
            //                                                   //01b. Takes in "values" from reviewForm.js > onSubmit={(values)} which consist of title, body and rating
            //                                                   //01c. Also note the title in home.js contains the key therefore review requires a key
            const addReview = (review) => {
                review.key = Math.random().toString();           //02. Not the best way to create a key since numbering is based on random numbers.
                //setReviews(() => {});                          //03. Use set function to update the state "setReviews" in "const [reviews, setReviews] = useState([])"
                //setReviews((currentReviews) => {});            //04. Add a current state of reviews and call it "currentReviews"
                setReviews((currentReviews) => {
                    //return[];                                  //05. Returns a new array
                    //return[review, ];                          //06. Place an updated review
                    return[review, ...currentReviews];           //07. Use "..." to spread out "currentReviews" as an array
                }); 
                //setModalOpen(false);                           //08. Upon form submission, the modal/popup closes
                //setModalOpen(false);                           //13. Remove to simulate the function set on another page of the app. Now it wont close the popup and clear after submit
                setModalOpen(false);                             //16. Re-add the function for the app to close
            }
            
            return (               
                <View style={globalStyles.container}>   
                    
                    <Modal visible={modalOpen} animationType='slide'>        
                        <View style={styles.modalContent}>
                            
                            <MaterialIcons 
                                name='close'            
                                size={24}
                                style={{ ...styles.modalToggle, ...styles.modalClose }}
                                onPress={() => setModalOpen(false)}   
                            />
                            
                            //<ReviewForm />               
                            <ReviewForm addReview={addReview} />       //09. Add addReview function to the ReviewForm
                            
                        </View>
                    </Modal>   
                    
                    <MaterialIcons 
                        name='add'                      
                        size={24}
                        style={styles.modalToggle}    
                        onPress={() => setModalOpen(true)}      
                    />
                    
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

        const styles = StyleSheet.create({
            modalToggle: {
                marginBottom: 10,
                borderWidth: 1,
                borderColor: '#f2f2f2',
                padding: 10,
                borderRadius: 10,
                alignSelf: 'center',
            },

            modalClose: {
                marginTop: 20,
                marginBottom: 0,
            },
            
            modalContent: {
                flex: 1,       
            } 
        })     


    reviewForm.js   
        import React from 'react';
        import { StyleSheet, Button, TextInput, View, Text } from 'react-native';
        import { globalStyles } from '../styles/global.js';
        import { Formik } from 'formik';

        //export default function ReviewForm() {
        //export default function ReviewForm({}) {                   //10. Add destructure object
        export default function ReviewForm({ addReview }) {          //11. Destructure the addReview
            
            return(
                <View style={globalStyles.container}> 
                    <Formik
                        initialValues={{
                            title: '',                               
                            body: '',
                            rating: '',
                        }} 
                        
                        //onSubmit={(values) => {
                        onSubmit={(values, actions) => {               //14. Add "actions" for solution to clear the popup when point 13 happens
                            actions.resetForm();                       //15. This will revert the form to its original state which is to clear the popup textboxes (Restarting the app required)
                            //console.log(values);            
                            addReview(values);                         //12. Output addReview values instead of going through console
                        }}
                    >

                        {(props) => (
                            <View>
                                <TextInput 
                                    style={globalStyles.input}               
                                    placeholder='Review Title'    
                                    onChangeText={props.handleChange('title')}    
                                    value={props.values.title}                 
                                />   
                                
                                <TextInput 
                                    multiline                 
                                    style={globalStyles.input}  
                                    placeholder='Review Body'    
                                    onChangeText={props.handleChange('body')}    
                                    value={props.values.body}                     
                                />   
                                
                                <TextInput                                  
                                    style={globalStyles.input}  
                                    placeholder='Rating (1-5)'    
                                    onChangeText={props.handleChange('rating')}    
                                    value={props.values.rating}                     
                                    keyboardType='numeric'      
                                />   
                                
                                <Button title='submit' color='maroon' onPress={props.handleSubmit} />    
                                
                            </View>       
                        )} 
                        
                    </Formik>   
                </View>
            )
            
        } 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
30b. Formik Forms - Part 2

    Clearing the keyboard after tapping on empty space of screen
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 30a] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
                reviewForm.js      [Topic 30a] 
           >styles    
                global.js          [Topic 29]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                  [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json
            
            
    home.js
        import React, {useState} from 'react';
        //import {StyleSheet, View, Text, FlatList, TouchableOpacity, Modal} from 'react-native';   
        import { StyleSheet, View, Text, FlatList, TouchableOpacity, Modal, TouchableWithoutFeedback, Keyboard } from 'react-native';    //01. Add 2 items for this to work
        import {globalStyles} from '../styles/global';                  
        import Card from '../shared/card';            
        import { MaterialIcons } from '@expo/vector-icons'; 
        import ReviewForm from './reviewForm';           
        
        export default function Home({navigation}) {     
            
            const [modalOpen, setModalOpen] = useState(false);     
            
            const [reviews, setReviews] = useState([ 
                {title: 'Zelda, Breath of Fresh Air', rating:5, body: 'lorem ipsum', key:'1'}, 
                {title: 'Gotta Catch Them All', rating:4, body:'lorem ipsum', key:'2'}, 
                {title: 'Not So Final Fantasy', rating:3, body:'lorem ipsum', key:'3'}, 
            ]); 
            
            const addReview = (review) => {
                review.key = Math.random().toString();    
                setReviews((currentReviews) => {
                    return[review, ...currentReviews];      
                }); 
                setModalOpen(false);         
            }
            
            return (               
                <View style={globalStyles.container}>   
                    
                    <Modal visible={modalOpen} animationType='slide'>        
                        
                        //<TouchableWithoutKeyboard></TouchableWithoutKeyboard>                             //02. Add the component
                        //<TouchableWithoutKeyboard onPress={Keyboard.dismiss}></TouchableWithoutKeyboard>  //03. Add the dismiss keyboard function
                        
                        //<View style={styles.modalContent}>
                        //    
                        //    <MaterialIcons 
                        //        name='close'            
                        //        size={24}
                        //        style={{ ...styles.modalToggle, ...styles.modalClose }}
                        //        onPress={() => setModalOpen(false)}   
                        //    />
                        //     
                        //    <ReviewForm addReview={addReview} /> 
                        //    
                        //</View>
                        
                        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>                                //04. Nest everything inside the component
                            <View style={styles.modalContent}>
                                <MaterialIcons 
                                    name='close'            
                                    size={24}
                                    style={{ ...styles.modalToggle, ...styles.modalClose }}
                                    onPress={() => setModalOpen(false)}   
                                />
                                <ReviewForm addReview={addReview} /> 
                            </View>
                        </TouchableWithoutFeedback>
                        
                    </Modal>   
                    
                    <MaterialIcons 
                        name='add'                      
                        size={24}
                        style={styles.modalToggle}    
                        onPress={() => setModalOpen(true)}      
                    />
                    
                    <FlatList 
                        data={reviews}     
                        renderItem={({item}) => (
                            <TouchableOpacity onPress={()=>navigation.navigate('ReviewDetails', item)}> 
                                <Card>
                                    <Text style={globalStyles.titleText}>{item.title}</Text>
                                </Card>
                            </TouchableOpacity> 
                        )}                 
                    />
                </View>
            )
        }

        const styles = StyleSheet.create({
            modalToggle: {
                marginBottom: 10,
                borderWidth: 1,
                borderColor: '#f2f2f2',
                padding: 10,
                borderRadius: 10,
                alignSelf: 'center',
            },

            modalClose: {
                marginTop: 20,
                marginBottom: 0,
            },
            
            modalContent: {
                flex: 1,       
            } 
        })     

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
31. Validation with Yup

    Adding validation when Review Title is added to the stack of cards.
    This is to prevent users from adding anything else other than Games/Movies/Music/etc to the stack
    Note: 
        Schema is a set of rules defined inside an object and that object is created by Yup
        The object contains the key which signifies the different form fields (title, body, rating)
        Value to the keys are validation rules
            If not equal to validation rules, it returns an error
        Remember to restart the current app after installation
            Terminal > DropdownMenu > Node
                ..\apps\gamezone> expo start
            Close App in emulator
            Browser > Click on "Run on Android device/emulator"

    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes       
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 30b] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
                reviewForm.js      [Topic 30a] 
           >styles    
                global.js          [Topic 29]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                  [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    Installation:
        Terminal > DropdownMenu > Powershell
            ..\apps\gamezone> npm install yup

    reviewForm.js   
        import React from 'react';
        import { StyleSheet, Button, TextInput, View, Text } from 'react-native';
        import { globalStyles } from '../styles/global.js';
        import { Formik } from 'formik';
        import * as yup from 'yup';                           //01. Import Yup. * = everything
        
        //const reviewSchema = yup.object({})                 //02. This is the method to create a Yup object
        const reviewSchema = yup.object({
            //title: yup.string().required().min()            //03. key: yup.validationMethod1().validationMethod2().validationMethod3().etc()
            //title: yup.string().required().min(4),          //04. If string is less than 4 characters, then return error
            title: yup.string()
                .required()
                .min(4), 
                
            body: yup.string()                                 //05. Add for body
                .required()
                .min(8),
                
            rating: yup.string()                               //06. Note that once any character be it number of alphabet, it automatically becomes a string
                .required()
                //.test(),                                                          //07. Test method allows defining a function that takes in the rating value as a parameter. 
                //.test('is-num-1-5'),                                              //08. If values equals to 1 to 5, then return True. 
                //.test('is-num-1-5', 'Rating must be number 1 - 5'),               //09. Else return the error defined in second parameter
               //.test('is-num-1-5', 'Rating must be number 1 - 5', (value) => {}), //10. Adds in a function that takes in a value which is the rating
               .test( 'is-num-1-5', 'Rating must be number 1 - 5', (value) => {
                    //return parseInt(val)                                          //11. Pass in the value (val) into "parseInt"
                    return parseInt(val) < 6 && parseInt(val) > 0;          //12. If string is lesser than 6 AND greater than 0, then return True (Validation Passed)
               }),
        })  
        
        export default function ReviewForm({ addReview }) {    
            
            return(
                <View style={globalStyles.container}> 
                    <Formik
                        initialValues={{
                            title: '',                               
                            body: '',
                            rating: '',
                        }} 
                        
                        validationSchema={reviewSchema}                      //13. This will run the Schema via Formik forms
                        
                        onSubmit={(values, actions) => {      
                            actions.resetForm();                 
                            addReview(values);          
                        }}
                    >

                        {(props) => (
                            <View>
                                <TextInput 
                                    style={globalStyles.input}               
                                    placeholder='Review Title'    
                                    onChangeText={props.handleChange('title')}    
                                    value={props.values.title}                 
                                />   
                                
                                <TextInput 
                                    multiline                 
                                    style={globalStyles.input}  
                                    placeholder='Review Body'    
                                    onChangeText={props.handleChange('body')}    
                                    value={props.values.body}                     
                                />   
                                
                                <TextInput                                  
                                    style={globalStyles.input}  
                                    placeholder='Rating (1-5)'    
                                    onChangeText={props.handleChange('rating')}    
                                    value={props.values.rating}                     
                                    keyboardType='numeric'      
                                />   
                                
                                <Button title='submit' color='maroon' onPress={props.handleSubmit} />    
                                
                            </View>       
                        )} 
                        
                    </Formik>   
                </View>
            )
        } 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
32. Showing Form Errors
    
    Adding Yup error messages underneath the textboxes
    
    File Structure <Explorer>
        Gamezone
           >shared                                           
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 30b] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
                reviewForm.js      [Topic 31] 
           >styles    
                global.js          [Topic 29]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                 [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    reviewForm.js   
        import React from 'react';
        import { StyleSheet, Button, TextInput, View, Text } from 'react-native';
        import { globalStyles } from '../styles/global.js';
        import { Formik } from 'formik';
        import * as yup from 'yup';         
        
        const reviewSchema = yup.object({
            title: yup.string()
                .required()
                .min(4), 
                
            body: yup.string()            
                .required()
                .min(8),
                
            rating: yup.string()           
                .required()
               .test( 'is-num-1-5', 'Rating must be number 1 - 5', (value) => {
                    return parseInt(val) < 6 && parseInt(val) > 0;    
               }),
        })  
        
        export default function ReviewForm({ addReview }) {    
            
            return(
                <View style={globalStyles.container}> 
                    <Formik
                        initialValues={{
                            title: '',                               
                            body: '',
                            rating: '',
                        }} 
                        
                        validationSchema={reviewSchema}       
                        
                        onSubmit={(values, actions) => {      
                            actions.resetForm();                 
                            addReview(values);          
                        }}
                    >

                        {(props) => (
                            <View>
                                <TextInput 
                                    style={globalStyles.input}               
                                    placeholder='Review Title'    
                                    onChangeText={props.handleChange('title')}    
                                    value={props.values.title}                 
                                    onBlur={props.handleBlur('title')}                                  //08. This will show error in realtime (after being "touched")
                                />   
                                
                                //<Text style={globalStyles.errorText}></Text>            //01. Add Text inderneath "Title" textbox with stylesheet named "errorText"
                                //<Text style={globalStyles.errorText}>{ props.errors.title }</Text>    //02. Add props to the title component
                                <Text style={globalStyles.errorText}>{ props.touched.title && props.errors.title }</Text>    //05. The property "props.touched" will show error only after form is submitted
                                
                                <TextInput 
                                    multiline                 
                                    style={globalStyles.input}  
                                    placeholder='Review Body'    
                                    onChangeText={props.handleChange('body')}    
                                    value={props.values.body}                     
                                    onBlur={props.handleBlur('body')}                                  //09. Same as point 08
                                />   
                                
                                //<Text style={globalStyles.errorText}>{ props.errors.body }</Text>    //03. Add props to the body component
                                <Text style={globalStyles.errorText}>{ props.touched.body && props.errors.body }</Text>  //06. Add "props.touched" for body component
                                
                                <TextInput                                  
                                    style={globalStyles.input}  
                                    placeholder='Rating (1-5)'    
                                    onChangeText={props.handleChange('rating')}    
                                    value={props.values.rating}                     
                                    keyboardType='numeric'      
                                    onBlur={props.handleBlur('rating')}                                   //10. Same as point 08
                                />   
                                
                                //<Text style={globalStyles.errorText}>{ props.errors.rating }</Text>    //04. Add props to the rating component. But all of these errors will appear before even typing
                                <Text style={globalStyles.errorText}>{ props.touched.rating && props.errors.rating }</Text>  //07. Add "props.touched" for rating component
                                
                                <Button title='submit' color='maroon' onPress={props.handleSubmit} />    
                                
                            </View>       
                        )} 
                        
                    </Formik>   
                </View>
            )
        } 

    global.js                                                
        import {StyleSheet} from 'react-native';

        export const globalStyles = StyleSheet.create({
            container: {
                flex: 1,
                padding: 20,       
            },
            titleText: {
                fontFamily: 'nunito-bold',
                fontSize: 18,
                color: '#333',
            },
            paragraph: {
                marginVertical: 8,
                lineHeight: 20,
            },
            
            input: {
                borderWidth: 1,
                borderColor: '#ddd',     //grey
                padding: 10,
                fontSize: 18,
                borderRadius: 6,
            },
            
            //errorText: {}                                            //11. Add errorText styles
            errorText: {
                color: 'crimson',
                fontWeight: 'bold',
                marginBottom: 10,
                marginTop: 6,
                textAlign: 'center'
            }
            
        });  
        
        export const images = {
            ratings: {
                '1': require('../assets/rating-1.png'),     
                '2': require('../assets/rating-2.png'),
                '3': require('../assets/rating-3.png'),
                '4': require('../assets/rating-4.png'),
                '5': require('../assets/rating-5.png'),
            }   
        };    



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
33. Custom Button Component

    Create custom submit button

    File Structure <Explorer>
        Gamezone
           >shared                                           
                button.js                                      //01. Create a custom button file
                header.js          [Topic 27] 
                card.js            [Topic 25] 
           >routes      
                homeStack.js       [Topic 24c]
                aboutStack.js      [Topic 24c]
                drawer.js          [Topic 23]
           >screens
                home.js            [Topic 30b] 
                about.js           [Topic 17]
                reviewDetails.js   [Topic 26] 
                reviewForm.js      [Topic 32] 
           >styles    
                global.js          [Topic 32]
           >.expo
           >.expo-shared
           >assets
               >fonts              [Topic 16]           
                    Nunito-Regular.ttf
                    Nunito-Bold.ttf
                icon.png
                splash.png
           >node_modules
            .gitignore
            App.js                     [Topic 23]
            app.json
            babel.config.js
            package-lock.json
            package.json

    button.js
        import React from 'react';
        import { StyleSheet, TouchableOpacity, Text, View } from 'react-native';
        
        //export default function FlatButton() {}                          //02. Create custom function
        //export default function FlatButton({ text }) {                   //07. Add an object to destructure and feed into text component point 6
        export default function FlatButton({ text, onPress }) {            //08. Also add in onPress functionality            
            //return ()                                                        //03. Function to return JSX
            return (
                //<TouchableOpacity onPress={}></TouchableOpacity>             //04. Create component with onPress function
                <TouchableOpacity onPress={onPress}>                           //09. Add onPress into the object
                    //<View style={styles.button}></View>                      //05. Create View component with style
                    <View style={styles.button}>
                        <Text style={styles.buttonText}>{ text }</Text>        //06. Create Text component (with style) that takes in a prop
                    </View> 
                </TouchableOpacity>
            )
        } 

        //const styles = StyleSheet.create({})                                       //10. Create stylesheet
        const styles = StyleSheet.create({
            //button: {}                                                             //11. Create rules for the button
            button: {
                borderRadius: 8,
                paddingVertical: 14,
                paddingHorizontal: 10,
                backgroundColor: '#f01d71'
            },
            
            //buttonText: {}                                                           //12. Create rules for the button text
            buttonText: {
                color: 'white',
                fontWeight: 'bold',
                textTransform: 'uppercase',
                fontSize: 16,
                textAlign: 'center'
            }
            
        })  

    reviewForm.js   
        import React from 'react';
        import { StyleSheet, Button, TextInput, View, Text } from 'react-native';
        import { globalStyles } from '../styles/global.js';
        import { Formik } from 'formik';
        import * as yup from 'yup';         
        import FlatButton from '../shared/button';                                     //13. Import FlatButton
        
        const reviewSchema = yup.object({
            title: yup.string()
                .required()
                .min(4), 
                
            body: yup.string()            
                .required()
                .min(8),
                
            rating: yup.string()           
                .required()
               .test( 'is-num-1-5', 'Rating must be number 1 - 5', (value) => {
                    return parseInt(val) < 6 && parseInt(val) > 0;    
               }),
        })  
        
        export default function ReviewForm({ addReview }) {    
            
            return(
                <View style={globalStyles.container}> 
                    <Formik
                        initialValues={{
                            title: '',                               
                            body: '',
                            rating: '',
                        }} 
                        
                        validationSchema={reviewSchema}       
                        
                        onSubmit={(values, actions) => {      
                            actions.resetForm();                 
                            addReview(values);          
                        }}
                    >

                        {(props) => (
                            <View>
                                <TextInput 
                                    style={globalStyles.input}               
                                    placeholder='Review Title'    
                                    onChangeText={props.handleChange('title')}    
                                    value={props.values.title}                 
                                    onBlur={props.handleBlur('title')} 
                                />   
                                
                                <Text style={globalStyles.errorText}>{ props.touched.title && props.errors.title }</Text>       
                                
                                <TextInput 
                                    //multiline                 
                                    multiline minHeight={60}                               //16. Make the textbox larger            
                                    style={globalStyles.input}  
                                    placeholder='Review Body'    
                                    onChangeText={props.handleChange('body')}    
                                    value={props.values.body}                     
                                    onBlur={props.handleBlur('body')}    
                                />   
                                
                                <Text style={globalStyles.errorText}>{ props.touched.body && props.errors.body }</Text>  
                                
                                <TextInput                                  
                                    style={globalStyles.input}  
                                    placeholder='Rating (1-5)'    
                                    onChangeText={props.handleChange('rating')}    
                                    value={props.values.rating}                     
                                    keyboardType='numeric'      
                                    onBlur={props.handleBlur('rating')}                    
                                />   
                                
                                <Text style={globalStyles.errorText}>{ props.touched.rating && props.errors.rating }</Text> 
                                
                                //<Button title='submit' color='maroon' onPress={props.handleSubmit} /> //14. No longer using this line. Will be using FlatButton instead
                                <FlatButton text='submit' onPress={props.handleSubmit} />        //15. Add FlatButton with onPress and the text
                                
                            </View>       
                        )} 
                        
                    </Formik>   
                </View>
            )
        } 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[End]



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








