///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
React Native - Mobile App Development

All 3 links below must be understood before heading out here
  https://github.com/Izaat/references/blob/main/React%20Fundamentals
  https://github.com/Izaat/references/blob/main/React%20App
  https://github.com/Izaat/references/blob/main/React%20Context%20and%20Hooks

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Creating React Native App  - npm install expo-cli --global
02. View, Text and Styles
03. Using State
04. Text Inputs
05. Lists and ScrollView
06. List Component
07. Touchable Components
08. Todo App - Part 1
09. Todo App - Part 2
10. Todo App - Part 3

11. Alerts
12. Dismissing the Keyboard
13. Flexbox Basics
14. Icons and more Flexbox
15. Reviews App
16. Custom Fonts
17. Global Styles
18. React Navigation Setup
19. Stack Navigator
20. Navigating Around

21. Passing Data Between Screens
22. Navigation Options
23. Drawer Navigation
24. Custom Header Component
25. Custom Card Component
26. Using Images
27. Background Images
28. Modals
29. Formik Forms - Part 1
30. Formik Forms - Part 2
31. Validation with Yup
32. Showing Form Errors
33. Custom Button Component

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Creating React Native App

    React Native Apps can be coded in multiple different ways in CLI (Command Line Interface): 
        Expo CLI - For beginners (Simplified app development workflow) - Standalone dev GUI
        React Native CLI - Requires Xcode or Android Studio to get started

    Installing Expo CLI
        npm install expo-cli --global
        Paste the line above into Command Prompt/Terminal

    Create Project (From Terminal)
        Navigate into your target directory and enter the lines below
            expo init myproject
            cd myproject
            expo start
        
        A menu will appear and select "Blank - Minimal app as clean as empty canvas"
        Type in project name
            "expo"; {
                "name": "myproject",
                "slug": "myproject"
            }

        To start coding
            cd myproject       //Enter directory
            code .             //To open project with VSCode
            expo start         //To begin coding in VSCode (Enter this line in Command Prompt/Terminal) - OR - npm start
            
            NOTE: The browser is more for a debugging tool. Scan the QR code (With Expo Client) to  preview your project app inside the phone
    
    Preview Menu in Command Prompt / VS Code Terminal
        a - Android Emulator (Open Emulator first before pressing "a")
        e - email
        s - Sign in to Expo
        Ctrl+C - Exit menu
    
    Previewing App directly from iPhone
        Install app "Expo Client"

    Preview App from Android Studio
        Start Android Studio > Configure > AVD Manager > Create Android Virtual Device > Press Play
        Browser > Side Panel > Run on Android Device/Emulator - To install and allow drawing on Expo
        Browser > Side Panel > Run on Android Device/Emulator - To download and run app

    Project Directory
        ../assets - Images
        ../node_modules - dependencies and packages
        gitignore - version control
        App.js - project codes
        app.json - project information
        babel.config.js - Babel is a compiler that allows project to use modern javascript features
        package-lock.json - Project information
        package.json - Project information

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. View, Text and Styles

    ////////////////////////////////////
    App.js (Default Code)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>                     //"View" is similar to "Div" in Html
                    <Text>Open up App.js to start working on your app!</Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({                           //This will be like stylesheet from CSS but without ".container" in "stylesheet.css"
            container: {
                flex: 1,
                backgroundColor: '#fff',                                  //Notice that in CSS, the title will be "background-color", but in React, titles use camel cases (backgroundColor) 
                alignItems: 'center',
                justifyContent: 'center',
            },
        });
        
    ////////////////////////////////////
    App.js (Adding HTML style header container and body container)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    //<Text>Open up App.js to start working on your app!</Text>        //Remove
                    <View style={styles.header}>                                       //Add another View within a view (Just like Div)
                        //<Text>Hello</Text>
                        <Text style={styles.boldText}>Hello</Text>                     //Add style to the text, to be reflected in "style"
                    </View>
                    
                    <View style={styles.body}>                                         //Add body texts
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                                                                  //Add header stylesheet
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                                                               //Add body stylesheet
                backgroundColor: 'yellow',
                padding: 20,                                                      //In pixels
                //fontWeight: bold,                                               //Note that the body will not inherit fontWeight from header container
            },
        });

    ////////////////////////////////////
    App.js (Using bold fonts to body container) - 3 Points
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <View style={styles.header}>    
                        <Text style={styles.boldText}>Hello</Text>
                    </View>
                    
                    <View style={styles.body}>                  
                        //<Text>Lorem ipsum dolor sit amet</Text>
                        //<Text style={styles.boldText}>Lorem ipsum dolor sit amet </Text>          //02. Similar method from header container will be used for body instead
                        <Text style={styles.boldText}>   
                            Lorem ipsum <Text>Test</Text>  dolor sit amet                           //03. The text inside text component (child components) will also inherit the parent's bold style
                        </Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                        <Text>Lorem ipsum dolor sit amet</Text>
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            header: {                
                backgroundColor: 'pink',
                padding: 20,
            },
            boldText: {
                fontWeight: 'bold',
            },
            body: {                            
                backgroundColor: 'yellow',
                padding: 20,                           
                //fontWeight: bold,                                                               //01. Note that the body will not inherit fontWeight from the header container
            },
        });

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Using State

    ////////////////////////////////////
    App.js (Default)
        import React from 'react';
        import {StyleSheet, Text, View} from 'react-native';
        
        export default function App() {
            return (
                <View style={styles.container}>           
                    <Text></Text>
                    <Text></Text>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
        });

    //////////////////////////////////// 
    App.js (Using react hooks for deploying state in a function component) - 16 points
        import React, {useState} from 'react';                                   //01. Add useState library
        //import {StyleSheet, Text, View} from 'react-native'; 
        import {StyleSheet, Text, View, Button} from 'react-native';             //06. Import react default button styles
        
        export default function App() {
            //const []                                                           //02. Create an array
            const [name, setName] = useState('izaat');                           //03. name will get value of izaat. Use "setName" to change "name" value (Note that this is a string)
            
            //const [person, setPerson] = useState({});                          //13. Use useState as object
            const [person, setPerson] = useState({name: 'mario', age: 40});      //14. Use 2 properties for the object (name and age)
            
            //const clickHandler = () => {}                                      //10.  Const for the function
            const clickHandler = () => {
                setName('Ali');                                                  //11. Add the setName and assign as another name
                setPerson({name: 'luigi', age: 39});                             //16. Add and assign the new properties to the button
            }   
            
            return (
                <View style={styles.container}>           
                    //<Text></Text>
                    <Text>My name is {name} </Text>                              //04. To output the name
                    
                    <Text>His name is {person.name} and his age is {person.age}</Text>        //15. Deploy the 2 properties into the text
                    
                    <View style={styles.buttonContainer}>                        //05. Add button style
                        //<Button title='update name' />                         //07. Add the button to update name. Notice this is the default style button and can't be customized
                        //<Button title='update name' onPress{} />               //09. Make the button clickable, but first, create a const for the function
                        <Button title='update name' onPress{clickHandler} />     //12. Assign the function to the button (When button is clicked, Ali will appear instead)
                    </View>
                </View>
            );
        }
        
        const styles = StyleSheet.create({    
            container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
            },
            buttonContainer: {
                marginTop: 20,                                                      //08. This brings doen the button lower (Similar to padding)
            },
        });


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. Text Inputs
















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








