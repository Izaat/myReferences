//CONTENTS
//01. Data types
//02. Declarations
//03. Concatenate
//04. Float decimal double
//05. Calculation shortcute
//06. String handling
//07. Length
//08. Indexing and zero based index
//09. Indexing and getting the last letter of a word
//10. Mad lib game
//11. Arrays
//12. Nested arrays
//13. Acessing array datas with indexes
//14. Modify array datas with indexes
//15. Accessing multidimensional arrays with indexes
//16. Manipulate arrays with push()
//17. Manipulate arrays with pop()
//18. Manipulate arrays with shift()
//19. Manipulate arrays with unshift()
//20. Functions basics
//21. Passing values to functions with arguments
//22. Global scope and functions
//23. Local scope and function
//24. Global vs local scope in functions
//25. Return a value from a function with return statement
//26. Understanding undefined value returned from a function
//27. Stand in line
//28. Use conditional logic with if statements
//29. Comparison with the equality (==) and the strict equality(===) operator
//30. Comparison with the inequality (!=) and the strict inequality(!==) operator
//31. Coding using && statement
//32. Coding using || statement
//33. Logical order in if-alse statement
//34. Switch statements
//35. Multiple identical function in switch statements
//36. Returning Boolean Values from Functions
//37. Returning early pattern from functions
//38. Counting cards
//39. Javascript objects, handling object datas
//40. Using objects for lookups
//41. Testing objects for properties
//42. Manipulating complex objects
//43. Accessing nested objects
//44. Accessing nested arrays
//45. Record Collection
//46. Iterate with while loops in arrays
//47. Iterate with For Loops in arrays
//48. Iterate even numbers with a For loop
//49. Iterate odd numbers with a for loop
//50. Counting down numbers with a for loop
//51. Iterate through an array with a for loop
//52. Nesting for loops
//53. Iterate with Do While Loops
//54. Profile lookup

//55. Generate random fractions
//56. Generate random whole numbers
//57. Generate random whole number within a range
//58. Use the parseInt function (convert string to integer)
//59. Use the parseInt function with a Radix
//60. Use conditional ternary operator
//61. Use multiple conditional ternary operator
//62. Differences betwee the var, let and const keywords
//63. Mutate and array declared in const
//64. Prevent object mutation
//65. Use arrow functions to write concise anonymous functions
//66. Write arrow functions with parameters
//67. Write higher order arrow functions part 1
//68. Write higher order arrow functions part 2
//69. Using the rest operator with the function parameter
//70. Use the Spread Operator to Evaluate Arrays In-Place
//71. Use Destructing Assignment to Assign Variables from Objects
//72. Use destructuring to obtain temperature
//73. Use destructuring in nested objects
//74. Use destructuring to assign variables from arrays
//75. Use destructuring with rest operators 
//76. Use destructuring to pass an object as a function's parameters (Commonly used as API calls)
//77. Create strings using template literals (using backticks NOT single quotes)
//78. Write concise object literal declarations using simple fields
//79. Write concise declarative functions
//80. Use class syntax to define a constructor function
//81. Use getters and setters to control access to an object
//82. Understanding the differences between import and require
//83. Use export to reuse a code block
//84. Use * to import everything from a file
//85. Create an export fallback with export default
//86. Importing an export default


////////////////////////////////////////////////////////////////
//01. /*DATA TYPES
    undefined, null boolean, string, symbol, nuber, object*/


////////////////////////////////////////////////////////////////
//02. DECLARATIONS
    var varName1 //public
    let varName2 //private
    const pi = 3.14 //value will never change
    console.log(varName1) //to print out variable


////////////////////////////////////////////////////////////////
//03. CONCATENATE
    var a = 1;
    var b = a + "String";
    console.log(b) //1String
    var b += "Hello";
    console.log(b) //1String Hello


////////////////////////////////////////////////////////////////
//04. FLOAT DECIMAL DOUBLE
    var a1 = 2.0;


////////////////////////////////////////////////////////////////
//05. CALCULATION SHORTCUTS
    var a2 = 11;
    a2 += 9; //Answer is 20 and can do all calculation operations like this
    //Exponent: 2 ** 3 = 8


////////////////////////////////////////////////////////////////
//06. STRING HANDLING
    var stringZero = "Hello";
    var stringOne = "\"I will blow your house down\" he said"; //adding quote inside string
    var stringTwo = `<a href="http://link.com"></a>`;
    var stringThree = '<a href="http://link.com"></a>';

    /*
    CODE    OUTPUTS
    \"          double quote
    \\          backslash
    \n          newline
    \r          carriage return
    \t           tab
    \b          backspace
    \f          formfeed
    */


////////////////////////////////////////////////////////////////
//07. LENGTH
//adding ".length" to a variable name will find the indexing length of a string
    var lastNameLength = 0;
    var lastName = "Hello";
    lastNameLength = lastName.length;
    console.log(lastNameLength)//will output number 5


////////////////////////////////////////////////////////////////
//08. INDEXING and ZERO BASED INDEX
    var firstLetter = ""
    var lastName = "Erlich"
    firstLetter = lastName[2] //will output letter L
    console.log(firstLetter)


////////////////////////////////////////////////////////////////
//09. INDEXING GETTING LAST LETTER OF WORD
    var firstName = "Hello"
    var lastLetter = firstName[firstName.length = 1];
    console.log(lastLetter) //output letter o


////////////////////////////////////////////////////////////////
//10. MAD LIB GAME
    function wordBlanks(myNoun, myAdjective, myVerb, myAdverb){
        var result = "";
        result += "The " + myAdjective + " " + myNoun + " " + myVerb + " to the store" + myAdverb + ".";
        
        return result;
    }
    console.log(wordBlanks("dog", "big", "ran", "quickly"));


////////////////////////////////////////////////////////////////
//11. ARRAYS
    var ourArray = ["John", 23];


////////////////////////////////////////////////////////////////
//12. NESTED ARRAYS
    var ourArray = [["universe, 42"], ["everything", 101010]];


////////////////////////////////////////////////////////////////
//13. ACCESSING ARRAY DATAS WITH INDEXES
    var ourArray = [50, 60, 70]; 
    var ourData = ourArray[0]; 
    console.log(ourData); //output 50 where index 0 is 50


////////////////////////////////////////////////////////////////
//14. MODIFY ARRAY DATA WITH INDEXES
    var ourArray = [18,64,99];
    ourArray[1]=45;
    console.log(ourArray); //outputs [18, 45, 99]


////////////////////////////////////////////////////////////////
//15. ACCESS MULTIDIMENSIONAL ARRAYS WITH INDEXES
    var myArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [[10, 11, 12], 13, 14,]] //Note: 10, 11, 12, 13, 14 are in 3 layers deep array
    var myData = myArray[0][0];  //[2][1] will give you number 8
    console.log(myData);


////////////////////////////////////////////////////////////////
//16. MANIPULATE ARRAYS WITH push()
    var ourArray = ["Stimpson", "J", "cat"];
    ourArray.push(["happy", "joy"]);
    //ourArray now equals ["Simpson", "J", "cat", ["happy", "joy"]]


////////////////////////////////////////////////////////////////
//17. MANIPULATE ARRAYS WITH pop() //extracting the last value from an array and move it into a variable
    var ourArray = [1, 2, 3];
    var removedFromOurArray = ourArray.pop();
    //removedFromOurArray now contains 3, and ourArray variable is now [1, 2]
    console.log(ourArray);


////////////////////////////////////////////////////////////////
//18. MANIPULATE ARRAYS WITH shift() //extracting the first value from an array and move it into a variable
    var ourArray = ["Stimpson", "J", ["cat"]];
    var removedFromOurArray = ourArray.shift();
    // removedFromOurArray now equals "Stimpson" and ourArray now equals ["J", ["cat"]]


////////////////////////////////////////////////////////////////
//19. MANIPULATE ARRAYS WITH unshift() //adding value into the beginning of an array
    var ourArray = ["Stimpson", "J", "cat"];
    ourArray.shift(); //ourArray now equals ["J", "cat"]
    ourArray.unshift("Happy");
    //ourArray now equals ["Happy", "J", "cat"]


////////////////////////////////////////////////////////////////
//20. FUNCTIONS BASICS
    function ourReusableFunction(){
        console.lof("Hey");
    }
    ourReusableFunction();
    ourReusableFunction();
    //output will be called twice


////////////////////////////////////////////////////////////////
//21. PASSING VALUES TO FUNCTIONS WITH ARGUMENTS
    function ourFunctionWithArgs(a, b){
        console.log(a - b);
    }
    ourFunctionWithArgs(10, 5); //Outputs 5


////////////////////////////////////////////////////////////////
//22. GLOBAL SCOPE AND FUNCTIONS
    var myGlobal = 10;
    function fun1(){
        oopsGlobal = 5; //if declared with "var" inside a function, the variable becomes private and cannot be used in function fun2
    }
    function fun2(){
        var output = "";
        if (typeof myGlobal != "undefined"){
            output += "myGlobal " + myGlobal;
        }
        if (typeof oppsGlobal != "undefined"){
            output += " oopsGlobal: " + oopsGlobal;
        }
        console.log(output);
    }
    fun1(); //output 5
    fun2(); //myGlobal10 oopsGlobal5


////////////////////////////////////////////////////////////////
//23. LOCAL SCOPE AND FUNCTIONS
    function myLocalScope(){
        var myVar = 5; //Note that this will be private to this function
        console.log(myVar); //will output 5 on console
    }
    myLocalScope();
    console.log(myVar); //Error because this can't access private variables


////////////////////////////////////////////////////////////////
//24. GLOBAL VS LOCAL SCOPE in FUNCTIONS
    var outerWear = "Tshirts";
    function myOutfit(){
        var outerWear = "sweater";
        return outerWear;
    }
    console.log(myOutfit()); //output "sweater" in console because "sweater" overwrites "Tshirts"
    console.log(outerWear); //output "Tshirt"


////////////////////////////////////////////////////////////////
//25. RETURN A VALUE FROM A FUNCTION WITH A RETURN STATEMENT
    function minusSeven(num){
        return num - 7;
    }
    console.log(minusSeven(10)); //outputs number 3 on console


////////////////////////////////////////////////////////////////
//26. UNDERSTANDING UNDEFINED VALUE RETURNED FROM A FUNCTION
    var sum = 0;
    function addThree(){
        sum = sum + 3;
    }
    console.log(addThree()); //if there's no "return" in the function, the value will be "undefined"


////////////////////////////////////////////////////////////////
//27. ASSIGNMENT WITH A RETURNED VALUE
//Example#1
    var changed = 0;
    function change(num){
        return (num + 5) / 3;
    }
    changed = change(10); //answer 5

//Example#2
    var processed = 0;
    function processArg(num){
        return (num + 3) / 5;
    }
    processed = processedArg(7);


////////////////////////////////////////////////////////////////
//28. STAND IN LINE
    function nextInLine(arr, time){
        arr.push(num); //3. the code to insert a value into the variable
        return arr.shift(); //4. remove first item and returns the first item in the array
        //return item; //5. remove this line to make way for point 4
    }
    var testArr = [1, 2, 3, 4, 5];
    //1. JSON.stringify is to change an array into a string so it can be printed out in the console
    console.log("Before: " + JSON.stringify(testArr)); 
    console.log(nextInLine(testArr, 6)); //2. add 6 to the array
    console.log("After: " + JSON.stringify(testArr));
    //6. Output: "Before: [1,2,3,4,5]"
    //7. Output "After: [2,3,4,5,6]"


////////////////////////////////////////////////////////////////
//29. USE CONDITIONAL LOGIC WITH IF STATEMENTS
    function ourTrueOrFalse(isTrue){
        if (isItTrue){
            return "Yes, it is true";
        }
        return "No, it is false";
    }
    console.log(ourTrueOrFalse(true));


////////////////////////////////////////////////////////////////
//30. COMPARISON WITH THE EQUALITY & STRICT EQUALITY OPERATOR
//Equality
    function testEqual(val){
        if(val == 12){
            return "Equal";
        }
    }
    return "Not Equal";
    //testEqual(10);
    Console.log(testEqual(10));

    //Strict Equality
    //3 == 3 : true
    //3 == '3' : true
    //3 === 3 : true
    //3 === '3' : false //because '3' didnt convert to number and vice versa
    function compareEquality(a, b){
        if(a === b){
            return "Equal";
        }
    }
    return "Not Equal";
    console.log(compareEquality(10, "10")); //"10" is a string and didn't convert to number like 10, therefore output is false


////////////////////////////////////////////////////////////////
//31. COMPARISON WITH THE INEQUALITY & STRICT INEQUALITY OPERATOR
//Inequality
    function testEqual(val){
        if(val != 12){
            return "Not Equal";
        }
    }
    return "Equal";
    //testEqual(10);
    Console.log(testEqual(10));

    //Strict Inequality
    //3 != 3 : false
    //3 != '3' : false
    //3 !== 3 : false
    //3 !== '3' : true //because '3' didnt convert to number and vice versa
    function compareEquality(a, b){
        if(a !== b){
            return "Not Equal";
        }
    }
    return "Equal";
    console.log(compareEquality(10, "10")); //"10" is a string and didn't convert to number like 10, therefore output is true


////////////////////////////////////////////////////////////////
//32. CODE USING && (AND STATEMENT)
    function andStatement(){
        if (val < 10){
            if (val > 8){
                return "9";            
            }
        }
    }
    function andStatement(){
        if (val < 10 && val > 8){
            return "9";
        }
    }


////////////////////////////////////////////////////////////////
//33. CODE USING || (OR STATEMENT)
    function andStatement(){
        if (val > 20){
            return "Outside";
        }
            if (val < 10){
            return "Outside";
        }
        return "Inside";
    }
    function andStatement(){
        if (val < 10 || val > 20){
            return "Outside";
        }
        return "Inside";
    }


////////////////////////////////////////////////////////////////
//34. LOGICAL ORDER IN IF-ELSE STATEMENTS
    function orderMyLogic(val){
        if (val < 10){
            return "Less than 10";
        } else if (val < 5){
            return "Less than 5";
        }else {
            return "Greater than or equal to 10";
        }
    }
    console.log(orderMyLogic(10)); //output "Less than 10"
    console.log(orderMyLogic(3)); //output "Less than 10"
    //Order is impotant so <5 should be first and <10 should be second


////////////////////////////////////////////////////////////////
//35. SWITCH STATEMENTS

    var names = ["Hole-in-one", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
    function golfScore(par, strokes){
        if (strokes == 1){
            return names[0];
        } else if (strokes <= par - 2){
            return names[1]
        } else if (strokes == par - 1){
            return names[2]
        } else if (strokes == par){
            return names[3]
        } else if (strokes == par + 1){
            return names[4]
        } else if (strokes == par + 2){
            return names[5]
        } else    (strokes >= par + 3){
            return names[6]
        }         
    }
    console.log(goldScore(5,4));
    //------------------------------------------------------------------------------------------------------------------------
    //NOTE: there is no such thing as multi variables switch statement. Switch statements don't handle arrays
    //because the name of an array is the pointer to the elements in an array and switch statements don't handle pointers.
    var names = ["Hole-in-one", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
    function golfScore(par, strokes){
        switch (par, strokes){
            case strokes == 1:
                return names[0];
                break;
            case strokes <= par - 2:
                return names[1];
                break;
            case strokes == par - 1:
                return names[2];
                break;
            case strokes == par:
                return names[3];
                break;
            case strokes == par + 1:
                return names[4];
                break;
            case strokes == par + 2:
                return names[5];
                break;
            case strokes >= par + 3:
                return names[6];
                break;
            default:
                return "Invalid";
                break;
        }
    }
    console.log(golfScore(5,4));


////////////////////////////////////////////////////////////////
//36. MULTIPLE IDENTICAL OPTIONS IN SWITCH STATEMENTS
    function sequentialSizes(val){
        var answer = "";
        switch(val){
            case 1:
            case 2:
            case 3:
                answer = "Low";
                break;
            case 4:
            case 5:
            case 6:
                answer = "Mid";
                break;
            case 7:
            case 8:
            case 9:
                answer = "High";
                break;   
        }
        return answer;
    }
    console.log(sequentialSizes(1));
    //If you enter 1, result is low. if 4, result will be Mid


////////////////////////////////////////////////////////////////
//37. RETURNING BOOLEAN VALUES FROM FUNCTIONS
//All comparison operators return true or false values
    function isLess(a, b){
        if (a < b){
            return true;
        } else {
            return false;
        }
    }
    console.log(isLess(10,15));//True
    //------------------------------------------------------------------
    function isLess(a, b){
        return a < b;
    }
    console.log(isLess(10, 15));//True


    //RETURNING EARLY PATTERN FROM FUNCTIONS
    function abTest(a, b){
        
        if (a < 0 || b < 0){
            return undefined;
        }
        
        return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
    }
    console.log(abTest(2, 2)); //returns 8. But if (-2,2) will return null or undefined


////////////////////////////////////////////////////////////////
//38. COUNTING CARDS
//Black jack card counting function
    var count = 0;
    function cc(card){
        swithc(card){
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                count++;
                break;
            case 10:
            case "J":
            case "Q":
            case "K":
            case "A":
                count--;
                break;
        }
        
        var holdbet = 'Hold';
        if (count > 0){
            holdbet = 'Bet';
        }
        
        
        //return "change Me";
        return count + " " + holdbet;
    }
    cc(2); cc(3); cc(7); cc('K'); cc('A');
    console.log(cc(4));


////////////////////////////////////////////////////////////////
//39. JAVASCRIPT OBJECTS, HANDLING OBJECT DATAS
//Objects are like arrays, but instead of using indexes to access datas you use properties
    var ourDog = {
        "name": "Camper",
        "bark sound": "woofwoof",
        12: "Montana",
        "name2": "Baby"
        "legs": 4,
        "tails": 1,
        "friends": ["everything"]
    };

    //use dot notation to access data
    var dogName = ourDog.name;
    console.log(dogName); //returns Camper

    //use bracket notation to access data. 
    //NOTE: the name needs to have space in between
    var dogSound = ourDog["bark sound"]; //single quotes will also work
    console.log(dogSound); //returns woofwoof

    //use variables to access data
    var dogNumber = 12;
    var dog = ourDog[dogNumber]; //output Montana

    //updating object properties
    ourDog.name = "booboo";
    var dogName2 = ourDog.name2;
    console.log(dogname2); //returns booboo
    
    //adding properties
    ourDog.bark = "bow-wow";

    //delete properties
    delete ourDog.bark;


////////////////////////////////////////////////////////////////
//40. USING OBJECTS FOR LOOKUPS
    function phoneticLookup(val){
        var result = "";
        switch (val){ 
            case "alpha":
            result = "Adams";
            break;
            case "bravo":
            result = "Boston";
            break;
            case "charlie":
            result = "Chicago";
            break;
        }
        //you can get rid of switch statement and use lookup instead
        var lookup = {
            "alpha": "Adams",
            "brave": "Boston",
            "charlie": "Chicago"
        };
        result = lookup[val];
        return result;
    }
    console.log(phoneticLookup("charlie")); //output Chicago


////////////////////////////////////////////////////////////////
//41. TESTING OBJECTS FOR PROPERTIES
    //using hasOwnProperty function
    //checkProp only returns true or false
    var myObj = {
        gift: "pony",
        pet: "kitten",
        bed: "sleigh",
    };
    function checkObj(checkProp){
        if (myObj.hasOwnProperty(checkProp)){
            return myObj[checkProp];
        }else {
            return "Not found";
        }
        //return "Change Me!";
    }
    console.log(checkObj(gift)); //returns pony


////////////////////////////////////////////////////////////////
//42. MANIPULATING COMPLEX OBJECTS (Very similar to JSON)
//arrays=>[], objects{}
//Therefore the items below is a list of objects inside an array
//You can have another array within an object eg formats
//And multiple objects within the main array
var myMusic = [ //main array
    {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": ["CD", "8T", "LP"], //sub array
    "gold": true
    },
    { //second object
        "artist": "Beau Carnes",
        "title": "Serial Man",
        "release_year": 2003,
        "formats": ["Youtube Video"], //sub array
        "gold": false
    }
];


////////////////////////////////////////////////////////////////
//43. ACCESSING NESTED OBJECTS
var myStorage = {
    "car":  {
        "inside": {
            "glove box": "maps",
            "passanger seat": "pillow"
        },
        "outside": {
            "trunk": "jack"
        }
    }
};
var gloveBoxContents = myStorage.car.inside["glove box"]; //because there's space in glove box, the reason to use square brackets
console.log(gloveBoxContents) //outputs "maps"


////////////////////////////////////////////////////////////////
//44. ACCESSING NESTED ARRAYS
var myPlants = [
    {
        type: "flowers",
        list: [
            "rose",
            "tulip",
            "dandelion"
        ]
    },
    {
        type: "trees",
        list: [
            "fir",
            "pine",
            "birch"            
        ]
    }
];
var secondTree = "myPlants[1].list[1]"; //outputs pine


////////////////////////////////////////////////////////////////
//45. RECORD COLLECTION
var collection = {
    "2548": { //the numbers represent the ID
        "album": "Slippery When Wet", //album, artist and tracks are the properties/prop
        "artist": "Bon Jovi",
        "tracks": ["Let It Rock", "You Give Love a Bad Name"]
    },
    "2468": {
        "album": "1999",
        "artist": "Prince",
        "tracks": ["1999", "Little Red Corvette"]
    },
    "1245": {
        "artist": "Robert Palmer",
        "tracks": [ ]
    },
    "2468": {
        "album": "ABBA Gold",
        
    },
};

//Keep a copy of the collection for tests
//The JSON means backing up data before making any changes
var collectionCopy = JSON.parse(JSON.stringify(collection));

//If for tracks, value means add value to the last array
function updateRecords(id, prop, value){ 

    if (value === ""){ //if no value in the property, it means delete the property by default
        delete collection[id][prop];
    } else if (prop === "tracks"){ //if tracks property, then add the value at the end
        collection[id][prop] = collection[id][prop] || []; //if the track exist, then add to array, if not exist, add as itself
        collection[id][prop].push(value); //using the push method to insert value
    } else { //set property to equal value
        collection[id][prop] = value;
    }
    
    return collection;
}

console.log(updateRecords(5439, "artist", "ABBA")); //Outputs 5439: {album: "ABBA Gold", artist: "ABBA"} NOTE: doesnt matter as it only writes over
console.log(updateRecords(2468, "tracks", "test")); //adds in "test" to "tracks" under 2468



////////////////////////////////////////////////////////////////
//46. ITERATE WITH WHILE LOOPS IN ARRAYS
var myArray = [];

var i = 0;
while(i < 5){
    myArray.push(i);
    i++;
}
console.log(myArray); //Outputs [0, 1, 2, 3, 4]


////////////////////////////////////////////////////////////////
//47. ITERATE WITH FOR LOOPS IN ARRAYS
//var i = 0 //declaration for the variable "i"
//i<5         //if less than 5, then repeat the loops NOTE: it will stop at 4.
//i++         //increment the variable i by 1
var ourArray = [];
for (var i = 0; i < 5; i++){ 
    ourArray.push(i);
}
var myArray = [];


////////////////////////////////////////////////////////////////
//48. ITERATE EVEN NUMBERS WITH A FOR LOOP
var ourArray = [];
for (var i = 0; i < 10; i += 2){
    ourArray.push(i);
}
console.log(ourArray); // Output [0, 2, 4, 6, 8]


////////////////////////////////////////////////////////////////
//49. ITERATE ODD NUMBERS WITH A FOR LOOP
var ourArray = [];
for (var i = 1; i < 10; i += 2){ //Since it starts at 1 instead of 0, it gives you the odd numbers
    ourArray.push(i);
}
console.log(ourArray); // Output [1, 3, 5, 7, 9]


////////////////////////////////////////////////////////////////
//50. COUNTING DOWN NUMBERS WITH A FOR LOOP
var ourArray = [];
for (var i = 10; i > 0; i -= 2){ //var i = 9 for odd numbers
    ourArray.push(i);
}
console.log(ourArray); // Output [10, 8, 6, 4, 2]


////////////////////////////////////////////////////////////////
//51. ITERATE THROUGH AN ARRAY WITH A FOR LOOP
var ourArr = [9, 10, 11, 12];
var ourTotal = 0;

for (var i = 0; i < ourArr.length; i++){
    ourTotal += ourArr[i]; //basically adds up all the numbers to 42
    //same as ourTotal = ourTotal + ourArr[i]
}
console.log(ourTotal); //output 42

////////////////////////////////////////////////////////////////
//52. NESTING FOR LOOPS
function multiplyAll(arr){
    var product = 1;
    
    for (var i=0; i < arr.length; i++){ //arr.length has 3 elements
        for (var j = 0; j < arr[i].length; j++){ //arr[i].length has individual numbers within an element. 2 and 3 respectively
            product *= arr[i][j]; //i is outer array and j is the inner array
        }
    }
    
    return product;
}
//multiply all the numbers within the nested arrays
var product = multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);
console.log(product); //Answer 5040

////////////////////////////////////////////////////////////////
//53. ITERATE WITH DO... WHILE LOOPS
//Example 1
var myArray = [];
var i = 10;
while (i < 5){
    myArray.push(i);
    i++;
}
console.log(i, myArray); //Output 10,[]

//Example 2
var myArray = [];
var i = 10;
do {
    //therefore this code runs once before checking the condition at "while"
    myArray.push(i);
    i++;
} while (i < 5) //by default, while conditions will be true. If false, the condition breaks out of the loop.
console.log(i, myArray); //Output 11,[10]


////////////////////////////////////////////////////////////////
//54. PROFILE LOOKUP
var contacts = [
    {
        "firstNname": "Akira",
        "lastName": "Laine",
        "number": "012341",
        "likes": ["Pizza", "Coding", "Brownie"]
    },
    {
        "firstNname": "Harry",
        "lastName": "Potter",
        "number": "876785",
        "likes": ["Hogwats", "Magic", "Hagrid"]
    }
];
function lookUpProfile(name, prop){
    for (var i = 0; i < contacts.length; i++){
        if(contacts[i].firstName === name){
            return contacts[i][prop] || "no such property";
        }
    }
    return "No such contact";
}
var data = lookUpProfile("Akira", "lastName"); //if not in data, it will output "no such property or contact"
console.log(data); //output Laine


////////////////////////////////////////////////////////////////
//55. GENERATE RANDOM FRACTIONS
function randomFraction(){
    //return 0;
    return Math.random(); //will generate random decimal numbers
}
console.log(randomFraction());

////////////////////////////////////////////////////////////////
//56. GENERATE RANDOM WHOLE NUMBERS
var randomNumberBetween0and19 = Math.floor(Math.random() * 20); 
//Math.floor rounds down to the nearest whole number
//Math.random will never give you whole number
//*20 will give you 0 to 19 not including 20
function randomWholeNum(){
    return Math.floor(Math.random() * 10); //*10 will give you a number between 0 and 9
}
console.log(randomWholeNum());

////////////////////////////////////////////////////////////////
//57. GENERATE RANDOM WHOLE NUMBERS WITHIN A RANGE
function ourRandomRange(ourMin, ourMax){
    return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
}

var ourRandom = ourRandomRange(1, 9);
console.log(ourRandom);


////////////////////////////////////////////////////////////////
//58. USE THE parseInt Function
function convertToInteger(str){
    return parseInt(str);
}
convertToInteger("56"); //This will convert the string 56 to integer 56


////////////////////////////////////////////////////////////////
//59. USE THE parseInt FUNCTION WITH A RADIX
//Radix base 2 is binary
//Radix base 10 is normal integer
function convertToInteger(str){ //convert binary to integer
    return parseInt(str, 2) //2 represents binary    
}
convertToInteger("10011");


////////////////////////////////////////////////////////////////
//60. USE THE CONDITIONAL (TERNARY) OPERATOR
//condition ? statement-if-true : statement-if-false;
//One line if-else expression
function checkEqual(a, b){
    /*Similar to this
    if (a === b) {
        return true;
    }
    else {
        return false;
    }*/
    return a === b ? true : false; //NOTE the : and ?
}
checkEqual(1, 2);

////////////////////////////////////////////////////////////////
//61. USE MULTIPLE CONDITIONAL (TERNARY) OPERATORS
function checkSign(num){
    return num > 0 ? "positive" : num < 0 ? "negative" : "zero" //if false/0 will return zero
}
console.log(checkSign(10));  //positive
console.log(checkSign(-10)); //negative
console.log(checkSign(0));    //zero

////////////////////////////////////////////////////////////////
//62. DIFFERENCES BETWEEN THE VAR, LET AND CONST KEYWORDS
//var = variables can be declared many times / public
//let = variables can be declared only once / private
//const = variables that cannot be modified, it is common to declare a variable like this const VARIABLE = A; //use all caps
function abc(){
    "use strict"; //enables strict mode, catches common coding mistakes and unsafe actions
                        //alot of people uses strict at the top of the file or just as a function to catch a mistake
}

////////////////////////////////////////////////////////////////
//63. MUTATE AN ARRAY DECLARED IN CONST
const s = [5, 7, 2];
function editInPlace(){
    "use strict";
    //s = [2, 5, 7]; //this code cannot rearrange the array
    //but this method can rearrange
    s[0] = 2;
    s[1] = 5;
    s[2] = 7;
}
editInPlace();
console.log(s);

////////////////////////////////////////////////////////////////
//64. PREVENT OBJECT MUTATION
function freezeObj(){
    "use strict";
    const MATH_CONSTANTS = { //1. declaring math_constants variable with Pi and uses try-catch block to test variable
        PI: 3.14
    };
    
    Object.freeze(MATH_CONSTANTS); //5. adding this will freeze the const variable therefore PI will still be 3.14
    
    //try-catch block
    try {
        MATH_CONSTANTS.PI = 99; //2. test to reassign pi to 99
    }catch(ex){ //3. ex stands for error or exception
        console.log(ex); //4. outputs 99 since math_constants has been reassigned to 99
    }
    return MATH_CONSTANTS.PI;
}
const PI = freezeObj();
console.log(PI);


////////////////////////////////////////////////////////////////
//65. USE ARROW FUNCTIONS TO WRITE CONCISE ANONYMOUS FUNCTIONS
//A function without a name
//nameless function can be converted into arrow function

//FROM THIS:
var magic = function(){
    return new Date();
};

//TO THIS:
var magic () => {
    return new Date;
}

//TO THIS:
var magic = () => new Date();



////////////////////////////////////////////////////////////////
//66. WRITE ARROW FUNCTIONS WITH PARAMETERS

//Convert this to arrow function
var myConcat = function(arr1, arr2){
    return arr1.concat(arr2);
};
console.log(myConcat([1, 2], [3, 4, 5]));

//The arrow function
var myConcat = (arr1, arr2) => arr1.concat(arr2);
console.log(myConcat([1, 2], [3, 4, 5])); //Outputs [1, 2, 3, 4, 5]


////////////////////////////////////////////////////////////////
//67. WRITE HIGHER ORDER ARROW FUNCTIONS PART 1
//Map, filter and reduce
//Whenever on function takes another function as an argument, hat's a good time for arrow function
    const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];
    const squareList = (arr) => {
        const squaredIntegers = arr;
        return squaredIntegers;
    };
    const squaredIntegers = squareList(realNumberArray);
    console.log(squaredIntegers); //Outputs [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];

    //adding filter function
        const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];
        const squareList = (arr) => {
            const squaredIntegers = arr.filter; //adding filter function
            return squaredIntegers;
        };
        const squaredIntegers = squareList(realNumberArray);
        console.log(squaredIntegers);

        //adding arrow function
            const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];
            const squareList = (arr) => {
                //adding arrow function NOTE: num is a single argument therefore you don't need brackets num()
                const squaredIntegers = arr.filter(num => Number.isInteger(num) && num > 0); 
                return squaredIntegers; 
            };
            const squaredIntegers = squareList(realNumberArray);
            console.log(squaredIntegers);//Result will be arrays with numbers more than 0 and also integers, therefore, 4, 42 and 6

             //adding the map function to get the decimal numbers
                    const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];
                    const squareList = (arr) => {
                        //adding map function where .map contains 4, 424 and 6. Now e want to square those numbers.
                        const squaredIntegers = arr.filter(num => Number.isInteger(num) && num > 0).map(x => x * x); //x means every element in the new array
                        return squaredIntegers;
                    };
                    const squaredIntegers = squareList(realNumberArray);
                    console.log(squaredIntegers); //Outputs [16, 1764, 36]
                    
                    
////////////////////////////////////////////////////////////////
//68. WRITE HIGHER ORDER ARROW FUNCTIONS PART 2
const increment = (function(){
    return function increment(number, value = 1){ //value = 1 means  the value will increment by 1 by default if not set in the console.log
        return number + value;        
    };
}) ();
console.log(increment(5, 2)); //increment by 2
console.log(increment(5));     //increment by 1


////////////////////////////////////////////////////////////////
//69. USING THE REST OPERATOR WITH FUNCTION PARAMETERS
//Without the rest operator
    const sum = (function(){
        return function sum(x, y, z){ //1. summing x, y and z
            const args = [ x, y, z ]; //2. converting x, y and z into an array called args
            return args.reduce((a, b) => a + b, 0); //3. then reducing them summing them all here
        };
    }) ();
    console.log(sum(1, 2, 3)); //Outputs 6 because 1 + 2 + 3

//Using the rest operator
    const sum = (function(){
        return function sum(...args){ //1. using the rest operator (the 3 dots)
            return args.reduce((a, b) => a + b, 0); //3. then reducing them summing them all here
        };
    }) ();
    console.log(sum(1, 2, 3)); //Outputs 6 because 1 + 2 + 3


////////////////////////////////////////////////////////////////
//70. USE THE SPREAD OPERATOR TO EVALUATE ARRAYS IN-PLACE
//Without spread operator
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
(function(){
    arr2 = arr1; //arr1 will write over arr2, hence the potato in arr2
    arr1[0] = 'potato'
}) ();
console.log(arr2); //Outputs ['potato', 'FEB', 'MAR', 'APR', 'MAY']

//With spread operator
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
(function(){
    arr2 = [...arr1]; //adding the spread operator, this will write all the contents of arr2 into arr1
    arr1[0] = 'potato'
}) ();
console.log(arr2); //Outputs ['JAN', 'FEB', 'MAR', 'APR', 'MAY']


////////////////////////////////////////////////////////////////
//71. USE DESTRUCTING ASSIGNMENT TO ASSIGN VARIABLES FROM OBJECTS
    var voxel = {x: 3.6, y: 7.4, z: 6.54};

    //old method of destructuring syntax
    var a = voxel.x; //so now variable a has a value of 3.6
    var b = voxel.y;
    var c = voxel.z;

    //simpler destructuring syntax
    const { x:a, y:b, z:c} = voxel; //now variable a has a value of 3.6


////////////////////////////////////////////////////////////////
//72. USE DESTRUCTING TO OBTAIN TEMPERATURE
const AVG_TEMPERATURES = {
    today: 77.5,
    tomorrow: 79
};

function getTempOfTmrw(avgTemperatures){
    "use strict";
    const {tomorrow : tempOfTomorrow} = avgTemperatures;
    return tempOfTomorrow;
}
console.log(getTempOfTmrw(AVG_TEMPERATURES)); //Outputs 79


////////////////////////////////////////////////////////////////
//73. USE DESTRUCTING IN NESTED OBJECTS
//the LOCAL_FORECAST attributes will be used to run getMaxOfTmrw function as "forecast"
//forecast equals to maxOfTomorrow variable
//maxOfTomorrow = max>tomorrow>LOCAL_FORECAST

const LOCAL_FORECAST = {
    today: { 
            min: 72, 
            max: 83
    },
    tomorrow: { 
            min: 73.3, 
            max: 84.6
    }
};

function getMaxOfTmrw(forecast){ //forecast is the value of which table to use
    "use strict";
    const { tomorrow : { max : maxOfTomorrow }} = forecast; //
    return maxOfTomorrow;
}
console.log(getMaxOfTmrw(LOCAL_FORECAST)); //Outputs 84.6


////////////////////////////////////////////////////////////////
//74. USE DESTRUCTING TO ASSIGN VARIABLES FROM ARRAYS
//Part1
    cont [z, x, , y] = [1, 2, 3, 4, 5, 6]; //use space to skip the value 3
    console.log(z, x, y); //output 1,2,4
    
//Part2
    let a = 8, b = 6;
    (() => {
        "use strict";
        [a, b] = [b, a] //this line swaps the value between a and b
    }) ();
    console.log(a); //6
    console.log(b); //8
    
    
////////////////////////////////////////////////////////////////
//75. USE DESTRUCTURING WITH THE REST OPERATOR
const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
function removeFirstTwo(list){
    const [ , , ...arr] = list; //to remove the first 2 elements in the array
    //const [ a, b, ...arr] = list; //a will be 1 and b will be 2 and th rest will be in arr
    return arr;
}

const arr = removeFirstTwo(source);
console.log(arr); // [3, 4, 5, 6, 7, 8, 9, 10]
console.log(source); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    

////////////////////////////////////////////////////////////////
//76. USE DESTRUCTURING TO PASS AN OBJECT AS A FUNCTION'S PARAMETERS
//Returning only the elements we need instead of the entire list of elements
//Commonly use with API calls
const stats = {
    max: 56.78,
    standard_deviation: 4.34,
    median: 34.54,
    mode: 23.87,
    min: -0.75,
    average: 35.85
};
const half = (function() {
    /*Original 
    return function half(stats){       //this returns the entire list of elements inside of stats
        return (stats.max + stats.min) / 2.0;
    };*/
    
    return function half( {max, min } ) {    //this returns only the selected elements from stats i.e max and min
        return (max + min) / 2.0;
    };
}) ();

console.log(stats); //{ max: 56.78, standard_deviation: 4.34, median: 34.54, mode: 23.87, min: -0.75, average: 35.85}
console.log(half(stats)); //28.015


////////////////////////////////////////////////////////////////
//77. CREATE STRINGS USING TEMPLATE LITERALS
    //Part 1
    //Using backtick, NOT single quote
    const person = {
        name: "Jon",
        age: 56
    };
    const greeting = `Hello there, ${person.name}! You are ${person.age} years old.`;
    console.log(greeting); //Hello there, Jon! You are 56 years old.

    //Part 2
    const result = {
        success: ["max-length", "no-amd", "prefer-arrow-functions"],
        failure: ["no-var", "var-on-top", "linebreak"],
        skipped: ["id-blacklist", "no-dup-keys"]
    };
    function makeList(arr) {
        const resultDisplayArray = [];
        for (let i = 0; i < arr.length; i++){
            resultDisplayArray.push(`<li class="text-warning">${arr[i]}</li>`)
        }
        return resultDisplayArray;
    }
    
    /**
    *makeList(result.failure) should return:
    *[ `<li class="text-warning">no-var</li>`,
    *  `<li class="text-warning">var-on-top</li>`,
    *  `<li class="text-warning">linebreak</li>` ]
    **/

    const resultDisplayArray = makeList(result.failure);

    console.log(resultDisplayArray);
    //[ "<li class="text-warning">no-var</li>",  "<li class="text-warning">var-on-top</li>", "<li class="text-warning">linebreak</li>"]


////////////////////////////////////////////////////////////////
//78. WRITE CONCISE OBJECT LITERAL DECLARATIONS USING SIMPLE FIELDS
    //Part 1 - we can make the code below een simpler
    const createPerson = (name, age, gender) => {
        return { //too many repetition here
            name: name,
            age: age,
            gender: gender
        };
    };
    console.log(createPerson("Person1", 56, "male"));
    
    //Part2 - The simpler version of the code above
    const createPerson = (name, age, gender) => ( { name, age, gender } );
    console.log(createPerson("Person1", 56, "male"));

////////////////////////////////////////////////////////////////
//79. WRITE CONCISE DECLARATIE FUNCTIONS
    //Part 1 - The long way
    const bicycle = {
        gear: 2,
        setGear: function(newGear){
            "use strict";
            this.gear = newGear;
        }
    };
    bicycle.setGear(3);
    console.log(bicycle.gear);

    //Part 2 - The simpler way
    const bicycle = {
        gear: 2,
        setGear(newGear){ //by removing the "function"
            "use strict";
            this.gear = newGear;
        }
    };
    bicycle.setGear(3);
    console.log(bicycle.gear);


////////////////////////////////////////////////////////////////
//80. USE CLASS SYNTAX TO DEFINE A CONSTRUCTOR FUNCTION
    //Part1 - older way to create an object
    var SpaceShuttle = function(targetPlanet){
        this.targetPlanet = targetPlanet;
    }
    var zeus = new SpaceShuttle('Jupiter');
    console.log(zeus.targetPlanet);

    //Part2 - new way, the class syntax replaces the constructor
    class SpaceShuttle {
        constructor(targetPlanet){
            this.targetPlanet = targetPlanet;
        }
    }
    var zeus = new SpaceShuttle('Jupiter');
    console.log(zeus.targetPlanet);
    
    
    //Part 3 - another example
    function makeClass(){
        return Vegetable;
    }
    const Vegetable = makeClass();
    const carrot = new Vegetable('carrot');
    console.log(carrot.name); //Outputs carrot
    
    //Part 4 - 
    function makeClass(){
        class Vegetable {
            constructor(name){
                this.name = name;
            }
        }
        return Vegetable;
    }
    const Vegetable = makeClass();
    const carrot = new Vegetable('carrot');
    console.log(carrot.name); //Outputs carrot


////////////////////////////////////////////////////////////////
//81. USE GETTERS AND SETTERS TO CONTROL ACCESS TO AN OBJECT
        //Part 1
        class Book {
            constructor(author){
                this._author = author;
            }
            
            //getter
            get writer(){
                return this._author;
            }
            
            //setter
            set writer(updatedAuthor){
                this._author = updatedAuthor;
            }
        }

        //Part 2
        function makeClass(){
            class Thermostat{
                constructor(temp){
                    //creating private variable this._temp constrained to this class
                    this._temp = 5/9 * (temp - 32); //convert fahrenheit to celsius equation
                }
                get temperature(){
                    return this._temp; //this will be in celsius
                }
                set temperature(updateTemp){
                    this._temp = updatedTemp; //will still be in celsius
                }
            }
            return Thermostat;
        }
        const Thermostat = makeClass(); //function returns Thermostat class
        const thermos = new Thermostat(76); //76 will go to the constructor(temp), in turn converting to Celsius
        let temp = thermos.temperature; //thermos.temperature will use getter NOTE: getter and setters are properties therefore no parentheses
        thermos.temperature = 26; //thermos.temperature will use setter to updatedTemp
        temp = thermos.temperature;
        console.log(temp); //Output 26


////////////////////////////////////////////////////////////////
//82. UNDERSTANDING THE DIFFERENCES BETWEEN IMPORT AND REQUIRE
//In the past we use require function to retrieve function from another file, now we have import and export
    //string_function.js
        export const capitalizeString = str => str.toUpperCase() //toUpperCase makes every letter uppercase
        //the export enables the code to be exported into another file

    //index.js
    import { capitalizeString } from "./string_function"
        const cap = capitalizeString("hello");
        console.log(cap); //Outputs HELLO
        

////////////////////////////////////////////////////////////////
//83. USE EXPORT TO REUSE A CODE BLOCK
//Now we export in a different way, by adding export at the very begining of the code
const capitalizeString = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
export { capitalizeString };
export const foo = "bar";
export const bar = "foo";

////////////////////////////////////////////////////////////////
//84. USE * TO IMPORT EVERYTHING FROM A FILE
import * as capitalizeStrings from "capitalize_strings";

//* represents "everything"
//capitalizeStrings is the object name
//"capitalize_strings" is the name of the file 


////////////////////////////////////////////////////////////////
//85. CREATE AN EXPORT FALLBACK WITH EXPORT DEFAULT
export default function subtract(x, y) {return x - y;} //"export default" is the fallback

////////////////////////////////////////////////////////////////
//86. IMPORTING AN EXPORT DEFAULT
import subtract from "math_functions"; //if not a default export, you put curly braces around "subtract"
subtract(7,4); //this line from a file called math_functions

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////























