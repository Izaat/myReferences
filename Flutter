Whenever you see '>' it means that it has to be inside the bracket.
Example: Class1(); > Class2() > function1, function2 
Meaning: Class1(Class2(function1, function2));
widget_test.dart for debugging
Opening the list of available properties available within the class
    press CTRL+Q when you type in 'whatever('
    dropdown menu listing all the available functions will also appear when you type in 'whatever.'
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Shortcuts/Tips
02. Structures
03. Texts
04. Colors
05. StatelessWidget vs StatefulWidget
06. Hot reload
07. @override
08. Images & Assets
09. Icons and Buttons
10. Containers & Paddings
11. Rows and Columns
12. Shortcuts
13. Expanded widgets
14. List of data
15. Custom Classes Part 1
16. Custom Classes Part 2


01. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Shurtcuts/Tips
    Press CTRL+Q in Android Studio to open up the list of parameters

02. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
https://api.flutter.dev/flutter/material/material-library.html#classes
Structures
    //MaterialApp() == A wrapper and the root widget by google 
            //Inside MaterialApp bracket, type in, home: Text('Hello'), and end every line/widget with comma. 
            //SemiColon not being used for widgets
    //The shortcut called "=>"
            //void main() => runApp(MaterialApp());
            //IS SIMILAR TO:
            //void main() { 
                runApp( 
                    MaterialApp(
                        home: Text('Hello'), 
                    ) 
                );
            }
    //Instead of using "Text('Hello')," for "home:" inside of "MaterialApp()", we can use "Scaffold()" to activate a tree of of widgets
    //Scaffolding - You cant even wrap a text in Scaffold. It is just a feature.
        //Instead, you can us "appBar: AppBar(),". 
        //To add in text, add in "title: Text('Hello')," into the AppBar()
        //Example:
            void main() {
                runApp(MaterialApp(
                    home: Scaffold(
                        appBar: AppBar(
                            title: Text('Hello'),
                        ),
                    ),
                ));
            }
    //Classes, similarities with Html
        //appBar: is like the header tag in html
        //body: is similar to body tag in html 

    //body: 
            this widget has child: 


03. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Texts
    //runApp > MaterialApp() > home: Scaffold() >
            appBar: AppBar() > title: Text() || centerTitle: true
            body: Center() > child:Text() > 'String'
            body: Center() > child: Text() > style: TextStyle() > fontSize || fontWeight
            floatingActionButton: FloatingActionButton() > child: Text() > 'String'
                    //for FloatingActionButton(), you must put 'onPressed(){}'
    //Adding external fonts
        >>you can download any fonts and add them into a new folder Project > projectName > fonts
        >>go to pubspec.yaml
                NOTE: the spaces and alignments are important for this file
                look for the class called 'fonts:' and enable it by removing the hashes (#)
                under fonts: > family: , add in the name for the external font file ('YourFont')
                under fonts: > fonts: > assets: , add in the location of the file
                    the location of pubspec.yaml is the same as the project folder, therefore 'fonts/YourFont.ttf' as font location
                under body: Center() > child: Text() > style: TextStyle(), add in fontFamily: 'YourFont'
                save to update and restart

04. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Colors
    //runApp > MaterialApp() > home: Scaffold() >
            appBar: AppBar() > backgroundColor: Colors.red[600]
            body: Center() > child: Text() > style: TextStyle() > color: Colors.grey[600]
            floatingActionButton: FloatingActionButton > backgroundColor: Colors.red[600]

05. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//StatelessWidget vs StatefulWidget

    Stateless: cannot change over time as we use the app, need to restart app in order to see changes
        Flutter has an awesome feature in StatelessWidget where it changes only the minor changes in realtime without restarting the app
        Example of statelessWidget: layouts like the menu list
        
    Stateful: can change over time as we use the app, 
        Example of StatefulWidget: Highscore and current score texts and numbers in mobile games,
            class Test extends StatefulWidget {} >
                @override
                _TestState createState() => _TestState();                
            class _TestState extends State<Test> {} >
                @override
                Widget build(BuildContext context) {} >
                    return Container();                                                 //Just replace Container() with your Scaffold()
        Alternatively, instead of replacing your entire Scaffold() with the Container(), you can select the StatelessWidget extension, click on light bulb and select 'convert to stateful'
            //See 12. for more info, result will be as follows
            
        class YourClassName extends StatefulWidget {} > 
            int yourGameScore = 0;                                                       //add this
            @override   
            Scaffold (), > 
                floatingActionButton: FloatingActionButton(), > 
                    onPressed: () {}, > setState(); > (){}, > yourGameScore += 1;        //add setState and > represents it should go into curly brackets if available
                    child: Icon(Icons.add),
                    backgroundColor: Colors.grey[800],
                body: Padding(), > child: Column(), > Text(), > 
                    '$yourGameScore',                                                    //add this
                    style: TextStyle(), > color: , letterSpacing: , etc.
                
        Restart App to see changes in the app.        
    
06. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Hot Reload - 
    For the emulator to automatically reload the app instead of manually doing so
    Flutter will automatically detect the changes made to the code and updates the app accordingly after you save file
    Flutter will only update the changes made without handling the entire app, this way, the rebuild will be much faster
    Such is the power of using StatelessWidget
    
    //runApp(); > MaterialApp() > home: yourClassName(),
    
    //class yourClassName extends StatelessWidget {
            @override
            Widget build(BuildContext context){
                //return Container( );                          //to replace the Container class with all the contents under Scaffold class
                return Scaffold(contents bla bla bla);
            }
        }

07. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@override
    Based on point 6, the StatelessWidget has its own build() function. 
    By adding @override, it uses the build() function that you created in Scaffold(), 
    instead of using the build() function your class inherited from the StatelessWidget class
    Be aware of all the functions within the StatelessWidget and StatefulWidget while programming
    
    
08. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Images & Assets
    Scaffold(); > body: Center(), > child: Image(), >
        image: NetworkImage('image url'), //OR
        image: AssetImage('assets/yourimage.jpg'),
            //store your images in ../ProjectName/assets
            //NOTE: main.dart is inside ../ProjectName/lib
            //Under pubspec.yaml, activate 'assets:',
            //Add 'assets/' to include all files inside the folder.
            //Or, 'assets/yourimage.jpg' to include only the file
            #blablabla
            assets:
            - assets/
    -OR- the shortcut
    Scaffold(); > body: Center(), > child: >
        Image.network('image url'),
        Image.asset('assets/yourimage.jpg'),    
    
    
09. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Buttons & Icons
    Scaffold(); > body: Center(), > child: Icon(), >
        Icon.airport_shuttle,
        color: Colors.lightBlue,
        size: 50.0,

    Scaffold(); > body: Center(), > child: RaisedButton(), >        //RaisedButton(), FlatButton(), FloatingButton()
        onPressed: () {},                           //{} > print(); > 'string', add function into {} to make it pressable
        child: Text(), > 'click me'

//Icon inside a button
    Scaffold(); > body: Center(), >
        child: RaisedButton.icon(), >
            onPressed: () {},
            icon: Icon(), > Icons.mail
            label: Text(), > 'mail me'
            color: Colors.amber,
        -OR-
        child: IconButton(), >          //it shows icon which can be press where icon class cannot be pressed
            onPressed: () {},
            icon: Icon(), > Icon.mail
            label: Text(), > 'mail me'
            color: Colors.amber    
10. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Containers & Paddings
    Scaffold(); > body: Container(), >          //Container restricts itself to child
        color: Color.grey[400],
        child: > Test(), > 'String'
        padding: EdgeInsets. >
            .symmetric(horizontal: 30.0, vertical: 10.0),
                //requires two values to control hor. and vert. direction, works like "linked" being activated in Elementor
            .fromLTRB(left, top, right, bottom),
                //requires 4 values
            .all(20.0),
                //20 pixels of padding, same with symmetric
        margin: > You can use this with EdgeInsets.

    Scaffold(); > body: Padding(),      //cant apply color and margin to padding widget
        color: Color.grey[400],
                child: > Test(), > 'String'
                padding: EdgeInsets. >
                    .symmetric(horizontal: 30.0, vertical: 10.0),
                    .fromLTRB(left, top, right, bottom),
                    .all(20.0),
                margin: > You can use this with EdgeInsets.

11. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Rows and Columns
    You can add Rows() inside Column() or vice versa
    You can also have children widget to parent another children widget

    //Rows
        Scaffold(); > body: Row(), >
            mainAxisAlignment: MainAxisAlignment.# >      //main axis = horizontal
                .center,                                  //centers the entire row, like the center text icon in MSWords
                .spaceEvenly,                             //space everything evenly, includes left and right
                .spaceAround                              //same as .spaceevenly, just that space in between elements are doubled
                .end                                      //snaps everything to the right. no space between elements
                .spaceBetween                             //Space between every element, but no space at left and right.
                .start                                    //snaps everything to the left. no space between elements
            crossAxisAlignment: CrossAxisAlignment.#      //cross axis = vertical
                .center                                   //default value at the top
                .stretch                                  //stretches everything vertically to entire screen
                .start                                    //snaps to top-end of the tallest element
                .end                                      //snaps to bottom-end of the tallest element
                .values
            children: <Widget> [],       //you can list multiple 'Class(child:#)' inside the Row() class, classes needs to be inside []
            children: <Widget> [], >
                Text(), > 'String'
                FlatButton(), >
                    onPressed: (){},
                    color: Colors.amber,
                    child: Text() > 'String'
                Container(), >
                    color: Colors.cyan,
                    padding: EdgeInsets.all(30.0),
                    child: Text() > 'String'

    //Columns
       Scaffold(); > body: Column(), >
            mainAxisAlignment: MainAxisAlignment.# >      //main axis = vertical
                .center,                                  //centers the entire column to the left but vertically center
                .spaceEvenly,                             //space everything evenly, includes top and bottom
                .spaceAround                              //same as .spaceevenly, just that space in between elements are doubled
                .end                                      //snaps everything to the bottom
                .spaceBetween                             //Space between every element, but no space at top and bottom
                .start                                    //snaps everything to the top
            crossAxisAlignment: CrossAxisAlignment.# >    //cross axis = horizontal
                .center                                   //snaps to bottom but everything is at the center of column, left of the screen
                .stretch                                  //stretches everything horizontally to the entire screen
                .start                                    //snaps to left-end of the widest element
                .end                                      //snaps to right-end of the widest element
                .values
            children: <Widget> [], >
                Container(), >
                    color: Colors.cyan,
                    padding: EdgeInsets.all(30.0),
                    child: Text() > 'String'

    
12. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Shortcuts
    Use the lightbulb on Android Studio to perform the shortcuts.
        'Wrap' means adding a parent to a widget
        'Replace with children' means removing a parent widget
        You can do the same shortcuts on 'Flutte Outline' side panel


13. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Expanded Widget
    If the container being duplicated 3x without Expanded() and flex, it will snap to the top left, all taking the same size
    If the container being duplicated 3x with one of the container being wrapped by the Expanded() class, BUT all were without flex, 
        the containers without Expanded() will snap to the right, making way for the container with Expanded() to expand horizontally.
    If the container being duplicated 3x and all of them being wrapped by the Expanded() class, BUT all were without flex, all of them will expand EQUALLY
    "Flex" represents size. //optional
        Add all flex values under 'children: <Widget>' for the denominator, the total will be your assigned value of the width of the screen
        Under Expanded(), the flex value will be the numerator
        Numerator/Denominator
    You can also wrap Expanded() widget and all its properties to images
    
    Scaffold(); > body: Row(), > children: <Widget> [] > 
        Expanded (), > child: Image.asset('assets/yourimage.jpg') //[optional] See 08. for adding image
        Expanded (), >
            flex: 3,                                              //[optional]
            child : Container() >
                padding: EdgeInsets.all(30.0),
                color: Colors.cyan,
                child: Text(), > 'String'

14. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Lists of data

    Folder Project > test
        Delete widget_test.dart //MyApp class from this file clashes with the main.dart file
        
    //main.dart
        import 'package:flutter/material.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<String> quotes = []; > 
                'Quote1',
                'Quote2',
                'Quote3',
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > quoteParam
                    //.toList()
                        > -empty-

    //Output: Shows the list of quotes on the screen
    //Tips: children: quotes.map((quoteParam) => Text(quoteParam)).toList(),


15. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Custom Classes Part 1
    Follow the code on 14.
    
    //quote.dart
        class Quote {} > 
            String text;
            String author;            
            Quote () {} >
                () > String text, String author
                {} > 
                    this.text = text;
                    this.author = author;
        //Adding in new quotes
        Quote myquote = Quote('Quote4', 'Quote5');
                
    //main.dart
        import 'package:flutter/material.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<String> quotes = []; > 
                'Quote1',
                'Quote2',
                'Quote3',
                
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > quoteParam
                    //.toList()
                        > -empty-


16. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Custom Classes Part 2
    Follow the code on 15.
    Using named Parameters. Example, Author, title, etc
    
    //quote.dart
        class Quote {} > 
            String text;
            String author;            
            Quote ()  > {this.text, this.author}                                             //see the diff with 15.

        //Adding in new quotes
        //Quote myquote = Quote(text: 'Quote4', author: 'Quote5');        //see the diff with 15. Line not in use for app
                
    //main.dart
        import 'package:flutter/material.dart';
        import 'quote.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<Quote> quotes = []; > 
                Quote1(author: 'Writer01', text: 'BookTitle01'),
                Quote2(author: 'Writer02', text: 'BookTitle02'),
                Quote3(author: 'Writer03', text: 'BookTitle03')
                
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > '${quoteParam.text} - ${quoteParam.author}'
                    //.toList()
                        > -empty-
                        
    RestartApp and run













