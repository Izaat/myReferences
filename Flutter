Whenever you see '>' it means that it has to be inside the bracket.
Example: Class1(); > Class2() > function1, function2 
Meaning: Class1(Class2(function1, function2));
widget_test.dart for debugging
Opening the list of available properties available within the class
    press CTRL+Q when you type in 'whatever('
    dropdown menu listing all the available functions will also appear when you type in 'whatever.'
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Shortcuts/Tips
02. Structures
03. Texts
04. Colors
05. StatelessWidget vs StatefulWidget
06. Hot reload
07. @override
08. Images & Assets
09. Icons and Buttons
10. Containers & Paddings
11. Rows and Columns
12. Shortcuts
13. Expanded widgets
14. List of data
15. Custom Classes Part 1
16. Custom Classes Part 2
17. Extract widgets
18. Functions as Parameters
19. World time App #1
20. World time App #2
21. Widget Lifecycle, Stateful Widget Triggers (setState, initState, Build, Dispose)
22. Asynchronous Codes
23. World Time App #3 - Integrating with World Time API
24. World Time App #4 - Make getData() reusable, and Future <void>
25. Error Handling - Try & Catch
26. World Time App #5 - Passing Route Data (ModalRoute)
27. World Time App #6 - Formatting and Showing Dates, Intl.dart package
28. World Time App #7 - Loading Screen
29. World Time App #8 - Ternary Operators - Change background to Day/Night according to time
30. World Time App #9 - List View Builder 

01. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Shurtcuts/Tips
    Press CTRL+Q in Android Studio to open up the list of parameters

02. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
https://api.flutter.dev/flutter/material/material-library.html#classes
Structures
    //MaterialApp() == A wrapper and the root widget by google 
            //Inside MaterialApp bracket, type in, home: Text('Hello'), and end every line/widget with comma. 
            //SemiColon not being used for widgets
    //The shortcut called "=>"
            //void main() => runApp(MaterialApp());
            //IS SIMILAR TO:
            //void main() { 
                runApp( 
                    MaterialApp(
                        home: Text('Hello'), 
                    ) 
                );
            }
    //Instead of using "Text('Hello')," for "home:" inside of "MaterialApp()", we can use "Scaffold()" to activate a tree of of widgets
    //Scaffolding - You cant even wrap a text in Scaffold. It is just a feature.
        //Instead, you can us "appBar: AppBar(),". 
        //To add in text, add in "title: Text('Hello')," into the AppBar()
        //Example:
            void main() {
                runApp(MaterialApp(
                    home: Scaffold(
                        appBar: AppBar(
                            title: Text('Hello'),
                        ),
                    ),
                ));
            }
    //Classes, similarities with Html
        //appBar: is like the header tag in html
        //body: is similar to body tag in html 

    //body: 
            this widget has child: 


03. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Texts
    //runApp > MaterialApp() > home: Scaffold() >
            appBar: AppBar() > title: Text() || centerTitle: true
            body: Center() > child:Text() > 'String'
            body: Center() > child: Text() > style: TextStyle() > fontSize || fontWeight
            floatingActionButton: FloatingActionButton() > child: Text() > 'String'
                    //for FloatingActionButton(), you must put 'onPressed(){}'
    //Adding external fonts
        >>you can download any fonts and add them into a new folder Project > projectName > fonts
        >>go to pubspec.yaml
                NOTE: the spaces and alignments are important for this file
                look for the class called 'fonts:' and enable it by removing the hashes (#)
                under fonts: > family: , add in the name for the external font file ('YourFont')
                under fonts: > fonts: > assets: , add in the location of the file
                    the location of pubspec.yaml is the same as the project folder, therefore 'fonts/YourFont.ttf' as font location
                under body: Center() > child: Text() > style: TextStyle(), add in fontFamily: 'YourFont'
                save to update and restart

04. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Colors
    //runApp > MaterialApp() > home: Scaffold() >
            appBar: AppBar() > backgroundColor: Colors.red[600]
            body: Center() > child: Text() > style: TextStyle() > color: Colors.grey[600]
            floatingActionButton: FloatingActionButton > backgroundColor: Colors.red[600]

05. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//StatelessWidget vs StatefulWidget

    Stateless: cannot change over time as we use the app, need to restart app in order to see changes
        Flutter has an awesome feature in StatelessWidget where it changes only the minor changes in realtime without restarting the app
        Example of statelessWidget: layouts like the menu list
        
    Stateful: can change over time as we use the app, 
        Example of StatefulWidget: Highscore and current score texts and numbers in mobile games,
            class Test extends StatefulWidget {} >
                @override
                _TestState createState() => _TestState();                
            class _TestState extends State<Test> {} >
                @override
                Widget build(BuildContext context) {} >
                    return Container();                                                 //Just replace Container() with your Scaffold()
        Alternatively, instead of replacing your entire Scaffold() with the Container(), you can select the StatelessWidget extension, click on light bulb and select 'convert to stateful'
            //See 12. for more info, result will be as follows
            
        class YourClassName extends StatefulWidget {} > 
            int yourGameScore = 0;                                                       //add this
            @override   
            Scaffold (), > 
                floatingActionButton: FloatingActionButton(), > 
                    onPressed: () {}, > setState(); > (){}, > yourGameScore += 1;        //add setState and > represents it should go into curly brackets if available
                    child: Icon(Icons.add),
                    backgroundColor: Colors.grey[800],
                body: Padding(), > child: Column(), > Text(), > 
                    '$yourGameScore',                                                    //add this
                    style: TextStyle(), > color: , letterSpacing: , etc.
                
        Restart App to see changes in the app.        
    
06. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Hot Reload - 
    For the emulator to automatically reload the app instead of manually doing so
    Flutter will automatically detect the changes made to the code and updates the app accordingly after you save file
    Flutter will only update the changes made without handling the entire app, this way, the rebuild will be much faster
    Such is the power of using StatelessWidget
    
    //runApp(); > MaterialApp() > home: yourClassName(),
    
    //class yourClassName extends StatelessWidget {
            @override
            Widget build(BuildContext context){
                //return Container( );                          //to replace the Container class with all the contents under Scaffold class
                return Scaffold(contents bla bla bla);
            }
        }

07. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@override - Also read flutterdart.txt (Classes)
    Based on point 6, the StatelessWidget has its own build() function. 
    By adding @override, it uses the build() function that you created in Scaffold(), 
    instead of using the build() function your class inherited from the StatelessWidget class
    Be aware of all the functions within the StatelessWidget and StatefulWidget while programming
    
    
08. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Images & Assets
    Scaffold(); > body: Center(), > child: Image(), >
        image: NetworkImage('image url'), //OR
        image: AssetImage('assets/yourimage.jpg'),
            //store your images in ../ProjectName/assets
            //NOTE: main.dart is inside ../ProjectName/lib
            //Under pubspec.yaml, activate 'assets:',
            //Add 'assets/' to include all files inside the folder.
            //Or, 'assets/yourimage.jpg' to include only the file
            #blablabla
            assets:
            - assets/
    -OR- the shortcut
    Scaffold(); > body: Center(), > child: >
        Image.network('image url'),
        Image.asset('assets/yourimage.jpg'),    
    
    
09. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Buttons & Icons
    Scaffold(); > body: Center(), > child: Icon(), >
        Icon.airport_shuttle,
        color: Colors.lightBlue,
        size: 50.0,

    Scaffold(); > body: Center(), > child: RaisedButton(), >        //RaisedButton(), FlatButton(), FloatingButton()
        onPressed: () {},                           //{} > print(); > 'string', add function into {} to make it pressable
        child: Text(), > 'click me'

//Icon inside a button
    Scaffold(); > body: Center(), >
        child: RaisedButton.icon(), >
            onPressed: () {},
            icon: Icon(), > Icons.mail
            label: Text(), > 'mail me'
            color: Colors.amber,
        -OR-
        child: IconButton(), >          //it shows icon which can be press where icon class cannot be pressed
            onPressed: () {},
            icon: Icon(), > Icon.mail
            label: Text(), > 'mail me'
            color: Colors.amber    
10. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Containers & Paddings
    Scaffold(); > body: Container(), >          //Container restricts itself to child
        color: Color.grey[400],
        child: > Test(), > 'String'
        padding: EdgeInsets. >
            .symmetric(horizontal: 30.0, vertical: 10.0),
                //requires two values to control hor. and vert. direction, works like "linked" being activated in Elementor
            .fromLTRB(left, top, right, bottom),
                //requires 4 values
            .all(20.0),
                //20 pixels of padding, same with symmetric
        margin: > You can use this with EdgeInsets.

    Scaffold(); > body: Padding(),      //cant apply color and margin to padding widget
        color: Color.grey[400],
                child: > Test(), > 'String'
                padding: EdgeInsets. >
                    .symmetric(horizontal: 30.0, vertical: 10.0),
                    .fromLTRB(left, top, right, bottom),
                    .all(20.0),
                margin: > You can use this with EdgeInsets.

11. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Rows and Columns
    You can add Rows() inside Column() or vice versa
    You can also have children widget to parent another children widget

    //Rows
        Scaffold(); > body: Row(), >
            mainAxisAlignment: MainAxisAlignment.# >      //main axis = horizontal
                .center,                                  //centers the entire row, like the center text icon in MSWords
                .spaceEvenly,                             //space everything evenly, includes left and right
                .spaceAround                              //same as .spaceevenly, just that space in between elements are doubled
                .end                                      //snaps everything to the right. no space between elements
                .spaceBetween                             //Space between every element, but no space at left and right.
                .start                                    //snaps everything to the left. no space between elements
            crossAxisAlignment: CrossAxisAlignment.#      //cross axis = vertical
                .center                                   //default value at the top
                .stretch                                  //stretches everything vertically to entire screen
                .start                                    //snaps to top-end of the tallest element
                .end                                      //snaps to bottom-end of the tallest element
                .values
            children: <Widget> [],       //you can list multiple 'Class(child:#)' inside the Row() class, classes needs to be inside []
            children: <Widget> [], >
                Text(), > 'String'
                FlatButton(), >
                    onPressed: (){},
                    color: Colors.amber,
                    child: Text() > 'String'
                Container(), >
                    color: Colors.cyan,
                    padding: EdgeInsets.all(30.0),
                    child: Text() > 'String'

    //Columns
       Scaffold(); > body: Column(), >
            mainAxisAlignment: MainAxisAlignment.# >      //main axis = vertical
                .center,                                  //centers the entire column to the left but vertically center
                .spaceEvenly,                             //space everything evenly, includes top and bottom
                .spaceAround                              //same as .spaceevenly, just that space in between elements are doubled
                .end                                      //snaps everything to the bottom
                .spaceBetween                             //Space between every element, but no space at top and bottom
                .start                                    //snaps everything to the top
            crossAxisAlignment: CrossAxisAlignment.# >    //cross axis = horizontal
                .center                                   //snaps to bottom but everything is at the center of column, left of the screen
                .stretch                                  //stretches everything horizontally to the entire screen
                .start                                    //snaps to left-end of the widest element
                .end                                      //snaps to right-end of the widest element
                .values
            children: <Widget> [], >
                Container(), >
                    color: Colors.cyan,
                    padding: EdgeInsets.all(30.0),
                    child: Text() > 'String'

    
12. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Shortcuts
    Use the lightbulb on Android Studio to perform the shortcuts.
        'Wrap' means adding a parent to a widget
        'Replace with children' means removing a parent widget
        You can do the same shortcuts on 'Flutte Outline' side panel


13. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Expanded Widget
    If the container being duplicated 3x without Expanded() and flex, it will snap to the top left, all taking the same size
    If the container being duplicated 3x with one of the container being wrapped by the Expanded() class, BUT all were without flex, 
        the containers without Expanded() will snap to the right, making way for the container with Expanded() to expand horizontally.
    If the container being duplicated 3x and all of them being wrapped by the Expanded() class, BUT all were without flex, all of them will expand EQUALLY
    "Flex" represents size. //optional
        Add all flex values under 'children: <Widget>' for the denominator, the total will be your assigned value of the width of the screen
        Under Expanded(), the flex value will be the numerator
        Numerator/Denominator
    You can also wrap Expanded() widget and all its properties to images
    
    Scaffold(); > body: Row(), > children: <Widget> [] > 
        Expanded (), > child: Image.asset('assets/yourimage.jpg') //[optional] See 08. for adding image
        Expanded (), >
            flex: 3,                                              //[optional]
            child : Container() >
                padding: EdgeInsets.all(30.0),
                color: Colors.cyan,
                child: Text(), > 'String'

14. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Lists of data

    Folder Project > test
        Delete widget_test.dart //MyApp class from this file clashes with the main.dart file
        
    //main.dart
        import 'package:flutter/material.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<String> quotes = []; > 
                'Quote1',
                'Quote2',
                'Quote3',
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > quoteParam
                    //.toList()
                        > -empty-

    //Output: Shows the list of quotes on the screen
    //Tips: children: quotes.map((quoteParam) => Text(quoteParam)).toList(),


15. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Custom Classes Part 1
    Follow the code on 14.
    
    //quote.dart
        class Quote {} > 
            String text;
            String author;            
            Quote () {} >
                () > String text, String author
                {} > 
                    this.text = text;
                    this.author = author;
        //Adding in new quotes
        Quote myquote = Quote('Quote4', 'Quote5');
                
    //main.dart
        import 'package:flutter/material.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<String> quotes = []; > 
                'Quote1',
                'Quote2',
                'Quote3',
                
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > quoteParam
                    //.toList()
                        > -empty-


16. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Custom Classes Part 2
    Follow the code on 15.
    Using named Parameters. Example, Author, title, etc
    
    //quote.dart
        class Quote {} > 
            String text;
            String author;            
            Quote ()  > {this.text, this.author}                                             //see the diff with 15.

        //Adding in new quotes
        //Quote myquote = Quote(text: 'Quote4', author: 'Quote5');        //see the diff with 15. Line not in use for app
                
    //main.dart
        import 'package:flutter/material.dart';
        import 'quote.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteState createState () => _QuoteListState();
            
        class _QuoteState extends State<Quote>{} > 
            List<Quote> quotes = []; > 
                Quote1(author: 'Writer01', text: 'BookTitle01'),
                Quote2(author: 'Writer02', text: 'BookTitle02'),
                Quote3(author: 'Writer03', text: 'BookTitle03')
                
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        (quoteParam) {} >
                            return Text(); > '${quoteParam.text} - ${quoteParam.author}'
                    //.toList()
                        > -empty-
                        
    RestartApp and run


17. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Extracting Widgets - 12 points

    //1. Extract Card widget and put it into stateless widget
        On the right hand side of the screen, open the "FlutterOutline" tab
            Highlight the CardMargin (Inside the tree _QuoteListState>quoteTemplate)
            Right click on it and select "Extract widget"
            Name this "QuoteCard" and click on "Refactor"
    
    
    //quote.dart
        class Quote {} > 
            String text;
            String author;            
            Quote ();  > {this.text, this.author}                              
               
    //main.dart
        import 'package:flutter/material.dart';
        import 'quote.dart';
        void main() => runApp(); > MaterialApp() >
            home: QuoteList(),

        class QuoteList extends StatefulWidget {} > 
            @override
            _QuoteListState createState () => _QuoteListState();
            
        class _QuoteListState extends State<QuoteList>{} > 
            List<Quote> quotes = []; > 
                Quote(author: 'Writer01', text: 'BookTitle01'),
                Quote(author: 'Writer02', text: 'BookTitle02'),
                Quote(author: 'Writer03', text: 'BookTitle03')
            
            /*
            Widget quoteTemplate(quoteParam) {                                      //2. This section will be added after extraction
                return newQuoteCard(quoteParam: quoteParam);                        //8. By default, the content of the bracket is blank and need a constuctor to pass data
            }                                                                       //10. Despite the extraction, the widget is actually redundant. So delete it.
            */
            
            /*
            Widget quoteTemplate(quoteParam) {} > return Card(); >                  //3. This entire section will go to QuoteCard()
                margin: EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 0),
                child: Padding(), >                                                     
                    padding: const EdgeInsets.all(8.0),                     
                    child: Column(), > 
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget> [], >
                            Text(), > 
                                quoteParam.text,
                                style: TextStyle() > 
                                    fontSize: 18.0,
                                    color: Colors.grey[600],
                                SizedBox(), > height: 6.0
                                Text() >
                                    quoteParam.author,
                                    style: TextStyle() > 
                                        fontSize: 14.0,
                                        color: Colors.grey[800]                                         
            */
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >
                        //(quoteParam) => quoteTemplate(quoteParam)                   //11. This will be replaced with the line below
                        (quoteParam) => QuoteCard(quoteParam: quoteParam)
                        
                    //.toList()
                        > -empty-

        //12. /Since the entire class now is external, this can be transferred to another dart file and use 'import' to call.   //12.   Place file in ../lib/quote_card.dart
        //dont forget to copy paste all the imported files commands listed under main.dart into quote_card.dart file
        class QuoteCard extends StatelessWidget {} >                                   //4. The new placement method for the extracted widget
            //const QuoteCard({Key key,}) : super(key: key);                          //5. Not in use. Can be deleted
            
            final Quote quoteParam;                                                   //9. The new constructor
            QuoteCard({this.quoteParam});
            
            @override                                                                 //6. Add override
            Widget build(BuildContext context) {} > return Card(); >                  //7. quoteTemplate(quoteParam) changes to build(BuildContext context)
                margin: EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 0),
                child: Padding(), >                                                     
                    padding: const EdgeInsets.all(8.0),                     
                    child: Column(), > 
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget> [], >
                            Text(), > 
                                quoteParam.text,
                                style: TextStyle() > 
                                    fontSize: 18.0,
                                    color: Colors.grey[600],
                                SizedBox(), > height: 6.0
                                Text() >
                                    quoteParam.author,
                                    style: TextStyle() > 
                                        fontSize: 14.0,
                                        color: Colors.grey[800]


18. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Functions as Parameters - Vid #21 - 7 points

    //quote_card.dart
        class QuoteCard extends StatelessWidget {} >                        
            
            final Quote quoteParam;                                    
            final Function delete;                                             //6. This defines the delete 
            //QuoteCard({this.quoteParam});                         //4. Receiving commmand from main.dart        
            QuoteCard({this.quoteParam, this.delete});         //5. This will be added, but need to define 'delete'
            
            @override                                                                                
            Widget build(BuildContext context) {} > return Card(); >   
                margin: EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 0),
                child: Padding(), >                                                     
                    padding: const EdgeInsets.all(8.0),                     
                    child: Column(), > 
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget> [], >
                            Text(), > 
                                quoteParam.text,
                                style: TextStyle() > 
                                    fontSize: 18.0,
                                    color: Colors.grey[600],
                                SizedBox(), > height: 6.0
                                Text() >
                                    quoteParam.author,
                                    style: TextStyle() > 
                                        fontSize: 14.0,
                                        color: Colors.grey[800]
                                SizedBox(height: 8.0),                                   //1. Delete button for each of the card
                                FlatButton.icon() >
                                    //onPressed: () {},                                       //2a. If the brackets are blank, you can't delete the cards directly from the quote_card file. 
                                    onPressed: delete,                                   //7. The delete function
                                    label: Test('delete quote'),                     //2b. Can only be deleted from main.dart because data does not reside in stateless widget, but in state object
                                    icon: Icon(Icons.delete),                         //2c. The solution is pass the command through "QuoteCard({this.quote});" first to access main.dart
                                
    //main.dart
        class _QuoteListState extends State<QuoteList>{} > 
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],
                appBar: AppBar(), > 
                    title: Text(), > 'Awesome Quotes'
                    centerTitle: true,
                    backgroundColor: Colors.redAccent,
                body: Column() > children: quotes.map().toList(), 
                    //.map() >           
                        //(quoteParam) => QuoteCard(quoteParam: quoteParam)                       //3. Can only be deleted from this line, (quoteParam: quoteParam).
                        -Therefore-
                        (quoteParam) => QuoteCard() >
                            quoteParam: quoteParam,
                            delete: () {}
                                {} > setState(); > () {}
                                    {} > quotes.remove() > quoteParam
                                        
                        
                        
                    //.toList()
                        > -empty-



19. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//World Time App #1 - Vid #22
    //Number of screens: 3 = Home screen, loading screen,  location screen
        Create a new package/folder under the 'lib' folder and name it 'pages'
        Create the individual dart files for the 3 pages (home.dart, loading.dart, choose_location.dart)
        Add the 'import' code for material.dart package to all the pages files
        Create stateful widget for the home.dart
        Use 'SafeArea widget' to make the app avoid covering the system's main header bar (battlife/time/internet connection/wifi level), see point 2
    
    //main.dart
        import 'package:flutter/material.dart';
        import 'package:YourAppFolderName/pages/home.dart';     //1. This will direct to the home.dart file NOTE: 'package:flutter..' not being used here. This has the same functionality.
        void main() => runApp(); >
            MaterialApp() > 
                home: Home(),
    
    //home.dart
        import 'package:flutter/material.dart';
        class Home extends StatefulWidget {} > 
            @override
            _HomeState createState() => _HomeState();
            
        class _HomeState extends State<Home> {} >
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                //body: Text(), > 'Home Screen'                                   //2. Wrap text() with new SafeArea Widget 
                body: SafeArea(), > child: Text() > 'Home Screen'

    //choose_location.dart
        import 'package:flutter/material.dart';
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} >
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                body: Text(), > 'ChooseLoc Screen'             
                
    //loading.dart
        import 'package:flutter/material.dart';
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                body: Text(), > 'Loading Screen'         

20. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//World Time App #2 - Using Dart Mapping method to route - 9 points
    Note that for routing, pages will stack on top of each other and we have to avoid stacking too many of them.

    //main.dart
        import 'package:flutter/material.dart';
        import 'package:YourAppFolderName/pages/home.dart';
        import 'package:YourAppFolderName/pages/Loading.dart';
        import 'package:YourAppFolderName/pages/choose_location.dart';
        
        void main() => runApp(); >
            MaterialApp() > 
                //home: Home(),                                                           //03. So this line should be removed to avoid conflicts with the default base Loading.dart
                //initialRoute: '/home',                                                  //04. This line is for testing purposes but this is how you test the app without the Home()-Loading() conflicts
                routes: {}, >                                                             //04a. Note that for routing, pages will stack on top of each other and we have to avoid stacking too many of them.
                    //  '/contact',                                                       //01. routing to the contact folder where (context) is the current position within the tree you're in
                    '/': (context) => Loading(),                                          //02. this loads the Loading.dart file as the default base but take note that this widget conflicts with 'home: Home() command'
                    '/home': (context) => Home(),
                    '/location': (context) => ChooseLocation(),

    //home.dart
        import 'package:flutter/material.dart';
        class Home extends StatefulWidget {} > 
            @override
            _HomeState createState() => _HomeState();
            
        class _HomeState extends State<Home> {} >
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                //body: SafeArea(), > child: Text() > 'Home Screen'                         //05. To remove this line for the Column()
                body: SafeArea(), > child: Column() > children: <Widget>[], >
                    FlatButton.icon(), > onPressed: () {}, >
                        Navigator.pushNamed(context, '/location');                            //06. pushNamed(context, routeName)                            
                    icon: Icon(Icons.edit_location),
                    label: Text('Edit Location'),

    //choose_location.dart
        import 'package:flutter/material.dart';
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} >
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],                                            //07. Add this line
                appBar: AppBar(), >                                                          //08. appBar function being added here is to add the 'Back' button that leads back to the homepage
                    backgroundColor: Colors.blue[900],
                    title: Text('Choose Location'),
                    centerTitle: true,
                    elevation: 0,                                                             //09. 0 means removing the dropShadow
                body: Text(), > 'Choose Location Screen'    

21. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Widget Lifecycle  - Applicable for getting data from 3rd party API

    State Triggers for Stateful Widgets
        setState() - triggers the build function
        initState() - called only once when the widget is created
        Build()       - builds the widget tree, triggered everytime we use setState()
        Dispose()  - when the widget / state object is removed

    Applying intiState()
        //choose_location.dart
            import 'package:flutter/material.dart';
            class ChooseLocation extends StatefulWidget {} > 
                @override
                _ChooseLocationState createState() => _ChooseLocationState();
                
            class _ChooseLocationState extends State<ChooseLocation> {} >
            
                int counter = 0;
                
                @override
                void initState() {                    
                    super.initState();                                        //"super" means run whatever function being inherit first before running the initState() 
                    print('initState function ran');
                }
                
                @override
                Widget build(BuildContext context) {} >                  
                    return Scaffold(); >
                        backgroundColor: Colors.grey[200],                                     
                        appBar: AppBar(), >                                          
                            backgroundColor: Colors.blue[900],
                            title: Text('Choose Location'),
                            centerTitle: true,
                            elevation: 0,                           
                        body: RaisedButton(), >                             //See console and observe that everytime the button is pressed, it retriggers the build function, adding 1 to the counter
                            onPressed: () {}, >                             //but notice that the initState didn't run again
                                {} > setState(); > () {} >
                                    {} > counter += 1;
                            child: Text('counter is $counter'),


22. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////22
//Asynchronous Code  
    An action that starts now but finishes few seconds later, 
    Example, interacting with API endpoint or database to get data
    Starts the action to call the database and finishes once it gets the required data from 3rd party
    A non-blocking code. it means that while this code is running, the rest of the app runs as per normal
    Similar to Async in Javascript

    //WITHOUT ASYNC///////////////////////////////////////////////////////////////////////////////////22.01
    //choose_location.dart
        import 'package:flutter/material.dart';
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} > 
        
            void getData() {} >
                {} >
                    Future.delayed(); >                   //Simulate delay and network request for a username
                        Duration(), > seconds: 3,      //3 seconds until timeout
                        () {} > 
                            {} > print() > 'Request Simulated 1'
                            
                    Future.delayed(); >                   //Simulate delay and network request for a username
                        Duration(), > seconds: 2,      //2 seconds until timeout
                        () {} > 
                            {} > print() > 'Request Simulated 2'
                            
                    print('Request 3');
            
            @override
            void initState() {} >               
                {} >
                    super.initState();
                    getData();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],                                     
                appBar: AppBar(), >                                          
                    backgroundColor: Colors.blue[900],
                    title: Text('Choose Location'),
                    centerTitle: true,
                    elevation: 0,                           
                body: RaisedButton(), >    
                    onPressed: () {}, >        
                        {} > setState(); > () {} >
                            {} > counter += 1;
                    child: Text('counter is $counter'),
                    
        OUTPUT: 'Request 3' will appear first, followed by 'Request 2', then ends with 'Request 1'
                        This is because Request 2 and Request 1 runs at the same time 
                        If Request 2 depends on the value of Request 1, then the entire code will fail.
                        To solve this, Async function is needed
       
    //WITH ASYNC//////////////////////////////////////////////////////////////////////////////////////////////22.02
    //choose_location.dart
        import 'package:flutter/material.dart';
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} > 
        
            void getData() async {} >                       //aync function is activated
                {} >
                    await Future.delayed(); >              //await means once you done, start next line
                        Duration(), > seconds: 3,  
                        () {} > 
                            {} > print() > 'Request Simulated 1'
                            
                    Future.delayed(); >             
                        Duration(), > seconds: 2,  
                        () {} > 
                            {} > print() > 'Request Simulated 2'
                            
                    print('Request 3');
            
            @override
            void initState() {} >               
                {} >
                    super.initState();
                    getData();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],                                     
                appBar: AppBar(), >                                          
                    backgroundColor: Colors.blue[900],
                    title: Text('Choose Location'),
                    centerTitle: true,
                    elevation: 0,                           
                body: RaisedButton(), >    
                    onPressed: () {}, >        
                        {} > setState(); > () {} >
                            {} > counter += 1;
                    child: Text('counter is $counter'),

        OUTPUT: 'Request 1' will appear first, followed by 'Request 3', then ends with 'Request 2'
    
    //WITH ASYNC BUT HAVING MULTIPLE "await"///////////////////////////////////////////////////////////22.03
    //choose_location.dart
        import 'package:flutter/material.dart';
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} > 
        
            void getData() async {} >              
                {} >
                    String request1 = await Future.delayed(); >     //Wait until Request 1 is added to "request1", then it will continue
                        Duration(), > seconds: 3,  
                        () {} > 
                            {} > return 'Request Simulated 1';
                            
                    String request2 = await Future.delayed(); >             
                        Duration(), > seconds: 2,  
                        () {} > 
                            {} > return 'Request Simulated 2';
                            
                    print($request1 - $request2);                               //Wait until both values in Request1 and Request2 are returned
            
            @override
            void initState() {} >               
                {} >
                    super.initState();
                    getData();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],                                     
                appBar: AppBar(), >                                          
                    backgroundColor: Colors.blue[900],
                    title: Text('Choose Location'),
                    centerTitle: true,
                    elevation: 0,                           
                body: RaisedButton(), >    
                    onPressed: () {}, >        
                        {} > setState(); > () {} >
                            {} > counter += 1;
                    child: Text('counter is $counter'),

        OUTPUT: 'Request 1 - Request 2'                           //This is good when 1 request depends on another


23. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////23
//World Time App #3 - Integrating with World Time API
    worldtimeapi.org/timezones
    Retrieving JSON file

    //loading.dart
        import 'package:flutter/material.dart';
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >
            
            void getTime() async {} >                                                     //1. originally getData()
                {} >
                    //Response response = await get('urlLink');
                    //Map data = jsonDecode(response.body);
                    //print(data);
                    //print(data['title']);
                    
                    Response response = await get('http://worldtimeapi.org/api/timezone/Europe/London');
                    Map data = jsonDecode(response.body);
                    //print(data);                                                         //3. for testing, output: everything inside the JSON file
                    
                    //getting properties from JSON data (datetime & utc_offset)
                    String datetime = data['datetime'];
                    String offset = data['utc_offset'].substring(1,3);                     //7.  *.substring(1,3) means removing the "+" sign and ":00" in "+01:00" 
                    //print(datetime);                                                     //4. for testing, output: the current time and date (17:48)
                    //print(offset);                                                       //5. for testing, output: the +01:00 or whatever
                    
                    //create DateTime object and calculating time
                    DateTime now = DateTime.parse(datetime);
                    //print(now);                                                         //6. for testing, output: calculated date and time which is now an object
                    now = now.add(); > Duration() > hours: int.parse() > offset           //8. int.parse means converting .substring value which is a string, into an integer
                    //print(now);                                                         //9. Output: The actual time
            
            @override
            void initState() {} >
                {} >
                    super.intiState();
                    getTime();                                                            //2. originally getData();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                body: Text(), > 'Loading Screen'      


24. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////24
//World Time App #4     - 19 points
    //Make getTime() more reusable by migrating to its own files
    
    //../lib/services/world_time.dart
        import 'package:http/http.dart';
        import 'dart:convert';
        
        class WorldTime {} > 
            String location;                                                                    //01. location name for UI to pass to constructor
            String time;                                                                        //02. the time in that location. Will take in point 06. 
            String flag;                                                                        //03. url to an asset flag icon
            String url;                                                                         //04. location url for API endpoint: Splitting the url into 2 components "http://worldtimeapi.org/api/timezone" and "/Europe/London"
            
            WorldTime(); > {this.location, this.flag, this.url}                                 //08. This will make WorldTime() receive all the values in location, flag and url
            
            //void getTime() async {} >                                                         //15. Adding Future <void>, a temporary placeholder memory value until everything completes
            Future <void> getTime() async {} > 
                {} >
                    Response response = await get('http://worldtimeapi.org/api/timezone/$url');     //05. the split url takes 'url' variable
                    Map data = jsonDecode(response.body);
                      
                    //getting properties from JSON data (datetime & utc_offset)
                    String datetime = data['datetime'];
                    String offset = data['utc_offset'].substring(1,3);                       
                     
                    //create DateTime object and calculating time
                    DateTime now = DateTime.parse(datetime);                                      //06. Since this is in "datetime", we need to convert it into String and pass it to "time" variable (02)                     
                    now = now.add(); > Duration() > hours: int.parse() > offset                                          
                    
                    //set the time property
                    time = now.toString();                                                        //07. This converts the datetime into string as mentioned in point 06.               

        //WorldTime instance = WorldTime(); >                                                     //09. Inputting the value into the '$url'. //10. Cut and paste this entire section to 11. 
        //    location: 'Berlin',
        //    flag: 'germany.png',
        //    url: 'Europe/Berlin'
        //instance.getTime()                                                                      //10. when this line runs, it executes the world_time.dart getTime()
        
    //loading.dart
        import 'package:flutter/material.dart';
        import 'package:projectName/services/world_time.dart';
        
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >      
            
            String time = 'loading';                                                               //17. Once at this point, you're able to print out claculated time in console. Now to show it in display.
            
            //void setupWorldTime() {} >                                                           //11. Copied from 09.
            void setupWorldTime() async {}                                                         //16. Since 'await' has been added, 'async' must be added to the function
                {} >
                    WorldTime instance = WorldTime(); >    
                        location: 'Berlin',
                        flag: 'germany.png',
                        url: 'Europe/Berlin'
                    await instance.getTime();                                                     //12. This calls getTime from world_time.dart.
                    print(instance.time);                                         //14a. This wont print the time yet as it is async. 
                                                                                  //14b. To solve this, add 'await' in point 12. and "Future<void>" in world_time.dart (see 15.)
                    setState(); > () {} >                                                         //19. This upadates the time property
                        {} >
                            time = instance.time;
                            
            @override
            void initState() {} >
                {} >
                    super.intiState();
                    //getTime();                                                                   //13. Change getTime() to setupWorldTimeTime()
                    setupWorldTime();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                //body: Text(), > 'Loading Screen'                                                 //18. To outport the calculated time to screen
                body: Padding(), > 
                    padding: EdgeInsets.all(50.0),
                    child: Text(time),

25. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////25
//Error Handling
    //Try & Catch Structure
        #Problem Structure
            class Class () {} > String theProblemVariable;
            void variable1 () { "BlaBlaBla" }
            void variable2 () { "AllTheProblemCodesHere" }
        #Error Handling Structure
            void variable1 () { "BlaBlaBla" }
            void variable2 () {} >
                try{} > "AllTheProblemCodesHere"
                catch (e) {} > 
                    print ( 'Error: $e' );
                    theProblemVariable = 'Your theProblemVariable has errors';
        //Now when there is a problem, it will print out 'Your theProblemVariable has errors' onto the app and Error message into the console

26. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////26
//World Time App #5 - Passing Route Data
    //Output the time into Home Screen

    //../lib/pages/loading.dart
        import 'package:flutter/material.dart';
        import 'package:projectName/services/world_time.dart';
        
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >      
            
            //String time = 'loading';                                                      //03. Remove                               
            
            //void setupWorldTime() {} >                                                                                      
            void setupWorldTime() async {}                                                                             
                {} >
                    WorldTime instance = WorldTime(); >    
                        location: 'Berlin',
                        flag: 'germany.png',
                        url: 'Europe/Berlin'
                    await instance.getTime();                                                                              
                    //print(instance.time);                                              //02. Remove
                    //setState(); > () {} >                                              //01. Remove setState
                    //    {} >
                    //        time = instance.time;
                    //Navigator.pushNamed(context, '/home');                             //05. This is for redirection to home (push home screen over the loading screen). So use 06. instead.
                    //Navigator.pushReplacementNamed(context, '/home');                  //06. This replaces the entire loading screen with home screen. But this cannot output the data since the data is not in home.dart
                    Navigator.pushReplacementNamed(context, '/home', arguments: {} );    //07. By adding 'arguments: {} ' we  can  pass values/properties into home.dart to be shown in home screen
                        arguments{} >                                                    //08. 3 properties being rerouted into home.dart (location, flag and time) from world_time.dart
                            'location': instance.location,
                            'flag' : instance.flag,
                            'time': instance.time,
                        
            @override
            void initState() {} >
                {} >
                    super.intiState();
                    setupWorldTime();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                body: Padding(), > 
                    padding: EdgeInsets.all(50.0),
                    //child: Text(time),                                                  //04. Replace 'time' with 'loading'
                    child: Text('loading'), 

    //../lib/pages/home.dart
        import 'package:flutter/material.dart';
        class Home extends StatefulWidget {} > 
            @override
            _HomeState createState() => _HomeState();
            
        class _HomeState extends State<Home> {} >
        
            Map data {};                                                                  //09. This creates a map for the received properties from 08. whenever home screen starts
        
            @override
            Widget build(BuildContext context) {} > 
                //ModalRoute.of(context).settings.arguments;                              //10. This line receives the argument from 07. Note the "arguments:" in line 07.
                data = ModalRoute.of(context).settings.arguments;                         //11. By adding "data =", it overides and maps out the received data into line 09. (Map data)
                //print(data);                                                            //12. To test, run this line and it will print out the data in the console
                return Scaffold(); >
                    body: SafeArea(), > child: Column() > children: <Widget>[], >
                        FlatButton.icon(), > 
                            onPressed: () {}, >
                                Navigator.pushNamed(context, '/location');                           
                            icon: Icon(Icons.edit_location),
                            label: Text('Edit Location'),


27. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////27
//World Time App #6 - Formatting and Showing Dates, Intl.dart package - 8 points

    //Using package from flutter (https://pub.dev/packages/intl#-readme-tab-)
        Provides internationalization and localization facilities, 
        including message translation, plurals and genders, date/number formatting and parsing and bidirectional text.
        Installing
            Adding to pubspec.yaml >
                dependencies: 
                        intl: ^0.15.8
            Save and exit. Update dependencies.

    //../lib/services/world_time.dart
        import 'package:http/http.dart';
        import 'dart:convert';
        import 'package:intl/intl.dart';                                 //01. Add this line after installing intl.dart
        
        class WorldTime {} > 
            String location;      
            String time;                               
            String flag;                                   
            String url;                             
            
            WorldTime(); > {this.location, this.flag, this.url}             
            
            //void getTime() async {} >                            
            Future <void> getTime() async {} > 
                {} >
                    Response response = await get('http://worldtimeapi.org/api/timezone/$url');  
                    Map data = jsonDecode(response.body);
                      
                    //getting properties from JSON data (datetime & utc_offset)
                    String datetime = data['datetime'];
                    String offset = data['utc_offset'].substring(1,3);                       
                     
                    //create DateTime object and calculating time
                    DateTime now = DateTime.parse(datetime);                                        
                    now = now.add(); > Duration() > hours: int.parse() > offset                                          
                    
                    //set the time property
                    //time = now.toString();                              //02. Remove and add the line below                       
                    time = DateFormat.jm().format(now);                   //03. This will reformat the date and time to AM/PM format
                  
    //../lib/pages/home.dart
        import 'package:flutter/material.dart';
        class Home extends StatefulWidget {} > 
            @override
            _HomeState createState() => _HomeState();
            
        class _HomeState extends State<Home> {} >
        
            Map data {};   
        
            @override
            Widget build(BuildContext context) {} >                 
                data = ModalRoute.of(context).settings.arguments;       
                return Scaffold(); >
                    body: SafeArea(), > child: Padding(), >                  //05. Add Padding
                        padding: const EdgeInsets.fromLTRB(0, 120.0, 0, 0),  //06. Change EdgeInsets.all() to EdgeInsets.fromLTRB()
                        child: Column(), > children: <Widget>[], >
                            FlatButton.icon(), > 
                                onPressed: () {}, >
                                    Navigator.pushNamed(context, '/location');                           
                                icon: Icon(Icons.edit_location),
                                label: Text('Edit Location'),
                            SizedBox (), >                                   //04. Add SizedBox() and Row()
                                height: 20.0,
                            Row(), > 
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget> [], > Text(), > 
                                    data['location'],
                                    style: TextStyle() >
                                        fontSize: 28.0,
                                        letterSpacing: 2.0
                            SizedBox (), > height: 20.0                        //07. Add another SizedBox()
                            Text(), >                                          //08. Add this line for the time variable and enlarge the font size
                                data['time'],
                                style: TextStyle(), > fontSize: 66.0,


28. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////28
//World Time App #7 - Loading Screen
    //https://pub.dev/packages/flutter_spinkit
    //pubspec.yaml    
        dependencies: 
            flutter_spinkit: ^4.0.0
    //Structure
        SpinKitRotatingCircle(); >      //RotatingCircle | Wave | Circle | Pulse | CubeGrid
            color: Colors.white,
            size: 50.0,

    //../lib/pages/loading.dart
        import 'package:flutter/material.dart';
        import 'package:projectName/services/world_time.dart';
        import 'package:flutter_spinkit/flutter_spinkit.dart';                        //01. Add this line 
        
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >      

            void setupWorldTime() async {}                                                                             
                {} >
                    WorldTime instance = WorldTime(); >    
                        location: 'Berlin',
                        flag: 'germany.png',
                        url: 'Europe/Berlin'
                    await instance.getTime(); 
                    Navigator.pushReplacementNamed(context, '/home', arguments: {} );   //06. Remove The entire paragraph to preview the spinner
                        arguments{} >                        
                            'location': instance.location,
                            'flag' : instance.flag,
                            'time': instance.time,
                        
            @override
            void initState() {} >
                {} >
                    super.intiState();
                    setupWorldTime();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                //body: Padding(), >                                                    //02. Remove this line
                //    padding: EdgeInsets.all(50.0),
                //    child: Text('loading'), 
                backgroundColor: Colors.blue[900],                                     //05. Add background color since the Spinner is white 
                body: Center(), >                                                      //03. Add this line.
                    child: SpinKitRotatingCircle(), >                                 //04. When a widget is under a child, it doesn't need semicolon
                        color: Colors.white,
                        size: 50.0,
    


29. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////29
//World Time App #8 - Ternary Operators - Change background to Day/Night according to time , 
    //16 Points    
    //Add day and night background image into 'assets' folder
        Project Name > assets > day.png & night.png
        In pubspec.yaml file, activate the assets section (do not forget that the left margin plays a role)
            assets:
                - assets/
    
    //////////////////////////////////////////
    //../lib/services/world_time.dart
        import 'package:http/http.dart';
        import 'dart:convert';
        import 'package:intl/intl.dart';  
        
        class WorldTime {} > 
            String location;      
            String time;                               
            String flag;                                   
            String url;                             
            bool isDaytime;                                                                //01.True or False if daytime or not
            
            WorldTime(); > {this.location, this.flag, this.url}             
            
            Future <void> getTime() async {} > 
                {} >
                    Response response = await get('http://worldtimeapi.org/api/timezone/$url');  
                    Map data = jsonDecode(response.body);
                      
                    //getting properties from JSON data (datetime & utc_offset)
                    String datetime = data['datetime'];
                    String offset = data['utc_offset'].substring(1,3);                       
                     
                    //create DateTime object and calculating time
                    DateTime now = DateTime.parse(datetime);                                        
                    now = now.add(); > Duration() > hours: int.parse() > offset                                          
                    
                    //set the time property      
                    //isDaytime = condition ? true : false;                                   //02. Ternary operator structure
                    isDaytime = now.hour > 6 && now.hour < 20 ? true : false;
                    time = DateFormat.jm().format(now);                      
    
    
    ////////////////////////////////////////////
    //../lib/pages/loading.dart
        import 'package:flutter/material.dart';
        import 'package:projectName/services/world_time.dart';
        import 'package:flutter_spinkit/flutter_spinkit.dart';      
        
        class Loading extends StatefulWidget {} > 
            @override
            _LoadingState createState() => _LoadingState();
            
        class _LoadingState extends State<Loading> {} >      

            void setupWorldTime() async {}                                                                             
                {} >
                    WorldTime instance = WorldTime(); >    
                        location: 'Berlin',
                        flag: 'germany.png',
                        url: 'Europe/Berlin'
                    await instance.getTime(); 
                    Navigator.pushReplacementNamed(context, '/home', arguments: {} ); 
                        arguments{} >                        
                            'location': instance.location,
                            'flag' : instance.flag,
                            'time': instance.time,
                            'isDaytime': instance.isDaytime,                                //03. Add this line to pass variable into home.dart > ModalRoute argument
                        
            @override
            void initState() {} >
                {} >
                    super.intiState();
                    setupWorldTime();
            
            @override
            Widget build(BuildContext context) {} > return Scaffold(); >                
                backgroundColor: Colors.blue[900],          
                body: Center(), >                             
                    child: SpinKitRotatingCircle(), >       
                        color: Colors.white,
                        size: 50.0,

    //////////////////////////////////////////////////////////
    //../lib/pages/home.dart
    import 'package:flutter/material.dart';
    class Home extends StatefulWidget {} > 
        @override
        _HomeState createState() => _HomeState();
        
    class _HomeState extends State<Home> {} >
    
        Map data {};   
    
        @override
        Widget build(BuildContext context) {} >                 
            data = ModalRoute.of(context).settings.arguments;       
            //print(data);                                                                //04. To test whether the variable will return true or false               
            
            //set background
            String bgImage = data['isDaytime'] ? 'day.png' : 'night.png';           //05. Using ternary operator to toggle between day or night
            Color bgColor = data['isDaytime'] ? Colors.blue : Colors.indigo[700];   //10a. Since the default color of the system bar (the top bar that contains battery life) is greyish
            //                                                                      //10b. this line toggles the color blue for daytime and indigo for night time
            
            return Scaffold(); >
                backgroundColor: bgColor,                                                    //11. This line runs line 10.
                body: SafeArea(), > child: Container() >                                     //06. Add container and background image
                    decoration: BoxDecoration(), > image: DecorationImage() > 
                        //image: AssetImage(), > 'assets/night.png'                          //07. Add the image but this has no automatic control over the day and night images
                        image: AssetImage(), > 'assets/$bgImage'                              //08. So the variable $bgImage being inserted here - see 'set background section' 05.
                        fit: BoxFit.cover,                                                    //09. Fits the entire image into the background
                    child: Padding(), >                                 
                        padding: const EdgeInsets.fromLTRB(0, 120.0, 0, 0),  
                        child: Column(), > children: <Widget>[], >
                            FlatButton.icon(), > 
                                onPressed: () {}, >
                                    Navigator.pushNamed(context, '/location');                           
                                icon: Icon(), > 
                                    Icons.edit_location,
                                    color: Colors.grey[300],                                 //12. This line changes the location icon from black to grey
                                label: Text(), > 
                                    'Edit Location', 
                                    style: TextStyle(),                                      //13. You cannot add color properties directly inside Text(), so style will be in place
                                        color: Colors.grey[300],                             //14. This changes the text colors from black to grey
                            SizedBox (), >                                       
                                height: 20.0,
                            Row(), > 
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: <Widget> [], > Text(), > 
                                    data['location'],
                                    style: TextStyle() >
                                        fontSize: 28.0,
                                        letterSpacing: 2.0
                                        color: Colors.white,                                    //15. Change text (Location) color to white
                            SizedBox (), > height: 20.0                            
                            Text(), >                                                          
                                data['time'],
                                style: TextStyle(), > fontSize: 66.0,
                                color: Colors.white,                                           //16. Change text (Time) color to white

30. //////////////////////////////////////////////////////////////////////////////////////////////////////////////////29
//World Time App #9 - List View Builder 
    //choose_location.dart
    //Creating a list of locations
    
    //../lib/pages/choose_location.dart
        import 'package:flutter/material.dart';
        import 'package:world_time/services/world_time.dart'        
        
        class ChooseLocation extends StatefulWidget {} > 
            @override
            _ChooseLocationState createState() => _ChooseLocationState();
            
        class _ChooseLocationState extends State<ChooseLocation> {} >        
            
            List <WorldTime> locations = []; >                                                  //01. Add the entire list
                WorldTime(url: 'Europe/London', location: 'London', flag: 'uk.png'),
                WorldTime(url: 'Europe/Berlin', location: 'Athens', flag: 'greece.png'),
                WorldTime(url: 'Africa/Cairo', location: 'Cairo', flag: 'egypt.png'),
                WorldTime(url: 'Africa/Nairobi', location: 'Nairobi', flag: 'kenya.png'),
                WorldTime(url: 'Asia/Jakarta', location: 'Jakarta', flag: 'Indonesia.png'),
                WorldTime(url: 'Asia/Singapore', location: 'Singapore', flag: 'Singapore.png'),

            @override
            Widget build(BuildContext context) {} > return Scaffold(); >
                backgroundColor: Colors.grey[200],                                     
                appBar: AppBar(), >                                          
                    backgroundColor: Colors.blue[900],
                    title: Text('Choose Location'),
                    centerTitle: true,
                    elevation: 0,        
                body: ListView.builder(), >                                                       //02. Add listview
                    itemCount: locations.length,                                                  //03. Count the number of items inside the list
                    itemBuilder: (context, index) {} >                                            //04. This builds every single item inside the list and return a widget tree
                        return Padding();                                                         //07. Add Padding
                            padding: const EdgeInsets.symmetric(vertical: 1.0, horizontal: 4.0),
                            child: Card(), > child: ListTile(), > 
                                onTap: () {}, >                                                    //05. onTap() is similar to onPressed()
                                    //print(locations[index.location]);                            //08. For testing and prints out location in the console
                                    
                                title: Text(), > locations[index].location
                                leading: CircleAvatar(),
                                    backgroundImage: AssetImage('assets/${locations[index].flag}'),      //06. Curly braces ${} being used here because the flag variable is inside [] notation



















