//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Labview
http://www.halvorsen.blog/documents/programming/labview/labview.php
https://www.usn.no/english/about/contact-us/employees/hans-petter-halvorsen
https://www.rose-hulman.edu/academics/faculty/doering-edward-doering.html
https://www.halvorsen.blog/documents/programming/python/python.php
    Transfer Function with Python - https://www.youtube.com/watch?v=9XgvL05KPE4
    Python Control Library: pip install control
        https://docs.scipy.org/doc/scipy/reference/signal.html
    Python SciPy: SciPy.signal (Included in Anaconda Distribution)
        Control Systems Library: https://pypi.org/project/control
        Documentation: https://python-control.readthedocs.io
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Introduction
02. While Loops
03. Plotting
04. SubVIs
05. Case Structures
06. Formula Node
07. Arrays
08. Clusters
09. Property Nodes
10. Project Explorer
11. Debugging
12. Labview and USB6008
13. Labview and OPC UA
14. Labview and Python
15. Labview Mathscript
16. Labview and Siemens TIA Portal
17. Labview and Arduino
18. Labview and LINX Toolkit (Arduino/RPi/Beaglebone)
19. CompactRio/myRIO FPGA Application
20. State Machine Principles

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Introduction

    Starting
        Splash screen > File > New VI
        2 split screen Windows will open (Front panel + Block Diagram)

    Right Click on Front Panel
        Controls Selection Panel:
            Silver > Numeric, Boolean, String&Path, Arrays/Matrix, List/Tables, Graph, Ring&Enum, Decor, IO
            Modern, System, Classic, Express, Control/Simulation, .NET/ActiveX,
            SignalProcessing, Addons, UserControls,
            DSCModule, Vision

    Select Numeric Control and Paste in Front Panel
        Right Click > Numeric > Numeric
        A diagram will appear in Bloack Diagram Panel

    Right Click on Block Diagram    
        Functions Selection Panel:
            Programming > Structures, Array, Cluster, Numeric, Boolean, String, Comparison, Timing, Dialog, FileIO, Waveform, Apps, Sync, Graphics, Report
            Control/Sim, MeasurementIO, DataComms, Maths, Instruments, Vision/Motion, 
            SignalProcessing, Connectivity, Express, Addons, Favorites, UserLibs,
            DESCModules, FPGAInterface, RealTime, SQL
         Show I/O meaning of the nodes
            Select node and CTRL+H

    Run the program
        Front Panel > Main Toolbar > Click on 'Run' (Arrow Icon)

    Program (without loops):
        Add in 2 Numerical Control display in Front Panel
        Add in 'Addition Operator' in Blcok Diagram Panel
            Reight Click in Block Diagram > Mathematics > Numeric > Add
        Add in Numeric Indicator in Block Front Panel
        Link everything up in BD Panel
        Click on Run in Front Panel
        Input numbers in Front Panel
        Click on Run in Block Diagram
        Calculated value will appear in Indicator
        NOTE: 
            Whenever the input changes, clicking on the Run button again is required
            Therefore, While loop needed to solve the problem
        
    Toggling between Panels
        CTRL+E

    Program (with loops):
        Cont'd
        Add while Loop
            In BD panel > Right Click > Programming > Structures > While Loop
            Draw 'While Loop' around the diagram
        Add Button to stop the program
            In Front Panel > Right Click > Silver > Boolean > Stop Button
        In Block Diagram, link Stop Button Block to the While Loop condition
        In Front Panel, Click on Run button
            Change the input parameter and the calculated value will appear in the indicator automatically
        NOTE:
            While loops are computer processing intensive since it's updating continuously
            To solve, add Timer function into the While Loop box in BD Panel
        Add Timer    
            In BD panel > Right Click > Programming > Timing > Wait(ms)
            Right Click on Input > Create > Constant
            Add "100" ms to the timer (This will update the while loop every 100 ms)

    Plotting Graph:
        Cont'd
        Add Waveform Chart
            Front Panel > Silver > Graph > Waveform Chart
            Block Diagram:
                Move Waveform Chart block into the while loop box
                Link Waveform Chart with the Add function's output
        Run and change the input parameters in Front Panel
        Notice that the Chart will plot continuously plotting the answers as the imput parameters changes


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. While Loops

    Types of Loops and Structures
        While Loops (Solid line border)
        For Loops (Pages border)
        If-Else (Case Structure) - (Border with pattern)
            Nodes can be linked to the border 
            The border nodes can be connected to another area
        Sequence Structure (Film border)

    While Loop Example
        Voltage input (0-5V) from DAQ
        Converts voltage signal (Multiply by 4) to output water level height in tank
        Therefore, 25V = 100cm
        Front Panel
            Voltage
            Tank Level
            Stop while loop button
        Block Diagram   
            Voltage nodes
            multiplication node
            Tank level in cm node
            Timer node (ms)
            Stopbutton
            
        **Similar to Topic 1**
        NOTE: Just change the max Voltage input property to 25 and max output water level to 100

        Adding Numeric indicator to While Loop's Loop Iteration
            In front panel, 
                Right click > Silver > Numeric > Numeric Indicator
            In Block Diagram
                Link Numeric Indicator node to the While Loop's "i" box 
            This will show how many iterations the While Loop ran
            The Numeric indicator node can also be linked to a mathematics operator node for calculation

        While Loop border
            Connections inside the while loop can also be extended outside the while loop border
            Extend the output of the mathematics operator to the border
            A square connection node will appear (Loop Tunnel)
            An external node can be connected to the border node (Loop Tunnel)
            Add in Numeric Control block (This wont show any value when the loop is running, will show the value when the loop is stopped)
            
        Loop Tunnel
            Types of Tunnel Mode
                Last value
                Indexing
                Concatenate
            2 Ways to add external nodes
                - Normal Right click on panel and add
                - Select the Loop Tunnel > Right Click > Create >
                    Constant
                    Control
                    Indicator
            Indexing + Indicator = Array Indicator
            Array indicator
                In Front Panel, the indicator can be extended when dragged down to open up more arrays of indicators
            
        Shift Register
            Click on the While loop border and click on "Add shift register"
            Two arrow icons will appear on both sides of the border
            Arrow up icon - Output value
            Arrow down icon - Previous value
            Example
                Add in "Add Operator node" in between the the tank and multiplication node
                Link Arrow down shift reg to Add operator node
                Link Multiplication node output to Add operator node
                Extend Multiplication node output to Arrow up shift register
                Link Add operator node output to tank level indicator


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Plotting
    
    Example
        Simulate the temperature in Air Heater system. 
        The temperature in the air heater should be between 20 and 50 degree Celsius
        Use Random Generator for this Example
    Front Panel
        Waveform chart
        Low temp limit
        Upper temp limit
        Thermometer
        Stop
    Block Diagram Panel (While loop)
        Random number (0-1)
        Upper Temp Limit (UTL)
        Lower Temp Limit (LTL)
        Subtract Node (UTL - LTL)
        Multiply Node (Rand * Substract)
        Addition Node(Multiply + LTL)
        Waveform Chart (Add)
        Thermometer (Add)
        Timer (Wait - ms) - 1000ms
        Stop Button

    Features of Waveform Chart
        Renaming
            Double Click on Vertical/Horizontal axis title
            Title "Plot 0" can be changed by double clicking
        Plotting timing syncing
            The plotting of graph is totally different from the while loop timing
            To readjust plot sampling time to sync with the block diagram time, readjust the multiplier
            Right click > Scales Tab > Scaling factors > Multiplier       
            Example: 
                While loop wait time (ms): 2000ms
                Therefore, Plot multiplier: 2
        Right Click on title bar' title
            Visible Items
                Index Display
                Vertical Scrollbar
                Plot visibility checkbox
            Properties
        Right Click on title bar's icon
            Plot Visible
            Common Plots (Commonly used types of graph)
            Graph's line styling
                Color (Color of graph), Line Style (Style of graph), Line Width (Line thickness), Anti Aliased
            Graph Type Selection
                Bar Plots, Fill Base Line, Point Style, X/Y Scale
        NOTE: X=Horizontal, Y=Vertical
        Clear Chart
            Right Click > Data operation > Clear chart
        Historical Logs
            Block Diagram Panel > Right Click on Waveform Chart Node > Create > Property Node > History Data
                Place the node outside while loop border
                Right Click on History Node and select "Change All to write"
                Right Click on Input > Create > Constant = 0
                Link the History Data Node output to the While Loop border
            This will enables you to store data

    Sampling rate Timer
        Front Panel
            Numeric Control
        Block Diagram
            Numeric Control Node (Placed outside while loop) - Linked to while loop border
            Multiplier (While loop border, Constant), where the constant is 1000 since Timer is in ms and Numeric Control is in sec
            Timer - Wait (ms)
        Note: 
            Remember to change the waveform chart's multiplier for every changes made
            In order to automate the process, use the Historical Log Node
        Block Diagram
            Right Click on Waveform Chart Node > Create > Property Node > History Data
            Place the node outside while loop border
            Right Click on History Node and select "Change All to write"
            Right Click on Input > Create > Constant = 0
            Link the History Data Node output to the While Loop border
            Drag down the box to extend the array ("History")
            Right Click > Select Property > X Scale > Offset and Multiplier > Multiplier
            Link the multiplier's input to the Sampling rate timer node's  output

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. SubVIs

    SubVIs are the same as a function or a method used in other langugaes
    Hundreds or thousands of SubVIs are included with Labview
    SubVIs can be customized and created to your own needs
    SubVIs can be reused in other programs that uses the same operation
    Can also be used repeatedly in the same program
    Maintaining and debugging programs with SubVIs are much easier
    SubVI icons are located at the top right hand corner of Front Panel and Block Diagram Panel
    SubVIs can also appear in the form of nodes in Block Diagram Panel and be linked to other nodes


    Create Celsius to Fahrenheit converter SubVI
        Equation: T(F) = 9/5 T(C) + 32    
        Front Panel
            Add Numeric Control
            Add Numeric Indicator
        Block Diagram Panel
            Numeric Control Node
            Add Division node (Constants [9, 5])
            Add Multiply node (NumericControl, Division)
            Add Addition node (Multiply, Constant[32])
            Numeric Indicator Node (Addition)

    Converting the program into SubVI
        In front panel, at the top right hand corner, right click on the grid icon
        Select 'pattern' and choose the one with one single vertical line in the center of square
        This represents one input and one output
        The left side of the square means input. 
        The right side of the square means output
        Left click on the left side of the SubVI square and then click the numeric control to link the 2 entities
        Left click on the right side of the SubVI square and then click the numeric indicator to link the 2 entities
        Both the section of the square should turn out green which means they are connected
        Next to the pattern selection, double click on the icon image to open the property window
        This enables you to change the icon image, texts, titles or any other SubVI properties
        NOTE: In Icon Text Tab, note that the image on the right is actually a paintbrush. Cropping, drawing, adding texts can be done here
        Once complete, the new image will appear as the new icon
        Save as ConvertToFahr.vi

    Using the new SubVI
        Create a new VI
        Front Panel
            Add Vertical Fill Slide (Name this Celsius)
            Add Dial Gauge (From Numeric silver) - Name this Fahrenheit
        Block Diagram
            Right click > Select VI > Browse through the folder where ConvertToFahr.vi was stored
            Link the SubVI input to Control and SubVI output to indicator
        Double click on the SubVI to open its own front panel, CTRL+E to open the block diagram
        NOTE:
            Add while loop to the main block diagram, NOT the SubVI's block diagram
            The SubVI can also be duplicated as many times as you like according to the application
            But in order to reuse the subvi, make sure to change the memory to preallocated memory
            In SubVI Front Panel > Right Click on SubVI icon > VI Properties > Category: Execution > Reentrancy Section >
                1. Non-reentrant execution - Only one of the duplicated node can run and shares data across all duplicated nodes
                2. Shared clone reentrant execution - Sharing the memory between the duplicated SubVIs (Output will be first come first serve)
                3. Preallocated clone reentrant execution - All duplicated nodes are different from each other
            Usually select number 3 for duplicated nodes of different entity


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. Case Structures

    Case Structures work like If..Else statements
    The box can be set as True/False
    Case structures are good for generating Error messages or multiple program selection
    
    Simple Case Structure (True/False) - Two cases
        Add Case Structure
            Right click in Block Diagram Panel > Programming > Structures > Case Structure
            Set as False
            On left hand side of the border, there is a connector that can be connected to external nodes
                Right click > Create Constant 
                The constant can be toggled between True/False
                Set as False
        Add Dialog    
            Right Click > Programming > Dialog Interface > One Btn Dialog
            Place this in the Case Structure box
            Dialog node Input:
                Right click > Create > Constant
                Add in "This is False"
        Change Case Structure box to True
            Add in another dialog node and set constant as "This is True"
        Optional:
            Add while loop to surround the Case structure
            Add stop button to stop while loop
            Add Wait timer and set constant to 5000ms (5sec)
        Run Program
        Explanation
            When the Input constant is True, "This is True" will pop up
            When the Input constant is False, "This is False" will pop up
        You can also add in a latching button in place of the input constant
            If button is pressed, then true. If button is off, then false
            
        Instead of using a latching button or constants to control the case structure, use numeric control instead
            Set this numeric contol data type to integer 
            Right click on node > Representation > I32
            Note that the case structure now can be toggled between 0 and 1 instead of True and False
            This can also be used for multiple case structures
            
    Case Structure with multiple cases
        Use Numeric control to toggle between multiple case structures
        Continued from the Simple Case structure above, right click on the case structure border
            Add "Case After" or "Case Before" 
        NOTE: 
            If the value of the Numeric Control doesn't cover the available case structure (ie 0,1,2), Case Structure will revert to its default (0)
            To set other pages as the default, change to the target page, right click and select "Make this the default case"
        You can also use an Enumerator to control the case structure via string instead of using the Numeric Control
            Right Click in Front Panel > Silver > Ring&Enum > Enum
            Enter a text in the input box
            To add another input, Right click > Add Item After > Add another text
            Create multiple options
            When clicked, a dropdown menu list will appear
            In Block diagram, replace numerical control with the enumerator
            Notice that in the case structure box, the name changes from integers to texts based on the enumerator
            
    Looping cases
        Create Case structure
        Create while loop around the case structure
        Add Shift register  for while loop border
            Link to the Case structure control node [?]
        Add string constant and link to while loop's shift register
            Right click > Programming > String > String constant
            Name this to 'start'
        Add stop button for while loop
        Add Wait timer for while loop and set constant to 2 sec
        Case 'Start' (Set as the default)
            Add dialog box and add constant as 'Start'
            Add String constant and name this to 'Next'
            Link string constant to right side of case structure border
            Link case structure border to right side of shift register
        Case 'Next'
            Add dialog box and add constant as 'Next'
            Add String constant and name this to 'Start'
            Link string constant to right side of case structure border
            Link case structure border to right side of shift register
        Run program
            This will toggle between start and next whenever the button is pressed

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Formula Node
    
    Use C language in Labview
    Useful for mathematical expressions and simulations in implementing discrete equations
    Refer to Topic 4 for Celsius to Fahrenheit converter
    For Formula node, the formula can just be input as Formula Node

    Simple VI using formula node
        Equation: Tf = (9/5)Tc + 32    
        Front Panel
            Numeric Control (Rename as "Tc")
            Numeric Indicator (Rename as "Tf")
        Block Diagram Panel
            Formula node
                Right click > Structures > Formula Node
                Right click on left border > Add input
                    Type the name "Tc"
                Right click on right border > Add output
                    Type the name "Tf"
            Link up Numeric Control (Tc) to Tc connector
            Link up Numeric Indicator (Tf) to Tf connector
            Add formula into Formula Node
                Tf = (Tc*9)/5 + 32;
        Run program from the Front Panel
            0C = 32F
            25C = 77F

    Simple VIs using Advanced formula node
        Equation: f(x) = [(ln(ax^2+bx+c)) - (sin(ax^2 +bx +c))] / ((4*3.142*x^2) + cos(x-2)(ax^2+bx+c))
        Given, 
            a = 1
            b = 3,
            c = 5
        Find f(9) //Answer should be 0.0044

        Front Panel
            Numerical Controls (a, b, c, x)
            Numerical Indicator (f)
        Block Diagram
            Add Formula Node
                Formula: 
                    f = (ln(a*x*x + b*x + c) - sin(a*x*x + b*x + c)) / (4*pi*x*x + cos(x-2) * (a*x*x + b*x + c));
            All Numerical controls (a, b, c, x) linked to Formula Node left border
            Numerical Indicator (f) linked to right border

    Alternative Solution
        Front Panel
            Numerical Controls (a, b, c, x)
            Numerical Indicator (f)
        Block Diagram
            Add Formula Node
                Formula: 
                    g = a*x*x + b*x +c;
                    f = (ln(g) - sin(g)) / (4*pi*x*x + cos(x-2) * (g));
            All Numerical controls (a, b, c, x) linked to Formula Node left border
            Numerical Indicator (f) linked to right border

    LabView MathScript Node and LabView MATLAB Node
        They use MATLAB Syntax
        More powerful features regarding Arrays, Vectors and Matrices
        MathScript:
            Refer to Topic 15 for more details        
            Need to have LabView MathScript RT Module Installed
            An add-on to LabView and it includes a lighter version of MATLAB
        MATLAB Script Node:
            Need to have MATLAB Installed to your computer
            Works only with Windows

    Simple VIs using MathScript Node
        Block Diagram
            Add MathScript Node
                Right Click > Programming > Structures > MathScript
                Borders share the same functions as Formula Node (Left Border for Input, Right Border for Output)
            MathScript Code
                x=0:10;
                y=3*x+2;
                plot(x,y)
            Run program and a linear graph will appear

    Simple VIs using MATLAB Node
        Block Diagram
            Add MATLAB Node
                Right Click > Mathematics > Script & Formula > Script Node > MATLAB Script
                Borders share the same functions as Formula Node (Left Border for Input, Right Border for Output)
            MATLAB Script
                x=0:10;
                y=3*x+2;
                plot(x,y)
            Run program and MATLAB software will start to open the plot graph


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. Arrays

    Front Panel
        Add Array Node
            Right click > Silver > Array, Matrix, Clusters > Array
        Define Data Type for Array
            Add Numeric Control 
            Drag and Drop into the empty array box
        Create Array
            Drag the Array box downwards 
            This will automatically duplicate the Numeric Control as Array elements
            Key in the values and the data will be stored even when the array box is minimized
            Note that the transparent array represents unused elements
        Explanation
            The Left Input box represents Index Number
            The Right Input box represents Stored Value
        Data Types
            Integer: Right click > Silver > Array, Matrix, Clusters > Array
            String: Right click > Silver > String, Path > String Control
            Boolean: Right click > Silver > Boolean > Push Button

    Finding the average value of elements in the array
        Front Panel
            Add Array Node
            Add Numeric Control to Array Node
            Key in Multiple values into the Array
        Block Diagram Panel
            Add Mean Node
                Right Click > Mathematics > Probability/Statistics > Mean
                Link Output of Array Node to Input of Mean Node
            Add indicator
                Right click on output of mean node > Create > Indicator
        Run program and the Mean value will show in the indicator

    Mathematical operators
        Front Panel
            Add Array Node
            Add Numeric Control to Array Node
            Key in Multiple values into the Array
            Duplicate the Array Node
        Block Diagram Panel
            Add mathematical operator
                Right Click > Mathematics > Numeric > Add
            Add Indicator
                Right click on Add Operator > Create > Indicator
        Run program

    2D Array
        Front Panel
            Instead of extending the element box, extend the index box downwards
            Extend the element box horizontally to show the elements of both dimensions
        Block Diagram
            Add Array Size 
                Right Click > Programming > Array > Array Size
                Link the input of Array Size with the output of Array
            Add Indicator
                Right Click on output of Array Size > Create > Indicator
        Run program
        Answer: 
            (Row by
            Column)
            
    Also Try:
        Index Array: Output the value of selected array to indicator (Using constant as the indexer for the input) - Single array
        Delete Array: Output a new array after deleting to indicator (Using index number as constant for input to select the array to be deleted) - Single Array
        Build Array (Combine): Output a combined array to indicator (The node can be extended downwards to add more inputs for multiple arrays) - For 2 separate 1D arrays
            Example: (15,1) + (3,1) = (15,2)
        Transpose 2D Array: With Build Array setup, extend the input of Build Array Node to the input of Transposed Array Node - For 2 separate 1D arrays
            This generally switches horizontal array to vertical and vice versa
            Example: (15,1) => (1, 15)
        Build Array (Concatenate): Right click and select "Concatenate" option. This will form a single array from 2 separate ones. 
            Example: (15,1) + (3,1) = (17,1)
        Search 1D Array: For String Arrays. This searches and count the matches in the entire array. Constant input will be the target. Output will be number of matches.

    Using Array with For Loops
        Front Panel
            Add 1D Array of random numbers
        Block Diagram
            Add For Loop box
            With Array node outside For Loop box, Link Array output to Left Border
            Add Indicator inside the Loop box and link indicator input to left border
            Add timer with 2000ms
        Run Program 
            The indicator will run though array and show its values every 2 seconds
        Also Try:
            Adding math operators into the for loop to calculate individual array values and then output answers to indicator
            OR
            With the Math operator, link the output to right border and then right click on connection node to create external array indicator
                Remove the timer and Extend the array box to show all the elements
                Run program and this will store the calculated values as another array

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
08. Clusters

    A grouped data elements of mixed types, and handy to use when you want to structure a data into a manageable package
    Similar to "struct", "record" and "miniature" class in other programming languages
    
    Front Panel > Right Click > Modern > Array/Matrix/Cluster > Cluster
        Numeric Control, Strings and Boolean can be added
    Block Diagram Panel > Right Click > Programming > Cluster/Class/Variant > 
        Example: Manipulating a data that consist of Name (String), Age (Integer), Employed (Boolean) and Company Name (String)        
        Unbundle by name                           //Separating every Strings, Boolean, Integers from the data
        Bundle by name                               //Opposite of Unbundle by name
        Unbundle                                          //Same functionality as Unbundle by Name except that the Node shows the data types instead of Names
        Bundle                                              //Same functionality as Bundle by Name
        BundleCluster constant
        Build Cluster Array
        Index & Bundle cluster Array
        Cluster to Array
        Array to Cluster
        Error In                                          //Similar to Bundle Cluster into Array but for errors,  when activated will show the error number and message
        Error Out                                       //Similar to Bundle Cluster into Array but for errors,  when activated will show the error number and message

    Unbundle by Name/Unbundle
        Front Panel
            Add Cluster (Name as Books)
                Right Click > Silver > Array/Matrix/Cluster > Cluster
            Add String Control into Cluster Box (Name as Title)
            Add String Control into Cluster Box (Name as Author)
            Add Numerical Control into Cluster Box (Name as Year)
            Add Boolean button (Name as Sale)
            Add a book name to the inputs
            To reorder the inputs, right click on the box and select "Reorder Controls"
                Black box = New order, White box = Current order
                This changes the order of the node in Block Diagram
        Block Diagram
            Add Unbundle by Name
                Right Click > Programming > Cluster/Class/Variant > Unbundle by Name
                Link input to the output of Books Node
                Drag the Unbundle by Name Node to extend the output
                Title, Author, Year and Sale will be shown
            Add indicator
                Right click on any of the 4 output > Create > Indicator
        Run Program and the answer will be shown in the front panel
            Title: "Title of the book" 

    Bundle by Name/Bundle
        Continued from Unbundle by Name
        This is similar to Unbundle
        The input will be the individual control nodes and the output indicator will be the cluster node
        Block Diagram Panel
            To show the input title, right click on Cluster input node (From Front Panel) and create a constant
            Place the constant into the Bundle by Name node (This will show the input names) - Make sure the String, Boolean and Integer are within the blue box
            Right click on the Cluster input node again and change this into indicator and link input to the output of Bundle by Name node
            Change the indicators into control and link the output to the input of the Bundle by Name node
            
    Bundle Cluster into Array
        Continued from Unbundle by Name
        Front Panel
            Add Array
            Drag and Drop entire Cluster box into the Array box
            Now you will have an array of books by titles, author, year and sale
        Block Diagram   
            Create a For Loop
            With the Array outside the For Loop, link the output to the left border of For Loop
            Add Unbundle by Name into the For Loop and link input to the left border (Array connection)
            Move all indicators into the For Loop
            Link indicators input to the output of the Unbundle by Name
            Add Timer (Wait) to the For Loop (Set to 2 seconds)
        Run Program
            The output will scroll through all the books in the array every 2 seconds

    Error In / Error Out
        Front Panel
            Add in Error In and Error Out
                Right Click > Silver > Array/Matrix/Cluster > Error In
                Right Click > Silver > Array/Matrix/Cluster > Error Out
                Note: Right click on Error in Node in BDPanel, link to Unbundle by Name and add Indicator, this will show the status
        Block Diagram Panel
            Add Open File IO
                Right Click > File IO > Open/Create/Replace File
                Right Click > File IO > Close File
                Right Click > File IO > Read Text File
                Link OpenFile Error Output to ReadFile Error Input
                Link ReadFile Error Output to CloseFile Error Input
                Link Output of Error In Node to OpenFile Error Input
                Link Input of Error Out to CloseFile Error Output
            Add Case Structure
                Link Output of CloseFile to the left border of Case Structure
                Notice the Error and No Error header
            Add One Btn Dialog
                Right Click > Dialog Interface > One Btn Dialog
                Place the node into Case Structure node
                Add Text constant
                If there is error in closing a file, a popup box will appear
                
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Property Nodes

    Properties can be set from the configuration window or set them with a code
    Typical properties are Title, Text, Value, Fonts, etc
    In LabView, properties can be set via a property window to configure the selected control/object
    
    Method
        Property Window
            Right click on an object and select "Properties"
            Property Window will appear
        Property Nodes
            Right click on an object > Create > Property Node > Select from the list
            This enables to set properties with a code
            Note: Each object has its own set of list to choose from

    Property Node List
        Class ID, Class Name, Owner, Owning VI
        Bounds, Position        
        Blinking, Mouse Wheel Support, Caption, Control Index, Data Binding, Data Socket, Description, Disabled
        Focus Key Binding, Indicator, Key Focus, Label, Owning Pane, Skip when Tabbing, Synchronous Display
        Tip Strip, Value, Value (Signalling), Visible, XControl        
        Data Entry Limits, Decrement Key Binding, Increment Key Binding, Response to Outside Limit Values, Unit Label
        Display Format, Format String, Increment/Decrement Visible, Numeric Text, Radix Visible, Text Width
        
    Disable a Numeric Control
        via Property Window (Front Panel)
            Add a Numeric Control
            Right Click on Numeric Control > Properties
            Appearance Tab > Enabled State: Disabled
            Run program and Numeric Control can't be selected
        via Property Node (Block Diagram)
            Right click on an object > Create > Property Node > Select "Disabled"
            Right Click on the Node and select "Change All To Write"
            Right click on input > Create > Constant
                Select Disabled and Grey
            Run program and Numeric Control can't be selected

    Application on Waveform Chart 1
        Clear data whenever chart stops
        Block Diagram Panel
            Right Click on Waveform Chart Node > Create > Property Node > History Data
            Right Click on the Node and select "Change All To Write"
            Right click on input > Create > Constant: 0
            No need to link to other nodes
            NOTE: If the chart node is inside a loop box, then place property node outside the loop box
            Run program
                Graph clears when restarting thte chart
        This method helps you from manually clearing the graph before starting the chart

    Application on Waveform Chart 2
        Auto Sampling Time Multiplier (Refer to Topic 3 Sampling Time)
        Block Diagram Panel
            Right Click on Waveform Chart Node > Create > Property Node > XScale > Multiplier
            Right Click on the Node and select "Change All To Write"
            Link input of the Multiplier Node to the output of the Sampling Time Node
            NOTE: The Multiplier Node should be outside the loop
            Run program
                Sampling Time can be edited from the Front Panel without the need to change the Waveform Chart's multiplier


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Project Explorer

    Similar File Explorer Tree
    Helps to easily visualize multiple VIs and Files
    Use when creating executables, web services, embedded application, etc
    
    To use this feature, create a new project instead of creating a VI
    The project will be saved as a file with *.lvproj extension
    The project file can consist of multiple VIs
    Tree structure:
        Lvproj >
            My Computer >
                Virtual Folders (This folder can also contain VI files)
                *.vi (This file can be saved anywhere in the disk)
                Dependencies
                Build Specifications (Creates a file)
                    Application (EXE) - Suitable to deploy to other computers without LabView
                    Installer
                    .NET Interop Assembly
                    Library
                    Shared Library (DLL)
                    Source Distribution
                    Zip Files

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
11. Debugging

    LabView Debug Techniques:
        Broken Run Arrow: An icon in place of Run Arrow button. 
            In main toolbar, click on broken arrow icon to open Error window. 
            Double click on error messages to view details
        Highlight Execution: See the flow and values while the code is running. 
            In main toolbar, click on the "Lightbulb Icon"
        Probes: See values from the node links. 
            In Block Diagram, Right click on any node links and select "Probe". 
            Probe Watch Window will appear. Add as many probe as needed by right clicking on another node link and select probe again
        Breakpoints: Breaking down conditions/program into smaller sections.  
            In Block Diagram, Right click on any node links and select "Breakpoint". 
            The breakpoints are shown as red circles 
            When the breakpoints are set, when ever the program starts, it will stop at these breakpoints
            Open Tools Palette:
                View > Tools Palette
            Breakpoints can be used together with Probe
            Breakpoint manager shows the list of all breakpoints
                Solid Circle: Enable
                Hollow Circle: Disable
                Cross: Delete
            Step Over to go to next breakpoints
            

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
12. Labview and USB6008
    
    USB6008 Analog In/Out
    Datalogging
    
    Connect USB-6008 to the PC directly via USB (NI-DAQmx driver must be installed to be recognized as a device)
    Check the connection
        Open Measurement and Automation Explorer (NI MAX)
        NI USB-6008 "Dev 1" will appear under Devices and Interface Tree
        Click on NI USB-6008 "Dev 1" and in Toolbar Menu, click on Self-test
            "The self test completed successfully" message will appear
        In Toolbar Menu, click on Test Panels
            Click start to see if everything is running as expected
            
    Create New VI Project (Analog Input)
        Block Diagram Panel
            Add While Loop to wrap up all 4 Nodes below
                Add Numeric Indicator
                Add Stop Button
                Add Timer with constant of 100
                Add DAQ
                    Right Click > Measurement > NI-DAQmx > DAQ Assist
                        Read Values => Acquire Signals
                        Output a Value => Generate Signals
                    Select Acquire Signals > Analog Input > Voltage
                        Note that there are 8 input channels for analog signals
                        Choose any one and click Finish
                    DAQ Assistant Window
                        Timing Settings
                            Acquisition Mode: 1 Sample (On demand)
                        Signal Input Range: 
                            Max: 5
                            Min: 0
                            Meaning, 0-5Vdc
                        Click OK
                Link DAQ "Data" Output to Indicator Input
            Run Program    
            
    DAQ Assistant Window  (For Input signal)
        To search for DAQ functions
        Right click > Search (Top right hand corner of toolbar)
        Search and click on Convert from Dynamic Data, a configuration window will appear
        In Conversion Section > Resulting Array Type > 
            Select Single Scalar
            Scalar Data Type: Floating point
            Channel: 0 
            Press OK
        Link DAQ "Data" Output to "Convert from Dynamic Data" node's input
        Link DAQ "Convert from Dynamic Data"  output to Numeric Indicator input
        Run Program

    DAQ Assistant Window  (For Output signal)
        Similar to Input signal above
        The only difference is that us "Generate Signals" instead of "Acquire"
        And, Add Numeric Control instead of Numeric Indicator
        Link Output of Numeric Control to the input of DAQ Assistant node (input)
        Run program and input 3 to Numeric control. Check with multimeter to verify the signal volltage

    For loop back test
        Add Numeric Indicator to the while loop
        Connect DAQ output to DAQ input (Loop Back Test)
        Connect both Analog Out Project and Analog In Project
        Run both programs at the same time
            If you enter "3" into Front Panel, the Indicator will show the voltage value in Numeric  Indicator

    For having 2 seperate VIs to single Visible
        Follow Input Signal program reference
        Add convert to Dynamic Data
        Link "Numerical Control" output to the input of "Convert to Dynamic Data" node
        Link output of "Convert to Dynamic Data" node to input of DAQ Assistant Data
        NOTE: The opposite should be applied (Convert from Dynamix Data)
        Run Program 
            Key in value to Numerical Control and the real value will appear in Indicator


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
13. Labview and OPC UA

    Requirements
        Labview 2017 onwards
        Labview OPCUA Toolkit
            OPCUA Toolkit is a standalone product from 2017 onwards
            Version below 2017 contains OPCUA API (DSC+RealTime)
            From 2017 onwards, DSC and RealTime no longer contain OPCUA API

    Structure
        |                 OPC UA Server (Data Storage)
        |                             |
        |          |------------------|-----------------------|
        |          |                                          |
        |          ^  write                             read  V
        |          |                                          |
        |    OPC UA Client                              OPC UA Client
        |          |                                          |
        |     Measurement                          Monitoring & Analysis
        |
        
    Standards
        Classic - COM/DCOM
            Realtime data: OPC DA
            Historical Data: OPC HDA
            Alarm and Event: OPC AE
            etc
            Windows based systems only
        Next Gen (2017 and later) - XML, HTTP, SOAP
            Unified Architecture: OPC UA - All in one
            Works with any OS (Windows, Linux, OSX, etc)
            Protocols: UA Binary, UA XML

    OPC UA Toolkit
        Right Click on Block Diagram > Data Communication > OPC UA >
            OPC UA Client
                Connect, Forward Browse, Create Subscription, Delete Subscription, Disconnect, Add Monitored Data Nodes,
                Get Node Attr, Multiple Read, Multiple Write, Delete Monitored, Alarms Conditions, Historical Access
            OPC UA Server
                Create, Close, Start, Stop, Add Clients, Clear Clients, Register Server, Unregister Server, 
                Add Folder, Add Item, Add Analog Item, Add Property, Delete Node, Read, Write, 
                Alarms and Conditions, Historical Access
            Create Certificate

    Server.vi
        Block Diagram
            Create.vi > Add Folder.vi > Add Item.vi > Start.vi > While Loop > Stop.vi > Close.vi > Simple Error Handler.vi
                Top wire links (refnum) will go through from Create.vi and all the way through to Close.vi
                Bottom wire links (error) will go through from Create.vi and all the way through to Simple Error Handler.vi
                Note that top (refnum) and bottom (error) wire links will go through the while loop (left border and right border will be connected to the 2 wires)
                Simple Error Handler    
                    Right Click > Dialog & User > Simple Error Handler
                Center ouput of Add Folder.vi will be linked to the center input of Add Item.vi
            While Loop
                Add Wait Timer with constant of 1000
                Add Stop Button
            Server Endpoint URL
                Right Click on Create.vi node (center output) > Create > Indicator
                The input of this node with be linked to the center output of Create.vi
            Item Node ID
                Right Click on Add Item.vi node (center output) > Create > Indicator
                The input of this node with be linked to the center output of Add Item.vi
            ItemBox
                Right Click on Add Item.vi node (center input) > Create > Constant
                The output of ItemBox will be linked to the center input of Add item.vi
                Items: - Enable the internal labels
                    Name
                        Temperature
                    DataType
                        Double
                    Access level
                        read/write
                    Description
                        TC-01 Thermocouple Values
            Folder Name
                Right Click on Add Folder.vi node (center input) > Create > Constant
                The output of this node will be linked to the center input of Add Folder.vi
                Constant = "Process Data"
                Right click to enable label
        Front panel
            Server Endpoint URL
                opc.tcp://XPS15HPH:49580 (Auto generate when program runs)
            Item Node ID
                ns=2;s=Process Data.Temperature (Auto generate when program runs)
            Stop Button
        Run Program

    ClientWrite.vi (Write)
        Block Diagram 
            Connect.vi > While Loop [Multiple Write] > Disconnect.vi > Simple Error Handler.vi
                Top wire links (refnum) will go to the While Loop and runs to Multiple Write Node and to Disconnect.vi node
                Bottom wire links (error) will have similar connection with refnum but ends at Simple Error Handler.vi
            Server Endpoint URL (Copy over and change to control)
                Copy the indicator over from Front Panel of Server.vi and then change to control
                Connect.vi's "Server endpoint url" input will be linked to this indicator
            Security Policy 
                Right Click Connect.vi's security policy input > Create > Constant
                Message Mode:
                    None
                Security:
                    Basic256
            While Loop
                
                |-----While Loop----------------------------------------------------------------------------------|
                |                                                                                                 |
                | Request Node   >-----------------------------+                                                  |
                |                                              |                                                  |
                |                                              V                                                  |
                |                             _________________V____                                              |
                |                            | Bundle By Name |  |  |                                             |
                | Item Node ID             > | Node ID        |  |  | >> Build Array node >> Multiple Write.vi    |
                | Temperature Value        > | Value          |  |  |                                             |
                |                            |----------------|--|--|                                             |
                |                                                                                                 |
                |-------------------------------------------------------------------------------------------------|                
                
                Multiple Write.vi
                    Click on bottom constant > Scalar > Double
                BundleByName 
                    Create 
                        Create "Request" Constant node first from Multiple Write (As mentioned below)
                        Right click on "Request" Constant node > Cluster > Bundle By Name
                    Item Node ID - Link to Node ID Input
                        (Copy and paste "Item Node" indicator from server) and change to control
                        Value: Process Data.Temperature  //Remove "ns=2;s="
                    Temperature (Numeric Control) - Link to Value Input
                    Request (Constant) - Top Input (Cluster Input of "Bundle By Name") - See diagram
                        Right Click on "request" input of Multiple Write.vi (As mentioned above) and then seperate the nodes
                        Node ID 
                        Value
                        Timestamp
                        Node Status
                Build Array Node
                    Right Click > Programming > Array > Build Array
                    Output will be linked to the input of Multiple Write.vi
                    Input will be linked to the output of Bundle By Name Node
                Timer Wait with Constant of 1000
                Stop Button
        Front Panel
            Server Endpoint URL (Control)
            Item Node ID (Control)
                Value: Process Data.Temperature
                Main Menu > Edit > Make Current Values Default
            Stop Button
            Temperature (Numeric Control)

    ClientRead.vi (Read)
        NOTE:
            For Results Indicator Array, Error link does not have to go into while loop. Only the refnum goes through.
            For Temperature indicator, Both Error and Refnum are linked into while loop and into Multiple Read.vi like in ClientWrite.vi    
        Block Diagram 
            Connect.vi > While Loop [Multiple Read] > Disconnect.vi > Simple Error Handler.vi
                Top wire links (refnum) will go to the While Loop and runs to Multiple Read Node and to Disconnect.vi node
                Bottom wire links (error) will have similar connection with refnum but ends at Simple Error Handler.vi
            Server Endpoint URL (Copy over and change to control)
                Copy the indicator over from Front Panel of Server.vi and then change to control
                Connect.vi's "Server endpoint url" input will be linked to this indicator
            Security Policy 
                Right Click Connect.vi's security policy input > Create > Constant
                Message Mode:
                    None
                Security:
                    Basic256
            While Loop
                |--------------------------------------------------------------------------------------|
                |                                                                                      |
                | Item Node > Build Array>--+                                                          |
                |                           |                                                          |                        
                |                           V                         +--->Results                     |
                |                           |     _______________     |                                |
                |                           |    | Multiple Read |    |    Index                Temp   |
                |                           +--->|               | >> + >> Array >> Unbundle >> Value  |
                |                                |---------------|                                     |
                |                                 Double                                               |
                |                                                                                      |
                |--------------------------------------------------------------------------------------|
                Timer Wait with Constant of 1000
                Stop Button
                Multiple Read.vi
                    Change "Variant" to "Scalar > Double"
                    Add Item Node ID (String Control)
                        Or just copy over from Write.vi
                        Link output to the input of Build Array Node
                        Value in Front Panel: Process Data.Temperature
                    Add Build Array
                        Right Click > Array > Build Array
                        Link output of Build Array Node to the input Multiple Read.vs (node id)
                    Add Results (Indicator)
                        Right Click on output (results) > Create > Indicator
                        Result box indicator will appear in the Front Panel
            Run Program
                Run all 3 programs (Server, Write and Read)
                Temperature value will show up in the Results Indicator of Client (Read)
                
            To show the Temperature value in Temperature indicator (Temp Value)
                In While loop, Add Temperature Indicator
                Add Index Array
                    Right Click on "Results" input link wire >  Array Palette > Index Array
                    Link the input of Index Array to share the same input as Results
                    Create constant with value of "0"                    
                Add Unbundle by Name    
                    Right click on output of Index Array > Cluster > Unbundle by Name
                    Change "Node ID" to "Value"
                Link output of Unbundle by Name to input of Temperature Indicator (Temp Value)    


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
14. Labview and Python

    Resources for Python
        https://www.halvorsen.blog/documents/programming/python/
        https://github.com/Izaat/references/tree/main/Python%20References
        NOTE: For 64 bit Labview, use 64bit Pyhton. For 32bit Labview, use 32bit Python

    Example:
        Convert Celsius to Fahrenheit in Python and call function from Labview
        Formulae:
            Tf = (Tc*(9/5)) + 32
            Tc = (Tf-32) * (5/9)

    CODE:
        fahrenheit.py
            def c2f(Tc):
                Tf = (Tc * 9/5) + 32
                return Tf
            def f2c(Tf):
                Tc = (Tf-32) * (5/9)
                return Tc

        testRun.py
            from fahrenheit import c2f, f2c            
            Tc = 0
            Tf = 32            
            Tf = c2f(Tc) //Convert celsius to fahrenheit
            Tc = f2c(Tf) //Convert fahrenheit to celsius
            print(Tf)      //Prints answer for fahrenheit
            print(Tc)      //Prints answer for celsius

    LABVIEW (Celsius to Fahrenheit)
        Front Panel
            Add Numeric Control (Name to "Tc")
            Add Numerci Indicator (Name to "Tf")
        Block Diagram
            Existing: 
                Numeric Control
                Numeric Indicator
            Add Open Python Session
                Right Click > Connectivity > Python > Open Python Session
                Right click on "Python Version"  input and Create a constant
                    Value: 3.7 (Where this will be the python version installed to the computer)
            Add Python Node    
                Right Click > Connectivity > Python > Python Node
                Session In
                    Link to "Session Out" of Open Python Session Node
                Module Path
                    Create Constant
                    Value: C:\User\Labiew Python Folder\fahrenheit.py       //Path that contains the *.py to be used
                Function Name
                    Create Constant
                    Value: c2f                                                 //The function name defined in the python program i.e "def c2f"
                Node Array    
                    By default, there are only one input 1 and output 1. Drag down to add more inputs
                    Return Type 1 (Input)
                        Create Constant
                        Value: 0
                    Return Type 2 (Input)
                        Link this input to the output of Numeric Control (Tc)
                    Return Value 1 (Output)
                        Link this input to the output of Numeric Indicator (Tf)
            Add Close Python Session
                Right Click > Connectivity > Python > Close Python Session
                Session In
                    Link to "Session Out" of Python Node to "Session In" of Close Python Session Node
        Save file and Run Program
            Input Celsius in Tc box and this will convert to Fahrenheit in Tf box

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
15. Labview Mathscript
    
    Refer to Topic 6
    Introduction
    Basics
    Plotting
    Simulation
    Create Functions
    MathScript Node

    //////////////////////////
    //////////////////////////
    Start MathScript: - Create and save scripts
        Front Panel > Main Menu > Tools > MathScript Window
        There will be the 3rd window running on top of the default Front Panel and Block Diagram Panel

    //////////////////////////
    Introduction
        Install additional module "LabView MathScript Module"
        Install "LabView Control Design and Simulation Module" to add Control and Simulation features to Mathscript
        Can be used in 2 different ways
            LabView MathScript - A seperate application similar to MATLAB, but need Labview to be installed
            MathScript Node - Integration to LabView code
        MATLAB scripts are able to run in LabView MathScript with almost no changes needed
            Core functionality or MATLAB Control Toolbox required in LabView
        LabView MathScript does not have the same speed and flexibility and toolboxes as MATLAB
        If you know MATLAB, you know LabView MathScript
        
        Start MathScript: 
            Front Panel > Main Menu > Tools > MathScript Window
            There will be the 3rd window running on top of the default Front Panel and Block Diagram Panel

        MathScript Window:
            Left Side
                Output Window: Shows results of calculations
                Command Window: Run single commands
            Right Side:
                Script Window: Program editor. The script will be saved as "*.m" file

        Command List:
            clc: Clear output window
            clear: Clear all variables
            i, j, pi, NaN, inf: See Built in Math Constants table below
            log(X), log10(x), sqrt(x), exp(x), x^2 : See Mathematical Expressions below

    //////////////////////////
    Basic
            
        Simple Calculation 1
            Formula
                Find answer for X+Y, where X=3 and Y=5
            Command Window:
                X=3 
                Press Enter
                Y = 5
                Press Enter
                X+Y
                Press Enter
                Answer will show up as 8 in Output Window
        Simple Calculation 2
            Formula
                Z=X*Y, where X=3 and Y=5
            Command Window:
                Z=X*Y
                Press Enter
                This will auto create Z variable and store the value 15
        Variable List
            In Script Editor, open Variables Tab
            This will show all the variables in MathScript

        Built-in Math Constants
            | Name   | Description                            |
            | i, j   | Used for complex numbers, e.g., z=2+4i |
            | pi     | pi                                     |
            | inf    | infinity                               |
            | NaN    | Not a Number                           |
        
            Examples
                pi:
                    r=5;
                    A=pi*r^2
                    A=78.5
                i, j:
                    z1=3+3i;
                    z2=3+5i;
                    z=z1+z2;
                    z=6 + 8i
                inf:
                    a=2;
                    b=0;
                    a/b;
                    inf

        Mathematical Expressions
            log(x)     : ln(x)
            log10(x)
            sqrt(x)
            exp(x)
            x^2

            Example 1:
                y(x) = (3x+2)/2 
                Find y(2)
                
                Therefore:
                    x=2;
                    y=(3*x+2)/2
                    y=4

            Example 2:
                z = 3(x^2) + sqrt(x^2 + y^2) + e^(ln(x))

                Therefore:
                    x=2;
                    y=2;
                    z=3*x^2 + sqrt(x^2 + y^2) + exp(log(x));
                    ans=16.83

    //////////////////////////
    Plotting
        Functions:
            plot(), xlabel(), ylabel, title(), grid()

        Colons:
            x=0:5; where ":" means 0 through 5. Min:Max
        
        Example:
            y(t)=2x+4 
            
            Therefore:
                x=0:5;
                y=2*x+4;
                plot(x, y)
            Graph:
                Horizontal axis will be 0 to 5
                Vertical axis will be 4 to 14 
                Graph will be 45deg linear incline

        Plot Functions
            | Name         | Description                                                      |
            | plot         | Create new plot                                                  |
            | figure       | Define a new Figure/Plot window                                  |
            | grid on/off  | Create Grid lines in a plot                                      |
            | title        | Add Title to current plot                                        |
            | xlabel       | Add a label to the x-axis                                        |
            | ylabel       | Add a label to the y-axis                                        |
            | axis         | Set xmin, xmax, ymin, ymax                                       |
            | hold on/off  | Add several plots in the same Figure                             |
            | legend       | Create a legend in the corner or specified position of the plot  |
            | subplot      | Divide a figure into several subplots                            |

            Example 1:
                x=0:0.1:2*pi;
                y=sin(x);
                plot(x, y)             //This will show a line graph
                plot(x,y, 'o')         //This will show the plots instead of line in the graph
                plot(x,y, '-o')        //This will show the plots both the line and the plots in the graph
                title('Plot Title')
                xlabel('x')
                ylabel('y=sin(x')
                grid on
                axis([0,2*pi,-1,1])
                legend('Temperature')

            Example 2:
                x=0:5;              //Create 0 to 5 index
                y = 2*x+4;       //Uses x index number, add 4 to first index, and add 2 for the next index
                
                plot(x,y);              //Shows the plot graph in plot window
                plot(x,y, 'o')         //This will show the plots instead of line in the graph
                plot(x,y, '-o')        //This will show the plots both the line and the plots in the graph

            Example 3:
                //x = 0:2*pi             //Create 0 to 6 index
                //y = sin(x)              //Uses x index number, and multiply sine
                //plot(x,y);              //Will show the linear graph of sine wave instead of curves

                x = 0:0.1:2*pi          //The center number is the increment value
                y = sin(x) 
                plot(x,y);                 //Now this will show curves to the graph after placing 0.1 as increment for "X"


    //////////////////////////
    Simulation
        
        In order to simulate a system in LabView MathScript, discrete version of differential equation is needed
        Question:
            Assume the following Differential Equation:
                'x = -ax + bu
            Start by setting a=0.25 and b=2
            Euler approximation:
                'x = -ax(k) + bu(k) = [x(k+1) - x(k)] / Ts
                where, Ts is the sampling time            
            Finally we'll get:
                x(k+1) = (1 - Ts * a) x(k) + Ts * bu(k)
                This is the discrete version of the differential equation

            Plotting (Celsius to Fahrenheit):
                clear               //Not used in Mathscript node
                clc                 //Not used in Mathscript node
                a = 0.25;           //Model Parameters
                b=2;                //Model Parameters
                
                Ts = 0.1           //Simulation parameters, set to 0.1s for sample time
                Tstop = 20         //Set entire simulation time to 20s
                uk = 1             //Step response, input signal set to 1
                x(1) = 0           //Initialization, set the starting value of x
                
                for k=1:(Tstop/Ts)                           //Simulation
                    x(k+1) = (1 - Ts * a).*x(k) + Ts*b*u*k   //Refer to above equation
                    x(k+1) = (1 - a*Ts).*x(k) + Ts*b*uk     //For Mathscript node
                end
                
                k=0:Ts:Tstop       //For code editor
                plot(k,x)          //Remove if this script will be used as a node (See MathScript Node)
                grid on            //Remove if this script will be used as a node (See MathScript Node)

    //////////////////////////
    Creating Functions
        
        Creating a function
            Create a function in Script editor
                Script:
                    function total = add(x,y)
                    total=x+y;
            Save the function as *.m file (Function name should be the same as function name)
            Open MathScript Properties
                Main Menu > File > LabView MathScript Properties
                    Property window will appear
                    Category > SearchPaths
                        Click on "Add folder" button
                        Add the path to where the folder containing the file is saved
            Test function
                Command window, type in:
                    add(3,5)
        
        Example Function Script 1: - Save file as "fahrenheit.m"
            function Tf = fahrenheit(Tc)     //function "ReturnValue" = "FunctionName" ( "Input" )
            Tf = (9/5)*Tc+32;                      //"ReturnValue" = "FunctionBody"            
            Executing the Function: - From command window or script editor
                Tc=23;
                Tf=fahrenheit(Tc);

            Test function:
                Tc=23;
                Tf=fahrenheit(Tc)
                The output value will be 73.4

    //////////////////////////
    MathScript Node

        Block Diagram Panel
            Add MathScript Node
                Right Click > Structure > MathScript
                Use Celsius to Fahrenheit script (From Simulation topic) 
                    OR import a script file Right Click on Node > Import > Select the file path
                Left Border:
                    No input
                Right border: 
                    Add connection "k"
                        Right Click on Border > Add Output (Data type: Orange array)
                    Add connection "x"
                        Right Click on Border > Add Output (Data type: Orange array)
            Add Bundle Node outside MathScript Node
                Right Click > Programming > Cluster > Bundle
                Link input to the output of "x" and "k" of MathScript Node
                Right click on connections to select the data types
            Add XY Graph Node
                Right Click > Silver > Graph > XY Graph
                View as Icon
                    Right Click on Node > View as Icon
                Link input to the output of Bundle Node
            Run Program
                The result will be plotted into the Graph Indicator in Front Panel

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
16. Labview and Siemens TIA Portal
    
    TIA Portal
        Create Project > Configure a device > Add a device > Controllers > Select a PLC > Click on Add button
        Device View > Double click on ethernet port on virtual PLC image
            Properties Tab > General Tab > Ethernet Address 
                Network interface with
                    Subnet: PN/IE
                IP Protocol
                    IP Address: 192.168.0.10
                    Subnet: 255.255.255.0
        Create Program Block OB1
            Create a simple single rung Start-Stop program
            Network 1:
                |       %M0.1                   %M0.0                       %Q0.1     |
                |     Stop PB                 Start PB                     Output     |
                |-------|/|------------+--------|  |-------+----------------(  )------|
                |                      |      %Q0.1        |                          |
                |                      |      Output       |                          |
                |                      |-------|  |--------|                          |
        Start simulation
            Main Menu > Online > Simulation
            PLCSIM window and Advanced Load window will appear
            Advanced Load:  
                Type of interface: PN/IE
                Interface: PLCSIM
                Interface/Subnet: PN/IE_1
                Click on "Search" button
                Highlight the PLC and Click Add
            PLCSIM
                CPU: Run-P
        Going Online
            Upload Hardware configurations to PLC
            Main Toolbar > Go Online
            Start Monitoring

    NI OPC Servers
        On windows "Opened Program" tray (Bottom Right corner) > Right click on NI OPC Server > Click on "Configuration"
        OPC Window
            LABPLC (Channel RootTree)
                Click "Click to add a channel" and New Channel window will appear
                Channel Name: LABPLC
                Click Next
                Device Driver: Siemens TCP/IP Ethernet
                Click Next
                Adapter: Default
            PLC_1200 (Channel device)
                Click "Click to add a device" and New Channel window will appear
                Device Name: PLC_1200
                Click Next
                Device Model: S7-1200
                Click Next
                Device ID: 192.168.0.12
                    Open Windows Network Sharing Center > Change Adapter setting
                    Configure PCIe adapter
                    Use static address
                    Change IP address to 192.168.0.12 from 192.168.0.10, the latter cause IP conflict with the PLC
                Click Next
                Scan Mode: Respect Client scan rate
                Click Next
        Static Tag
            Click on "Add static tag" and add new tag
            Tag Properties:
                General Tab (To correlate with TIA OB1 Program)
                    Name: Start PB
                    Address: M0.0
                    Click on "Check Address" (Tick Icon) and data properties will be automatically filled in
                        Data Type will automatically changed to "Boolean" instead of "Default"
                    Click on Apply
                    Do the same with "Stop PB" button and "Output"
        Disconnect Runtime
            Main Menu > Runtime > Disconnect
            NetToPLCsim must be connected first and then reconnect OPC Server
    
    Open NetToPLCsim
        Run as administrator
        Click on Add
        Station Data
            Name: PLC_LAB
            IP Address: 192.168.0.12
            PLCsim IP Address: Browse and select 192.168.0.10
            TSAP: Unchecked
            Click OK and Start Server
            Head back to NI OPC Server and reconnect

    NI OPC Servers
        Main Menu > Runtime > Reconnect
        Main Toolbar > Quick Client > Open LABPLC.PLC_1200 root folder
            A list of PLC I/O will be shown

    Labview
        Create Blank Project
        Project Explorer > Items Tab
            Right Click on "My Computer" > New > I/O Server
                I/O Server Type: OPC Client
                Click on Continue
            Configure OPC Client
                Settings Tab
                    Browse: Machine
                    Machine: localhost
                    Registered OPC Servers: NI.NIOPCServers
                    Sample Rate(ms): 500
                    Deadband(%): 0
                    Poll Rate(s): 120
                    A Labview "Untitled Library" will appear under "My Computer" root tree
            Untitled Library Subtree
                Drop down "Untitled Library" and right click on OPC1 subtree
                Select "Create Bound Variables"
                Create Bound Variables Window will appear
            Create Bound Variables Window
                Project Tree > My Computer > Untitled Library > OPC1 > LABPLC > PLC_1200
                    Start PB, Stop PB and Output will be shown
                    Select all 3 and Add to "Added variables"
                    Click OK and Done
            All 3 variables will be shown in Project Explorer window
        Start a new VI
            Front Panel:
                Add Button (Start PB)
                Add Button (Stop PB)
                Add Indicator (LED)
            Block Diagram
                Drag and drop variables from Project Explorer into the Block Diagram
                Right click on Project Explorer Nodes > Access Mode > Write
                Link Nodes from Block Diagram Node output to Project Explorer Node input (For Push Buttons)
                Link Nodes from Project Explorer Node output to Block Diagram Node input (For Output)
                Wrap in While loop, wait time constant at 1 
            Run Program    

    Test
        Click on Labview button and this will affect the TIA Portal ladder logic

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
17. Labview and Arduino

    Download VI Package Manager
    Start VI Package Manager
        Type in Arduino in search box
        Select and double click on "Labview Interface for Arduino", install the library
    Start Arduino IDE
        Main Menu > Open > Labview installation folder from VI Package Manager (../Program Files/NI/LabVIEW/vi.lib/Labview Interface for Arduino/Firmware/LVIFA_Base)
        Select LVIFA_Base.pde
        Several tabs will appear in Arduino IDE (LVIFA_Base, AFMotor.cpp, AFMotor.h, AccelStepper.cpp, AccelStepper.h, LabVIEWInterface.h, LabViewInterface)
        Load LVIFA_Base to Arduino
            Make sure AVRISP mk2 is selected (Main Menu > Tools > Programmer > AVRISP)
    Close Arduino IDE after loading. (Open IDE will interfere with the connection to Labview)
    Open Labview and start Blank VI 
        Block Diagram
            Right Click > Search > Type in "Arduino" > Select "Arduino"
            A tree with arduino nodes will appear in tool menu
            Add "Init" node 
                VISA Resource > Create > Constant > Drop Down menu > COM5
                Baud Rate > Create > Constant > 9600
                Board Type > Create > Constant > Uno
                Bytes Per Packet: Empty
                Connection Type > Create > Constant > USB/Serial      
                Connect Arduino Resource output to left side of While Loop box
                Connect Error Out output to left side of While Loop box
            Add While Loop
                Add Set Digital Pin
                    Right Click > Arduino > Low Level > Set Digital Pin
                    Connect Arduino Resource Input to left while loop box (Arduino resource from Init node)
                    Connect Error In Input to left while loop box (Error Out from Init node)
                    Connect Arduino Resource Output to Arduino Resource Input of Digital Write Node
                    Connect Error Our output to Error In Input of Digital Write Node
                    Digital IO Pin
                        Right Click > Create > Control
                        Set to "13" in Front Panel to set pin 13
                        Split output to connect to the Digital Write Node (Input - Digital IO)
                    Pin Mode (Connect LED to Pin 13)
                        Right Click > Create > Constant
                        Select "Output"
                Add Digital Write
                    Right Click > Arduino > Low Level > Digital Write Pin
                    Connect Arduino Resource output to right side of While Loop box
                    Connect Error Out output to right side of While Loop box
                    Digital IO Pin
                        See Digital IO Pin above
                    Value
                        Connect to "Value"  to output of "Boolean To (0,1) Node" - Use search in toolbar
                Add Boolean Node (Create LED indicator node output in Front Panel)  
                    Connect input of "Boolean To (0,1) Node" to output of  LED Indicator
            Add "Close" node
                Connect Arduino Resource input to right side of While Loop box (Digital Write node's Arduino Resource output)
                Connect Error In input to right side of While Loop box (Digital Write node's Error Out output)
        Run program

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
18. Labview and LINX Toolkit (Arduino/RPi/Beaglebone)

    Add-on for Labview that make it possible to program Arduino device using Labview 
    Enables creation of Data Logging applications without the need of expensive DAQ device
    
    Labview Linx
    DAQ System
    I/O Channels
        Digital IO (R/W)
        Analog IO (Read, Write/PWM)
    
    Start VI Package Manager
        Splash Screen > Main Menu > Tools > VI Package Manager > Search for "Labview LINX"
        Select NI Labview LINX Toolkit and Install
        NOTE: LINX Toolkit is already included in the Community version
    
    Adding Arduino Uno
        Front Panel:
            Main Menu > Tools > MakerHub > LINX > LINX Firmware Wizard
            LINX Firmware Wizard
                Device Family: Arduino
                Device Type: Arduino Uno
                Firmware Upload Method: Serial / USB
                COM: COM6
                Firmware Version: LINX-Serial/USB
                Upload Type: Pre-Built Firmware
                LINX firmware will be uploaded to device and Click on Finish
        Block Diagram (LINX Palette):
            Open
            Close
            Peripherals
                Analog, Digital, PWM, I2C, SPI, UART
            Sensors
                Accelerometer, Beta, Community, Display, Distance, Digilent
                Lights, Mindstorms, Misc, Motion, Pmods, Temp, Signal Generator
            Utilities
                Custom CMD, Loop Frequency, Check Channel, Get UserID, Set UserID
                Config Enet, Config Wifi

    Connection 
        Arduino(GND) -- (-)LED(+) --R(270Ohm) -- Arduino(PIN8)

    Application
        Front Panel
            Add Push Button (Boolean)
        Block Diagram
            Add Open
                Right Click > MakerHub > LINX > Open
                Select Serial for USB
                Add Constant for Serial Port
                    Right click > Create > Constant > COM6
                Link output (Link Resource) to the input of Digital Write Node (Link Resource)    
                Link output (Error Out) to the input of Digital Write Node (Error In)    
            Add While Loop    
                Add Stop button for While Loop
                Add Timer (Wait) and set constant to 100                
                Push Button Node (From Front Panel)
                    Link Output to input of Digital Write (Output Value)            
                Add Digital Write
                    Right Click > MakerHub > LINX > Peripherals > Digital > Write
                    Add Constant for DO Channel
                        Right click > Create > Constant > 8 (PIN8)
                    Link input (Link Resource) to the output of Open Node (Link Resource)    
                    Link input (Error In) to the output of Open Node (Error Out)  
                    Link output (Link resource) to the input of Close Node (Link Resource)    
                    Link output (Error Out) to the input of Close Node (Error In) 
                    Link input (Output Value) to output of Push Button Node         
            Add Close
                Right Click > MakerHub > LINX > Close
                Link input (Link resource) to the output of Digital Write Node (Link Resource)    
                Link input (Error In) to the output of Digital Write Node (Error Out)       
    

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
19. CompactRio/myRIO FPGA Application

    /////////////////////////////////////
    Structure
        |            Desktop PC   ------  Wireless Router  ----------------  Internet
        |                 |                     |
        |   +-------------+---------------------+-----------------------+
        |   |             |                     |                       |
        |   |           USB Lan            myRIO adapter                |
        |   |             |                     |                       |
        |   |             |---------------------+                       |
        |   |             |                                             |
        |   |      |------+--------------|                              |
        |   |      |                     |                              |
        |   |      |                     +------------UART<-------------+---->
        |   |      |                     |                              |            |---------------------|
        |   |      |     RT Target       |                              |            | > Sensors           |
        |   |      |                     +----------USB Port<-----------+---->       | > Actuators         |
        |   |      |                     +--------File System<----------+---->       | > Peripherals       |
        |   |      |                     |                              |            | > User Interface    |
        |   |      |------+--------------|                              |            | > Embedded Systems  |
        |   |             |                                             |            |---------------------|
        |   |      |------+--------------|                              |
        |   |      |                     |                              |
        |   |      |                     +-----------DIO<---------------+---->
        |   |      |                     |                              |
        |   |      |    FPGA Target      |                              |
        |   |      |                     +-----------AIO<---------------+---->
        |   |      |                     +-------Onboard Devices        |
        |   |      |                     |                              |
        |   |      |---------------------|                              |
        |   |                                                           |
        |   +-----------------------------------------------------------+
        |

        FPGA-Main.vi (FPGA Target)   
            Front Panel: LEDs, Pause, Loop Time input
            Block Diagram: Process Loop 1 for button and LEDs, Process Loop 2 for loop time input and clock speed
        FPGA-testbench.vi (Desktop PC - Simulator)
            Front Panel: Panel 1 to control 4 LEDs, Panel 2 to control FPGA-Main.vi
            Block Diagram: 100ms While loop, FPGA-Main.vi node, 4 LEDs, output from FPGA-Main.vi, buttons, loop time input control
        RT-Main.vi (RT Target)
            Front Panel: Startup to interact with HMI in Desktop PC
            Block Diagram: Conditional block
        PC-Main.vi (Desktop PC) - HMI
            Front Panel: Loop Time control slider, pause button, LEDs (a and b)
            Block Diagram: Shared variables with FPGA-Mainvi, idle loop (to keep VI running until stop is pressed)
            
    Process
        1. Create Labview project (FPGA-App.lvproj)
        2. Create FPGA-Main.vi
        3. Create FPGA-testbench.vi
        4. Test/debug FPGA-Main.vi
        5. Compile FPGA-Main to bitstream file
        6. Create and deploy shared variables to RT Target
        7. Create RT-Main.vi
        8. Create PC-Main.vi
        9. Set RT-Main.vi as startup VI

    /////////////////////////////////////
    1. Create Labview project
    
        New Project
            Main Menu > New
                Select Project Root Folder > Empty Project > Press OK
            Empty Project Window
                Save as FPGA-App.lvproj
                This will rename "untilted.lvproj" to "FPGA-App.lvproj"

        Setup
            In Items tab, right Click on "FPGA-App.lvproj" root directory > New > Targets and Devices (Note that myRIO is already connected to PC)
            Check "Discover existing target and devices"
            In directory, Targets and Devices column, open "myRIO" and select "NI-myRIO-xxxx-xxxxxxxx"
            Click OK and the selected device will appear in "FPGA-App.lvproj" window
            Note that the device "NI-myRIO-xxxx-xxxxxxxx" rott tree can be renamed
            Save the project

    /////////////////////////////////////
    2. Create FPGA-Main.vi
        
        Create new VI
            From Project Panel > FPGA-App.lvproj root tree > myRIO > Chassis > FPGA Target
            Right click on FPGA Target > New > VI
            Save as FPGA-Main.vi
            Change Icon and properties
                In Front Panel, double click on icon (Top right hand corner)
                    Icon Text Tab
                        Line 1: FPGA
                        Line 2: Main
                        Click on "Selection" icon (dotted line box)
                        Box select the white area in image
                        Click OK

        FPGA-Main.vi
            Front Panel
                Add Button (Rename to Pause)
                    Right click > Silver > Boolean > Push Button
                Add LED (Silver) - 3x
                    Right click > Silver > Boolean > LED
                Add Timer control (Added from Block Diagram) - 
                    Rename "Count(mSec)" to "Loop Time [ms]"   
            Block Diagram
                Add While Loop (Process Loop #1)
                    Right click > Programming > Structures > While Loop
                    Enable Subdiagram Label
                        Right click on top box > Visible Items > Subdiagram Label
                        Rename to "Process Loop #1"
                    Add constant for While Loop stop button, set to False
                    Add Timer
                        Right click > Programming > Timing > Wait
                            Counter Units: mSec
                            Internal Counter size: 32bit
                        Create Control on input
                            Right click on input > Create > Control
                            Name this "Loop Time [ms]"
                    Add "Button" from Project Tree panel (Drag and drop)
                        Project Tree Panel > Items Tab > Project > Chassis > FPGA Target > Onboard IO > Button0 
                    Add Pause button node (Added from Front Panel)    
                    Add OR gate
                        Right click > Programming > Boolean > OR
                        OR gate inputs will be linked to the output of Pause button and Onboard IO button
                        OR gate output will be linked to the input of NOT gate 1
                    Add NOT gate 1
                        Right click > Programming > Boolean > NOT 
                        NOT input will be linked to OR gate output (branch)
                        NOT output will be linked to XOR gate input
                    Add XOR gate
                        Right click > Programming > Boolean > Exclusive OR
                        XOR input 1 will be linked to the output of Feedback Loop
                        XOR output will be linked to the input of Feedback Loop
                        XOR input 2 will be linked to the output of NOT gate 1       
                    Add Feedback Loop
                        Right click > Programming > Structures > Feedback Node
                        Right click on feedback node and select Change direction
                        Feedback Loop output will be branched out to both XOR gate input and NOT gate input
                    Add NOT gate
                        Right click > Programming > Boolean > NOT 
                        NOT input will be linked to Feedback Loop output (branch)
                    Add LED 2
                        Project Tree Panel > Items Tab > Project > Chassis > FPGA Target > Onboard IO > LED2
                        LED2 second input will link to the output of Feedback Loop that links to the input of XOR input 1
                    Add LED 3
                        Project Tree Panel > Items Tab > Project > Chassis > FPGA Target > Onboard IO > LED3
                        LED2 second input will link to the output of NOT gate
                    Add LED 1
                        Project Tree Panel > Items Tab > Project > Chassis > FPGA Target > Onboard IO > LED1
                        LED2 second input will link to the output of OR gate                
                    Add LED  (Added from Front Panel) - Rename to "LEDa"
                        LED input will be linked to second input of LED2 (Branch)
                    Add LED  (Added from Front Panel) - Rename to "LEDb"
                        LED input will be linked to second input of LED3 (Branch)
                    Add LED  (Added from Front Panel) - Rename to "Paused"
                        LED input will be linked to second input of LED1 (Branch)
                    LED Blinker - Blink the board        
                    | Process Loop #1------------------------------------------------------------------------------------|
                    |                                                                                                    |
                    |                                                                    Loop Time                       |
                    |                                                                       U32 ------------ Timer(Wait) |
                    |                                                                                                    |
                    |                                                                         LEDa                       |
                    |                                                                    +-----TF                        |
                    |                                                                    |                               |
                    |                              +-----------------------+-------------+----------- LED2               |
                    |                              |                       |                  LEDb                       |
                    |  Button0 ----|               |                       |             +-----TF                        |
                    |              +               +            Feedback   |             |                               |
                    |    Paused    +--|OR|---+NOT--+|XOR|--------Loop------+----NOT------+----------- LED3               |
                    |      TF------|               |                                         paused                      |
                    |                              |                                     +-----TF                        |
                    |                              |                                     |                               |
                    |                              +-------------------------------------+----------- LED1               |
                    |                                                                                                    |
                    |----------------------------------------------------------------------------------------------------|

                Add Timed Loop (Process Loop #2)
                    Right click > Programming > Structures > Timed Structure > Timed Loop
                    Enable Subdiagram Label
                        Right click on top box > Visible Items > Subdiagram Label
                        Rename to "Process Loop #1"
                    Add constant for Timed Loop stop button, set to False
                    Ticks:
                        
                    Add Feedback Loop
                        Right click > Programming > Structures > Feedback Node
                        Right click on feedback node and select Change direction
                    Add Select Node
                        Right click > Programming > Comparison > Select
                    Add Equal to 0 Node
                        Right click > Programming > Comparison > Equal to 0
                    Add Numeric Constant - Unsigned Long (U32)
                        Right click > Programming > Numeric > Numeric Constant
                        Convert to Unsigned Long (U32)
                            Right click on output > Representation > U32
                        Change value to "39,999,999" - This represents 40MHz clock, or 40 million cycles per second
                    Add Decrement
                        Right click > Programming > Numeric > Decrement
                    Add Less
                        Right click > Programming > Comparison > Less?
                        Less Node input 1 linked to output of Feedback Loop (Branch)
                        Less Node input 2 linked to constant 5,000,000    //If counter is valued below 5 million, then activate LED 0
                    Add LED 0
                        Project Tree Panel > Items Tab > Project > Chassis > FPGA Target > Onboard IO > LED0
                        LED0 second input will link to the output of Less Node     
                    Add LED  (Added from Front Panel) - Rename to "Paused"
                        LED input will be linked to second input of LED1 (Branch)

                    FPGA is alive blinker - LED blinks once per second    
                    | Process Loop #2---------------------------------------------------------------------|
                    |                                                                                     |
                    |             40MHz down counter                                                      |
                    |           +---------------------------------------------------+                     |
                    |           |                                                   |                     |
                    |           |    39999999--------+                              |                     |
                    |           |                    |                   >          |                     |
                    |           |                    +                Feedback      |   <                 |
                    |           +------EqualTo0------+ SelectNode------+Loop--------+ Less----LED0        |
                    |           |                    +                              +                     |
                    |           |                    |                              |                     |
                    |           +------Decrement-----+            5000000-----------+                     |
                    |                                                                                     |
                    |-------------------------------------------------------------------------------------|

    /////////////////////////////////////
    3. Create FPGA-testbench.vi

        Create new VI
            From Project Panel > FPGA-App.lvproj root tree > myRIO > Chassis > FPGA Target
            Right click on FPGA Target > New > VI
            Save as FPGA-testbench.vi
            Change Icon and properties
                In Front Panel, double click on icon (Top right hand corner)
                    Icon Text Tab
                        Line 1: FPGA
                        Line 2: Test
                        Line 2: Bench
                        Click on "Selection" icon (dotted line box)
                        Box select the white area in image
                        Click OK

        FPGA-testbench.vi
            Front Panel
                Add 2 Rounded box to place the controls
                    Right Click > Silver > Decorations > Rounded Box
                    Rounded Box 1: Onboard Devices
                        > Button0 (Added from Block Diagram)  
                        > LED 0:3 (Added from Block Diagram)  
                    Rounded Box 2: Front panel Control and Indicators
                        > Pause Button (Added from Block Diagram)  
                        > Loop Time (U32) (Added from Block Diagram)  
                        > Paused LED (Added from Block Diagram)  
                        > LEDa (Added from Block Diagram)  
                        > LEDb (Added from Block Diagram)  
                Add While Loop Stop button (Added from Block Diagram)  
                
            Block Diagram
                Add While Loop
                    Add Control for While Loop Stop button
                        Right Click > Create > Control
                    Add Time (Wait)
                        Right Click > Programming > Timing > Wait (ms)
                        Add Constant
                            Right click on input > Create > Constant
                            Constant: 100
                    Add FPGA Desktop Execution Node
                        Right Click > FPGA Interface > FPGA Desktop Execution Node
                        Desktop Execution Node Configuration Window will appear
                            VI: Browse and select FPGA-Main.vi from Project > myRIO > Chassis > FPGA Target 
                            Terminal Configuration: 
                                Open FPGA-Main.vi
                                    Select all (Pause, LEDa, LEDb, Loop Timer)
                                    Move to the other window
                                Open FPGA Target > Onboard IO
                                    Select Button0, LED0, LED1, LED2, LED3
                                    Move to the other window
                                    Change LED0-3 Direction to "Out" from "In/Out"
                        Add Controls
                            Right click on Pause/LoopTime/Button0 > Create > Controls
                            See Front Panel for the placements
                        Add Indicators
                            Right Click on Paused/LEDa/LEDb > Create > Indicator
                        Add Array
                            Right Click > Programming > Array > Build Array
                            Expand Build Array Node to 4 sections
                            Link LED0, LED1, LED2, LED3 to the inputs of Build Array Node
                            Add Indicator
                                Right click on output node > Create > Indicator
                                Rename indicator to "LED 0:3"

    /////////////////////////////////////
    4. Test/debug FPGA-Main.vi
        
        Start Simulation
            In Project Tree Panel > Right click on FPGA Target (myRIO > Chassis > FPGA Target)
            Select Execution Mode > Simulation
            Run FPGA-testbench.vi (Front Panel)
                Click on Button on Onboard Devices panel, FPGA-Main.vi will run
                Check and Test
                
    /////////////////////////////////////
    5. Compile FPGA-Main to bitstream file

        In Project Tree Panel > Right click on FPGA Target (myRIO > Chassis > FPGA Target)
        Select Execution Mode > FPGA Target
        In FPGA-Main.vi Front Panel, click on Run and "Select Compile Server" window appears
            Check "use local compile server"
            Check "Prompt to select a compile server for each compilation"
            Click OK and "Compile Status" window will appear
            Click on "Close" button to let the compilation run in the background

    /////////////////////////////////////
    6. Create and deploy shared variables to RT Target (*.lvlib)

        In Project Tree Panel > Right click on "NI myRio" (Project Root Tree > NI myRIO) > New > Variable
        Shared variable properties window appear
            Variable
                Name: LEDa
                Variable Type: Network Published
                Data Type: Boolean
            Click OK and a "Variable Library" will be created under "myRIO" in Project Tree
        Right Click on "Variable Library" > New > Variable
        Shared variable properties window appear
            Variable
                Name: LEDb
                Variable Type: Network Published
                Data Type: Boolean
        Create other variables for 
            Loop Time (Data Type: UInt32), 
            Pause (Boolean), 
            Paused (Boolean), 
            Stop (Boolean)
        Save project Tree (A prompt will appear to save the Library)
        Save Library as FPGA-App.lvlib
        Set Library as "public" and Deploy (Other project can access the library)
            Project Tree Window > Main Menu > Tools > Shared Variables > Register Computer
            Machine Name / IP Address: 172.22.11.2        //Network Address
            Deploy Library
                In Project Tree, right click on Library tree and select "Deploy All"
        Check NI Distributed System Manager  window
            Project Tree Window > Main Menu > Tools > Distributed System Manager
            Directory > Network Items > 172.22.11.2 > FPGA-App >
                All variables will be listed
                The current state of individual variables is reflected
                These variables can be forced ON/OFF via NI Distributed System Manager

    /////////////////////////////////////
    7. Create RT-Main.vi

        Create new VI
            From Project Panel > FPGA-App.lvproj root tree > myRIO
            Right click on myRIO > New > VI
            Save as RT-Main.vi
            Change Icon and properties
                In Front Panel, double click on icon (Top right hand corner)
                    Icon Text Tab
                        Line 1: RT
                        Line 2: Main
                        Click on "Selection" icon (dotted line box)
                        Box select the white area in image
                        Click OK
            
        RT-Main.vi
            Front Panel:
                Just Double Click and add a name "RT Main"
            Block Diagram:
                Add Flat Sequence (Left Frame and Right Frame)
                    Enable Subdiagram Label
                        Right Click on top border > Label > Subdiagram Label
                        Left Frame: Initialize NPSVs
                    Right Click > Programming > Structures > Flat Sequence
                    Right Click on right side border > Select "Add Frame After" (To add Right Frame)
                Add FPGA-App.lvlib variables
                    From Project tree panel, drag and drop variables into the corresponding frames
                    Left Frame
                        Loop Time 
                            Change Access Mode to Write - Right Click on Node > Access Mode > Select Write
                            Create constant for input 1, Constant = 100
                        Pause - Create constant for input 1, Constant = False
                        Stop - Create constant for input 1, Constant = False
                    Right Frame    
                        Add FPGA VI Reference
                            Right Click > FPGA Interface > Open FPGA VI Reference
                            Double click on node to open configuration window
                                Check the checkbox on VI section
                                Click browse on VI section
                                Select FPGA-Main.vi and click on OK
                                Check "Run the FPGA VI" and "Dynamic Mode" checkboxese
                                Click OK
                        Add While Loop        
                            Add Stop 
                                From Project tree panel, drag and drop Stop
                                Link output to the input of While Loop Stop node
                            Add Read/Write Control        
                                Right Click > FPGA Interface > Read/Write Control
                                Link Read/Write Control Node Input 1 (Reference In) to FPGA Reference Node Output 1 (Reference Out) 
                                Expand on "Unselected" box downwards to form an array
                                    Loop Time
                                    Pause
                                    LEDa
                                    LEDb
                                    Paused
                            Add Loop Time 
                                From Project tree panel, drag and drop Loop Time
                                Change Access Mode to Read - Right Click on Node > Access Mode > Select Read
                                Link output to "Loop Time" input on Read/Write Control Node
                            Add Pause - Create constant for input 1, Constant = False    
                                From Project tree panel, drag and drop Pause or Copy/Paste Pause from Left Frame
                                Link output to "Pause" input on Read/Write Control Node
                            Add LEDa, LEDb and Paused from Library and linked to the Read/Write Node output
                        Add "Close FPGA VI Reference"
                            Right Click > FPGA Interface > Close FPGA VI Reference and place outside While Loop
                            Link Reference In to Reference Out on Read/Write Node
                            Right Click on Node and select "Close and Reset of Last Reference"
            Diagram:
                |-------Initialize NPSVs--------||-----------Right Frame----------------------------------------------------------|
                |                               ||                                                                                |
                |      100---'Loop Time         ||                    +----While Loop-------------------------+                   |
                |                               ||                    |                                       |                   |
                |      F---'Pause               ||      FPGA Main ----+---------------|Read/Write |-----------+-----Close FPGA    |
                |                               ||                    |               |           |           |                   |
                |      F---'Stop                ||                    | 'LoopTime-----+--LoopTime |           |                   |
                |                               ||                    |    'Pause-----+--Pause    |           |                   |
                |                               ||                    |               | LEDa      +---'LEDa   |                   |
                |                               ||                    |               | LEDb      +---'LEDb   |                   |          
                |                               ||                    |               | Paused    +---'Paused |                   |
                |                               ||                    |               |-----------|           |                   |
                |                               ||                    |                           'Stop--|O|  |                   |
                |                               ||                    +---------------------------------------+                   |
                |                               ||                                                                                |
                |-------------------------------||--------------------------------------------------------------------------------|
                Legend: Apostrope means from Project Tree Library

        Running the Program
            From RT-Main.vi Front Panel, click on Run
            Physical LEDs on myRIO (LED0-3) will be blinking
            Open Distributed System Manager for simulation
                RT-Main.vi > Main Menu > Tools > Distributed System Manager
                Slow down blink rate
                    Select Pause, set to True and click on Set
                    Select Loop Time
                    New Value: 500 //Change from 100
                    Click on Set
                    Select Pause, set to False and click on Set
                Press physical myRio button and LED1 will light up
                Shuts down VI 
                    Select Stop, set to True and click on Set
                    All LEDs will be OFF

    /////////////////////////////////////
    8. Create PC-Main.vi

        Create new VI
            From Project Panel > FPGA-App.lvproj root tree > My Computer
            Right click on My Computer > New > VI
            Save as PC-Main.vi
            Change Icon and properties
                In Front Panel, double click on icon (Top right hand corner)
                    Icon Text Tab
                        Line 1: PC
                        Line 2: Main
                        Click on "Selection" icon (dotted line box)
                        Box select the white area in image
                        Click OK

        PC-Main.vi
            Front Panel
                Add Pause Button
                Add Pause LED
                Add LEDa
                Add LEDb
                Add Horizontal Pointer Slide (Silver > Numeric)
                    Rename this to Loop Time
                    Right Click  > Representation > U32
                    Set Slider 10-1000 from the default 10-0
                    Enable visual display
                        Right click > Visible items > Digital Display
                    Make Selected values default
                        Highlight the display > Main Menu > Edit > Make Selected Values Default
                    Logarithmic
                        Right Click > Mapping > Logarithmic
                Add Cancel Button   
                    Right Click > Silver > Boolean > Cancel Button
                    Rename to "Stop RT Main"
                Add Titile "PC HMI"    
            Block Diagram
                Add Flat Frame
                    Right Click > Programming > Structures > Decorations > Flat Frame
                    Add Title "Controls and Indicators bound to Shared Variables"
                    LoopTime (From Front Panel) - Write
                        Right click > Properties
                        Open Data Binding Tab
                            Data Binding Selection: Shared Variable Engine (NI-PSP)
                            Path section click on browse
                                Network Published Source: Network Items
                                Open 172.22.11.2 > FPGA-App
                                    Select Loop Time
                            Access Type: Write only  
                            Click OK
                    Pause (From Front Panel) - Write
                        The process to configure Loop Time can also be done via "Mass Configuration"
                            Main Menu > Tools > Shared Variable > From Panel Binding Mass Configuration
                            Select "Pause" and click on Edit
                            Same principles applies
                            Do the same with StopRTMain, Paused, LEDa and LEDb
                    StopRTMain (From Front Panel) - Write
                    Paused (From Front Panel) - Read
                    LEDa (From Front Panel) - Read
                    LEDb (From Front Panel) - Read
                Add While Loop
                    Add Control (Stop) for While Loop Stop
                    Add Titile "Idle Loop - Keep VI running until Stop is pressed"
                    Add Event Structure
                        Right Click > Programming > Structures > Event Structure
                        Right Click on Border and select "Edit Events Handled by This Case"
                        Edit Events window will appear
                            Add Stop button to the Left Panel List by selecting on "Controls > Stop" on Event Sources list
                            Click on OK
                    Move the created While Loop Stop button to inside Event Structure and extend it to the While Loop Stop 

            Diagram
                |-------------------------------------------------------------------------------|
                |                                                                               |
                |   |--------------|      |---While Loop------------------------------------|   |
                |   | Loop Time    |      |                                                 |   |
                |   | Pause        |      |   |-----------Stop Button----------|            |   |
                |   | StopRTMain   |      |   |                                |            |   |
                |   | Paused       |      |   |Source                          |            |   |
                |   | LEDa         |      |   |Type               StopButton---+----+       |   |
                |   | LEDb         |      |   |Time                            |    |       |   |
                |   |--------------|      |   |--------------------------------|    |       |   |
                |                         |                                         +--|O|  |   |
                |                         |-------------------------------------------------|   |
                |                                                                               |
                |-------------------------------------------------------------------------------|
                
            Run Program
                From Front Panel of RT-Main.vi, run program
                From Front Panel of PC-Main.vi, run program
                    LED on PC-Main.vi HMI will reflect the LEDs on myRIO 
                    Click on Pause and all LEDs will follow
                    Increase Loop Time to Slow down the blink rate
                    Click StopRTMain and LEDs on myRIO will OFF
                    Click Stop to Stop the VI
      
    /////////////////////////////////////
    9. Set RT-Main.vi as startup VI

        When myRIO starts or reboots, it will start RT-Main.vi
        In Project Tree Window
            Right click on "Build Specifications" > New > Real-Time Application
            My Real Time application Properties Window will Appear
                Source File
                    Select RT-Main.vi in Project Files column
                    Add item to Startup VIs panel
                Click on Build
                "My Real Time Application" will appears under "Build Specification" in Project Tree
            Right Click on My Real-Time Application > Select Run as Startup
            Proceed with Reboot to launch
            Enter admin credentials
            myRIO will automatically launch app after reboot
            Just run PC-Main.vi to play around with the input values


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20. State Machine Principles
    
    Use Project Explorer
    While Loop: Similar to While Loops in Javascript
    Case Structure: Similar to Switch Case in Javascript
    Event Structure: Similar to eventHandler in Javascript
    Structure principles are the same as how Mobile Apps or any other apps are created (See React Apps)
    Rearrange Case Structures
        Right Click on border > Rearrange Cases

    Diagram:
        |                   
        |                 |------While Loop---------------------------------------------------------|
        |                 |                                                                         |
        |                 |                |---Case Structure----------------------------------|    |
        |   Initialize----|----------------|                                                   |    |
        |                 |                |  |-----Event Structure------------------------|   |    |
        |                 |                |  |                                            |   |    |
        |                 |                |  |                                Event Loop--|---|----|
        |                 |                |  |                                            |   |    |
        |                 |                |  |                                            |   |    |
        |                 |                |  |                                            |   |    |
        |                 |                |  |                                            |   |    |
        |                 |                |  |                                            |   |    |
        |                 |   Tab Control--|  |--------------------------------------------|   |    |
        |                 |                |                                                   |    |
        |                 |                |---------------------------------------------------|    |
        |                 |                                                                         |
        |                 |-------------------------------------------------------------------------|
        |

    Disk Folder
        ../StateMachine/StateMachine.lvproj
        ../StateMachine/StateMachine.lvlps
        ../StateMachine/StateMachine.aliases
        ../StateMachine/MainVI/LabviewMainApplication.vi
        ../StateMachine/SubVIs/ConvertToFahrenheit.vi
        ../StateMachine/SubVIs/NewSensor.vi
        ../StateMachine/Images/Temp.ico
        ../StateMachine/Resources/ *Empty*

    Project Explorer (Save as StateMachine.lvproj)
        Add folders to Project explorer after creation if project
        My Computer
            Images
                Temp.ico
            MainVI
                LabviewMainApplication.vi
            Resources
            SubVIs
                ConvertToFahrenheit.vi
                NewSensor.vi
            Build Specifications
                LabviewApp

    StateMachineTemplate.vi
        This Template can be used in SubVI and MainVI
        Front Panel
            Add Error Handlers (In)
                Right Click > Silver > Data Containers > Error In
            Add Error Handlers (Out)
                Right Click > Silver > Data Containers > Error Out
        Block Diagram
            Error Handlers
                Error Handler (In)
                    Link to While Loop Left Border (Shift Register)
                Error Handler (Out)
                    Link to While Loop Right Border (Shift Register)
                Linking (Do for all cases)
                    Error In > While Loop (Left) > Case Structure (Left, Wait) > Event (Timeout) > Case Structure (Right, Wait) > While Loop (Right) > Error Out
                    Link all the way through for other Case Structures (Initialize, Template, Exit )
            Add String Constant (Initialize) - Outside While Loop
                Right Click > Programming > String > String Constant
                Link to Shift Register (While Loop Left Border)
            Add While Loop
                Right Click > Programming > Structures > While Loop
                Right Click on Left Border > Add Shift Register
                    Link Shift Register to Case Structure Left Border
                Link Stop to Case Structure border    
                Add Case Structure
                    Right Click > Programming > Structures > Case Structures
                    Link Left Border to Left Border of While Loop
                    Link Right Border of Case Structure to Right Border of While Loop    
                    Link Border to While Loop Stop
                    Initialize
                        Add String Constant (Wait)
                            Link "Wait" to Right Border of Case Structure
                        Add Boolean constant
                            Right Click > Programming > Boolean > False Constant
                            Link to While Loop Stop
                    Wait (Set as Default)
                        Add Event Structure
                            Right Click > Programming > Structures > Event Structure
                            Timeout
                                Add Timeout constant (Top left corner of event structure)
                                    Set to 100
                                Add String Constant (Initialize)
                                    Link "Initialize" to Right Border of Case Structure
                                Add Timer (Wait) 
                                    Set Constant to 100
                        Add Boolean constant
                            Right Click > Programming > Boolean > False Constant
                            Link to While Loop Stop
                    Template
                        Similar to Initialize
                    Exit
                        Add Boolean constant
                            Right Click > Programming > Boolean > True Constant
                            Link to While Loop Stop
                        Add String Constant (Wait)
                            Link "Wait" to Right Border of Case Structure


    MainApplication.vi (Extended from StateMachineTemplate.vi)
        Front panel 
            Add Listbox
                Rightclick > Silver > List,Table,Tree > Listbox
                Rename label to Sensorlist
            Add Vertical Pointer Slide
                Rightclick > Silver > Numeric > Vertical Pointer Slide
                Rename label to Celsius
                Enable digital display
                    Rightclick on Slide > Visible Items > Digital Display
            Add Thermometer
                Rightclick > Silver > Numeric > Thermometer
                Rename label to Fahrenheit
                Enable digital display
                    Rightclick on Slide > Visible Items > Digital Display
            Add "Add Button" (For Listbox)
                Rightclick > Silver > Numeric > Boolean > Buttons > Add Button
                Rename label to New Button
            Add "Cancel Button"
                Rightclick > Silver > Boolean > Cancel Button
                Rename label to Exit
        Block Diagram
            Inherited from Front Panel
                New Button, Exit Button, Fahrenheit, Celsius, Sensorlist
            Case Structure > Wait
                Event Structure
                    Create new Event Case
                        Right click on border > Add Event Case
                        Select "New Button"
                Event Structure > New Button
                    Add string constant "New Sensor" to the right border
                Event Structure > OK Button (From existing OK Button Node)
                    Create new Event Case
                        Right click on border > Add Event Case
                        Event Sources: OK Button
                        Events: Value Change
                        Place OK button Node
                        Add String Constant (OK) and link to Right border
                Event Structure > Cancel Button (From existing Cancel Button Node)
                    Create new Event Case
                        Right click on border > Add Event Case
                        Event Sources: Cancel Button
                        Events: Value Change
                        Place Cancel button Node
                        Add String Constant (Cancel) and link to Right border
            Case Structure > New Sensor (New Case Structure from Template Case)
                In Template Case, Right click > Duplicate case to add new case
                Rename to "New Sensor"
                Add NewSensor.vi (Drag and drop) - Also add this file  to Project Explorer
                    Right Click on NewSensor.vi Node > Select VI Properties
                    VI Properties
                        Category: Window Appearance
                            Click on Customize
                            Customize Window:
                                Checked checkboxes
                                    Window has title bar
                                    Show front panel when called
                                    Close afterwards if closed
                                    Show front panel when loaded
                                    Window Behavior: Modal
                                    Allow user to close window
                        Category: Execution
                            Checked checkboxes
                                Allow Debugging
                                Reentrancy: Non-reentrant execution
                                Priority: Normal Priority
                                Preferred Execution System: Same as Caller
                                Enable automatic error handling
                                Auto handle menus at launch

    NewSensor.vi (Extended from StateMachineTemplate.vi)
        Added to "New Sensor" Case Structure
        Front Panel
            Add String Control
                Rightclick > Silver > String & Path > String Control
                Rename Label to SensorName
                Hide Label and show caption 
                Caption : Sensor Name
            Add OK Button
                Rightclick > Silver > Boolean > OK Button
            Add Cancel Button
                Rightclick > Silver > Boolean > Cancel Button
            Add String Indicator
                Rightclick > Silver > String & Path > String Indicator
                Rename Label to SensorNameOutput
            Add Enum
                Rightclick > Silver > Ring and Enum > Enum
                Rename label to Status
                Type in "OK"
                Right click > Add Item After
                Type in "Cancel"
        Block Diagram
            Note that the NewSensor.vi Node will appear in MainApplication.vi
        Node Configuration (Boxes next to Icon Image - Top Right corner)
            |           +----+----+----+----+
            | Empty     |    |    |    |    |  Status
            |           +----+    |    |----+
            | Empty     |    |    |    |    |  SensorNameOutput
            |           +----+----+----+----+
            | Empty     |    |    |    |    |  Empty
            |           +----+    |    |----+
            | Error In  |    |    |    |    |  Error Out
            |           +----+----+----+----+
            



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[END]

























