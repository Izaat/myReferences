//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OPC-UA
IOT Overview https://www.youtube.com/watch?v=QRBMVngtVhA
Gateways:
    Siemens IOT2040 Connecting to S71200: https://www.youtube.com/watch?v=buuvrdR0OX4
    Siemens IOT2050 Overview: https://www.youtube.com/watch?v=gEe8FVaR2Zo
    Siemens IOT2050 SD Card image: https://support.industry.siemens.com/cs/document/109780231/simatic-iot2050-sd-card-example-image?dti=0&lc=en-WW
More Python Programs: https://github.com/Izaat/references/tree/main/Python%20References

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Installation
02. Server
03. Client
04. RPi OPC Server
05. RPi OPC Client
06. Changing Server values from client & controlling LEDs
07. OPC-UA Server Security with Username and Password
09. Designing IOT Dashboard for OPCUA Client, Server
10. Control S7-1200 with IoT2040 - node-red, ubidots

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Installation

    Architecture
        Address Space >
            Node 1
                Var 1 (Temperature)
                Var 2 (Pressure)
                Var 3 (Time)
            Node 2
            Node 3

    Installation 
        FreeOPCUA
            https://github.com/FreeOpcUa/python-opcua
        Python 3.5 required
        Go to Python installation directory
        Enter 'scripts' folder
        C:\>Python3.5\Scripts>pip3 install freeopcua
        C:\>Python3.5\Scripts>pip3 install cryptography
        

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Server

    Write a simple server code for OPC UA
    Create a new project in VSCode with Python 3.5
    Name this project "OPCUAServer"
    Under the project tree, create a new file and name this file "server.py"

    Server.py (Skeleton)
        from opcua import Server
        
        server = Server()
        url = "opc.tcp://192.168.0.8:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SIMULATION_SERVER"
        addspace = server.register_namespace(name)

        node = server.get_objects_node()                            //Assign root node
        
        Param = node.add_object(addspace, "Parameters")

        Temp = Param.add_variable(addspace, "Temperature", 0)  //Add variable, assign addspace, name it temperature, assign initial value of 0
        Press = Param.add_variable(addspace, "Pressure", 0)  //Add variable, assign addspace, name it pressure, assign initial value of 0
        Time = Param.add_variable(addspace, "Time", 0)  //Add variable, assign addspace, name it time, assign initial value of 0

        Temp.set_writable()                                  //Set variable as writable
        Press.set_writable()                                 //Set variable as writable
        Time.set_writable()                                  //Set variable as writable

        server.start()
        print("Server started at {}".format(url))


    Server.py (CODE)
        from opcua import Server
        from random import randint                           //Importing random to inject random values into while loop
        import datetime                                      //Importing time to inject current date and time into while loop
        import time                                          //Importing time for the time delay in while loop
        
        server = Server()
        url = "opc.tcp://192.168.0.8:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SIMULATION_SERVER"
        addspace = server.register_namespace(name)

        node = server.get_objects_node()        
        
        Param = node.add_object(addspace, "Parameters")

        Temp = Param.add_variable(addspace, "Temperature", 0)  
        Press = Param.add_variable(addspace, "Pressure", 0) 
        Time = Param.add_variable(addspace, "Time", 0) 

        Temp.set_writable()            
        Press.set_writable()                     
        Time.set_writable()                          

        server.start()
        print("Server started at {}".format(url))

        while True:                                             //Assigning random values to Temp, Press and Time
            Temperature = randint(10, 50)                       //Generates random value from 10 to 50
            Pressure = randint(200, 999)
            TIME = datetime.datetime.now()

            print(Temperature, Pressure, TIME)

            Temp.set_value(Temperature)
            Press.set_value(Pressure)
            Time.set_value(TIME)

            time.sleep(2)                                       //Delay for 2 seconds


    Display:
        12 906 2021-07-23 12:00:25.123465
        where 
            12 is temperature,
            906 is pressure
            and the reset is time
            Note: the values will keep on generating

    NOTE: For more simulation code, Google for "opc ua simulation server"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Client

    Writing a client code to write into the server
    Using UAExpert to connect to server
        https://www.unified-automation.com/products/development-tools/uaexpert.html
    Download and install the free UAExpert software
    Once installed, run the server code from Topic 2
    Start UAExpert
    Create a new project folder and name this folder as "OPCUAClient"
    Create a new file and name this file as "client.py"
        ../OPCUAClient/client.py
        Note that ../OPCUAServer shares the same parent folder as ../OPCUAClient
    
    UAExpert Software
        In main toolbar, click on the "+" icon to add server
        Add server window will appear
            Open "Advanced" tab
            Server Information section
                Endpoint Url: opc.tcp://192.168.0.8:4840
        In Project Panel (Left hand side panel)
            Project > Servers > Empty server >
                Right click > Click on "Connect"
                A folder tree will appear in the Address Space Panel 
        Address Space
            Root > Objects > Parameters >
                Pressure
                Temperature
                Time
            Drag and drop all the 3 subtrees (Pressure, Temperature, Time) into the Main viewport "Data Access View" tab
            Take note of the Node IDs for the 3 variables
                Pressure: NS2 |Numeric| 3
                Temperature: NS2 |Numeric| 2
                Time: NS2 |Numeric| 4

    client.py
        from opcua import Client
        import time
        
        url = "opc.tcp://192.168.0.8:4840"        
        client = Client(url)
        client.connect()
        print("Client connected")
        
        while True:
            Temp = client.get_node("ns=2;i=2")
            Temperature = Temp.get_value()
            print(Temperature)

            Press = client.get_node("ns=2;i=3")
            Pressure = Press.get_value()
            print(Pressure)

            TIME = client.get_node("ns=2;i=4")
            TIME_Value = TIME.get_value()
            print(TIME_Value)

            time.sleep(1)

    Run client.py and compare with server.py
    Both values on server.py and client.py should be in sync


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. RPi OPC Server

    Using RPi as server
    Connect PC to RPi via ethernet
    Use VNC Weaver software to connect to RPi and boot up RPi
    Enter RPi terminal
        Update: sudo apt-get update
        Install libraries: sudo apt-get install libxml2-dev libxmlsec1-dev libffi-dev
        Install cryptography: sudo pip3 install cryptography
        Install FreeOPCUA: sudo pip3 install freeopcua
        Once everything is installed, run python
        Run python: python3
            >>> from opcua import Client
            Note: If it returns ">>>", then installation completed
        Exit python: >>> exit
        Check IP Address: ifconfig
            Take note of the "eth0" IP Address 
            Rpi: inet 169.254.1.93 netmask 255.255.0.0
            PC: eth0 > 169.254.1.93
        Copy paste server.py into RPi 
            Change the IP address to eth0 IP address
            Check: sudo nano server.py
                //url = "opc.tcp://192.168.0.8:4840"     //Old IP
                //url = "opc.tcp://169.254.1.93"           //New IP
        Close server.py editor
        Run server.py: python3 server.py
        Once the program starts, open UAExpert in PC
        
    UAExpert
        In main toolbar, click on '+' to add a server
        In Add Server window, open Advanced Tab
        In Server information section, change the endpoint url
            Endpoint url: "opc.tcp://169.254.1.93"
            Click OK
        In Project Panel, Right click on empty server
            Left Hand Panel > Project Tree > Project > Servers > Empty Server
            Right click and select 'Connect'
        Drag and drop the Parameter > Variables into the Data Access View tab

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. RPi OPC Client
    
    Use VNC Viewer to view RPi
    Using RPi as Client
        Install simple UI-Client application to RPi to view the parameters in RPi
            sudo apt-get install python3-pyqt5
        Install OPCUA Client application
            sudo pip3 install opcua-client
    In Windows, run server.py
        The IP Address is eth0 - ref to Topic 3
    In RPi terminal, start client
        opcua-client
        An OPCUA Client window will open
    OPCUA Client window
        Change the "localhost" to IP Address
        IP Address: opc.tcp://192.168.0.8:4840
        Click on Connect
        The node tree will appear in the list
        Root > Objects > Parameters >
            Pressure
            Temperature
            Time
        The updated values will appear in the Attributes section 
            Highlight the Parameters
            Attribute Section > Attribute > Value > Value
            Click on Refresh to see the updates

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Changing Server values from client & controlling LEDs

    Change Server's values and variables from the Client
    After retrieving the Server data, LEDs will controlled
    Server will be hosted on RPi and with LED connected
    Client will be the PC
    
    PART 1
    /////////////////////////////////////////
    /////////////////////////////////////////
    Start Thonny Python IDE in Rpi
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10)    //Add 10 to the variable and this value will be changed from Client side
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)           //Set pin 18 as output

        while True:
            t = var.get_value()                    //Get the value "10" from variable
            print("Value is {}".format(t))    
            time.sleep(1)

    Start VSCode and create a python file
    Remember to install the components to the project
    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")
        print("Initial value: {}".format(var.get_value()))

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "10"
    Start client code
        "10" will be printed out in the console


    PART 2
    /////////////////////////////////////////
    /////////////////////////////////////////
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10) 
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)        

        while True:
            t = var.get_value()         
            print("Value is {}".format(t))    
            time.sleep(1)

    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")
        print("Initial value: {}".format(var.get_value())) 
        
        var.set_value(0)                                                                  //This will change the value in server

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "10"
    Start client code
        "10" will be printed out in the console
        But 0 will be printed out in server side
        Change value from 0 to 1 and run the client again
        This time 0 will be printed out as initial value and 1 will be printed out in server side

    PART 3 (Controlling the LED from the client)
    /////////////////////////////////////////
    /////////////////////////////////////////
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10) 
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)        

        while True:
            t = var.get_value()         
            //print("Value is {}".format(t))    
            if t == 1:
                GPIO.output(18, GPIO.HIGH)
                print("LED is ON")
            elif t == 0:
                GPIO.output(18, GPIO.LOW)
                print("LED is OFF")                
            time.sleep(1)

    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")        
        var.set_value(0)                                    //This will control the LED, 1=ON, 0=OFF

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "LED IS ON"
    Start client code
        Change the "var.set_value" to 1 or 0 and then run code 
        This will control the LED


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. OPC-UA Server Security with Username and Password
    
    Adding Username and Password to access Server
    Generic OPC UA Connection
        Server  <------>  Client
    OPC UA with Security Layer
        Server <----> Security Layer (Server) <----> Security Layer (Client) <----> Client

    ////////////////////////////////////////////////////
    Server.py (Part 1) - Server Side
        from opcua import server
        import time
        from random import randint
        
        server = Server()
        url = "opc.tcp://192.168.0.102:4841"
        server.set_endpoint(url)
        
        name = "OPC UA SIMULATION SERVER"
        add_space = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(add_space, "PARAMETERS")
        
        temp = param.add_variable(add_space, "Temperature", 0)
        temp.set_writable()
        server.start()
        print("Server started at {}".format(url))

        while True:
            temperature = randint(10, 50)
            temp.set_value(temperature)
            time.sleep(1)
            
    ////////////////////////////////////////////////////
    Client.py - Client Side
        from opcua import Client
        import time
        
        url = "opc.tcp://192.168.0.102:4841"
        client = Client(url)
        client.connect()
        
        while True:
            temp = client.get_node("ns=2;i=2")
            temp_value = temp.get_value()
            print("Temperature is {}".format(temp_value))
            time.sleep(1)
            
    ////////////////////////////////////////////////////
    OpcServerSecurity.py - Server Side
        #1. Initialize Server socket
        #2. Set username and password of the server
        #3. Client authentication
        #4. Check the username and password matches authentication
        
        import socket
        import bcrypt                                      #a. To generate encrypted hash for username and password
        import json
        
        class OPC_SERVER_SECURITY:
            def __init__(self):                                                           
                self.server_socket = socket.socket()
                self.salt = bcrypt.gensalt()                #b. Encryption

            #def init_opc_server_security(self):            #c. Initialization                 #SEE POINT 1. Initialize Server socket
            #    self.server_socket.bind()                  #d. This will take in a parameter for this case, the ip address
            def init_opc_server_security(self, ip):                                                          
                self.server_socket.bind((ip, 5000))         #e. And 5000 is the port number
                self.server_socket.listen(1)                #f. Listen to 1 client

            def set_server_credentials(self, username, password):                               #SEE POINT 2. Set username and password of the server
                pwd = password.encode('utf-8')
                user = username.encode('utf-8')
                server_hash_pwd = bcrypt.hashpw(pwd, self.salt)
                server_hash_user = bcrypt.hashpw(user, self.salt)

                out_json = dict()
                out_json['username'] = server_hash_user.decode()
                out_json['password'] = server_hash_user.decode()
                out_json['salt'] = self.salt.decode()        #07. Save the salt that generates the password 
                #Note that this can be saved in database instead of a s JSON format
                #The file will be saved in the server and will not be shared in the client
                
                with open('credentials.json', 'w') as fp:
                    json.dump(out_json, fp, indent=4, ensure_ascii=False)

            def client_authentication(self):                                                      #SEE POINT 3. Client authentication
                config_file = open('credentials.json')  
                config_data = json.load(config_file)
                config_file.close()

                is_client_authenticated = False
                
                print("Waiting for client...")
                conn, address = self.server_socket.accept()
                while True:                                                                        #SEE POINT 4. Check the username and password matches authentication
                    recvd_data = conn.recv(1024).decode()
                    recvd_data = recvd_data.split(",")                        #g. Splits username and password into this format (str = "username, password")
                    user = recvd_data[0]                                      #h. Then this will assign the username as index 0
                    pwd = recvd_data[1]                                       #i. This will assign the password as index 1
                    password = pwd.encode('utf-8')
                    username = user.encode('utf-8')
                    saved_salt = config_data['salt'].encode('utf-8')
                    hashed_pwd = bcrypt.hashpw(password, saved_salt).decode()
                    hashed_user = bcrypt.hashpw(username, saved_salt).decode()

                    if hashed_user == config_data['username'] and hashed_pwd == config_data['password']:
                        conn.send("Success".encode())                          #j. If username and pwd matches, then send success message
                        is_client_authenticated = True                         #k. Set the authentication as True
                        break
                    else:
                        conn.send("Failure".encode())
                        is_client_authenticated = False
                        break
                
                if is_client_authenticated:
                    print("Server access granted")
                    return True
                else:
                    print("Server access denied")
                    return False


    Authentication for Client's side
    ////////////////////////////////////////////////////
    Server.py (Part 2) - Server side
        from opcua import server
        import time
        from random import randint
        from opc_server_security import OPC_SERVER_SECURITY                   //01. Import Opc Server Security
        
        opc_server_security = OPC_SERVER_SECURITY()                           //02. Define
        server = Server()
        url = "opc.tcp://192.168.0.102:4841"
        server.set_endpoint(url)
        
        name = "OPC UA SIMULATION SERVER"
        add_space = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(add_space, "PARAMETERS")
        
        temp = param.add_variable(add_space, "Temperature", 0)
        temp.set_writable()
        server.start()
        print("Server started at {}".format(url))
        
        opc_server.init_opc_server_security('192.168.0.102')                   //03a. Initialize
        opc_server.set_server_credentials('admin', 'qwerty@123')               //03b. Initialize
        
        while True:
            
            res = opc_server.client_authentication()                           //04. Check authentication
            while res:                                                         //05. While authentication is true
                temperature = randint(10, 50)
                temp.set_value(temperature)                
            
            #temperature = randint(10, 50)                                     //06. Transferred into the authentication while loop
            #temp.set_value(temperature)
            time.sleep(1)









