//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OPC-UA
IOT Overview https://www.youtube.com/watch?v=QRBMVngtVhA
Gateways:
    Siemens IOT2050 Overview: https://www.youtube.com/watch?v=gEe8FVaR2Zo
    Siemens IOT2050 SD Card image: https://support.industry.siemens.com/cs/document/109780231/simatic-iot2050-sd-card-example-image?dti=0&lc=en-WW
More Python Programs: https://github.com/Izaat/references/tree/main/Python%20References

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONTENTS
01. Installation
02. Server
03. Client
04. RPi OPC Server
05. RPi OPC Client
06. Changing Server values from client & controlling LEDs
07. OPC-UA Server Security with Username and Password
09. Designing IOT Dashboard for OPCUA Client, Server
10. Control S7-1200 with IoT2040 - node-red, ubidots

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
01. Installation

    Architecture
        Address Space >
            Node 1
                Var 1 (Temperature)
                Var 2 (Pressure)
                Var 3 (Time)
            Node 2
            Node 3

    Installation 
        FreeOPCUA
            https://github.com/FreeOpcUa/python-opcua
        Python 3.5 required
        Go to Python installation directory
        Enter 'scripts' folder
        C:\>Python3.5\Scripts>pip3 install freeopcua
        C:\>Python3.5\Scripts>pip3 install cryptography
        

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
02. Server

    Write a simple server code for OPC UA
    Create a new project in VSCode with Python 3.5
    Name this project "OPCUAServer"
    Under the project tree, create a new file and name this file "server.py"

    Server.py (Skeleton)
        from opcua import Server
        
        server = Server()
        url = "opc.tcp://192.168.0.8:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SIMULATION_SERVER"
        addspace = server.register_namespace(name)

        node = server.get_objects_node()                            //Assign root node
        
        Param = node.add_object(addspace, "Parameters")

        Temp = Param.add_variable(addspace, "Temperature", 0)  //Add variable, assign addspace, name it temperature, assign initial value of 0
        Press = Param.add_variable(addspace, "Pressure", 0)  //Add variable, assign addspace, name it pressure, assign initial value of 0
        Time = Param.add_variable(addspace, "Time", 0)  //Add variable, assign addspace, name it time, assign initial value of 0

        Temp.set_writable()                                  //Set variable as writable
        Press.set_writable()                                 //Set variable as writable
        Time.set_writable()                                  //Set variable as writable

        server.start()
        print("Server started at {}".format(url))


    Server.py (CODE)
        from opcua import Server
        from random import randint                           //Importing random to inject random values into while loop
        import datetime                                      //Importing time to inject current date and time into while loop
        import time                                          //Importing time for the time delay in while loop
        
        server = Server()
        url = "opc.tcp://192.168.0.8:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SIMULATION_SERVER"
        addspace = server.register_namespace(name)

        node = server.get_objects_node()        
        
        Param = node.add_object(addspace, "Parameters")

        Temp = Param.add_variable(addspace, "Temperature", 0)  
        Press = Param.add_variable(addspace, "Pressure", 0) 
        Time = Param.add_variable(addspace, "Time", 0) 

        Temp.set_writable()            
        Press.set_writable()                     
        Time.set_writable()                          

        server.start()
        print("Server started at {}".format(url))

        while True:                                             //Assigning random values to Temp, Press and Time
            Temperature = randint(10, 50)                       //Generates random value from 10 to 50
            Pressure = randint(200, 999)
            TIME = datetime.datetime.now()

            print(Temperature, Pressure, TIME)

            Temp.set_value(Temperature)
            Press.set_value(Pressure)
            Time.set_value(TIME)

            time.sleep(2)                                       //Delay for 2 seconds


    Display:
        12 906 2021-07-23 12:00:25.123465
        where 
            12 is temperature,
            906 is pressure
            and the reset is time
            Note: the values will keep on generating

    NOTE: For more simulation code, Google for "opc ua simulation server"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
03. Client

    Writing a client code to write into the server
    Using UAExpert to connect to server
        https://www.unified-automation.com/products/development-tools/uaexpert.html
    Download and install the free UAExpert software
    Once installed, run the server code from Topic 2
    Start UAExpert
    Create a new project folder and name this folder as "OPCUAClient"
    Create a new file and name this file as "client.py"
        ../OPCUAClient/client.py
        Note that ../OPCUAServer shares the same parent folder as ../OPCUAClient
    
    UAExpert Software
        In main toolbar, click on the "+" icon to add server
        Add server window will appear
            Open "Advanced" tab
            Server Information section
                Endpoint Url: opc.tcp://192.168.0.8:4840
        In Project Panel (Left hand side panel)
            Project > Servers > Empty server >
                Right click > Click on "Connect"
                A folder tree will appear in the Address Space Panel 
        Address Space
            Root > Objects > Parameters >
                Pressure
                Temperature
                Time
            Drag and drop all the 3 subtrees (Pressure, Temperature, Time) into the Main viewport "Data Access View" tab
            Take note of the Node IDs for the 3 variables
                Pressure: NS2 |Numeric| 3
                Temperature: NS2 |Numeric| 2
                Time: NS2 |Numeric| 4

    client.py
        from opcua import Client
        import time
        
        url = "opc.tcp://192.168.0.8:4840"        
        client = Client(url)
        client.connect()
        print("Client connected")
        
        while True:
            Temp = client.get_node("ns=2;i=2")
            Temperature = Temp.get_value()
            print(Temperature)

            Press = client.get_node("ns=2;i=3")
            Pressure = Press.get_value()
            print(Pressure)

            TIME = client.get_node("ns=2;i=4")
            TIME_Value = TIME.get_value()
            print(TIME_Value)

            time.sleep(1)

    Run client.py and compare with server.py
    Both values on server.py and client.py should be in sync


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
04. RPi OPC Server

    Using RPi as server
    Connect PC to RPi via ethernet
    Use VNC Weaver software to connect to RPi and boot up RPi
    Enter RPi terminal
        Update: sudo apt-get update
        Install libraries: sudo apt-get install libxml2-dev libxmlsec1-dev libffi-dev
        Install cryptography: sudo pip3 install cryptography
        Install FreeOPCUA: sudo pip3 install freeopcua
        Once everything is installed, run python
        Run python: python3
            >>> from opcua import Client
            Note: If it returns ">>>", then installation completed
        Exit python: >>> exit
        Check IP Address: ifconfig
            Take note of the "eth0" IP Address 
            Rpi: inet 169.254.1.93 netmask 255.255.0.0
            PC: eth0 > 169.254.1.93
        Copy paste server.py into RPi 
            Change the IP address to eth0 IP address
            Check: sudo nano server.py
                //url = "opc.tcp://192.168.0.8:4840"     //Old IP
                //url = "opc.tcp://169.254.1.93"           //New IP
        Close server.py editor
        Run server.py: python3 server.py
        Once the program starts, open UAExpert in PC
        
    UAExpert
        In main toolbar, click on '+' to add a server
        In Add Server window, open Advanced Tab
        In Server information section, change the endpoint url
            Endpoint url: "opc.tcp://169.254.1.93"
            Click OK
        In Project Panel, Right click on empty server
            Left Hand Panel > Project Tree > Project > Servers > Empty Server
            Right click and select 'Connect'
        Drag and drop the Parameter > Variables into the Data Access View tab

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
05. RPi OPC Client
    
    Use VNC Viewer to view RPi
    Using RPi as Client
        Install simple UI-Client application to RPi to view the parameters in RPi
            sudo apt-get install python3-pyqt5
        Install OPCUA Client application
            sudo pip3 install opcua-client
    In Windows, run server.py
        The IP Address is eth0 - ref to Topic 3
    In RPi terminal, start client
        opcua-client
        An OPCUA Client window will open
    OPCUA Client window
        Change the "localhost" to IP Address
        IP Address: opc.tcp://192.168.0.8:4840
        Click on Connect
        The node tree will appear in the list
        Root > Objects > Parameters >
            Pressure
            Temperature
            Time
        The updated values will appear in the Attributes section 
            Highlight the Parameters
            Attribute Section > Attribute > Value > Value
            Click on Refresh to see the updates

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
06. Changing Server values from client & controlling LEDs

    Change Server's values and variables from the Client
    After retrieving the Server data, LEDs will controlled
    Server will be hosted on RPi and with LED connected
    Client will be the PC
    
    PART 1
    /////////////////////////////////////////
    /////////////////////////////////////////
    Start Thonny Python IDE in Rpi
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10)    //Add 10 to the variable and this value will be changed from Client side
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)           //Set pin 18 as output

        while True:
            t = var.get_value()                    //Get the value "10" from variable
            print("Value is {}".format(t))    
            time.sleep(1)

    Start VSCode and create a python file
    Remember to install the components to the project
    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")
        print("Initial value: {}".format(var.get_value()))

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "10"
    Start client code
        "10" will be printed out in the console


    PART 2
    /////////////////////////////////////////
    /////////////////////////////////////////
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10) 
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)        

        while True:
            t = var.get_value()         
            print("Value is {}".format(t))    
            time.sleep(1)

    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")
        print("Initial value: {}".format(var.get_value())) 
        
        var.set_value(0)                                                                  //This will change the value in server

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "10"
    Start client code
        "10" will be printed out in the console
        But 0 will be printed out in server side
        Change value from 0 to 1 and run the client again
        This time 0 will be printed out as initial value and 1 will be printed out in server side

    PART 3 (Controlling the LED from the client)
    /////////////////////////////////////////
    /////////////////////////////////////////
    server.py
        from opcua import Server
        import RPi.GPIO as GPIO
        import time

        server = Server()
        url = "opc.tcp://192.168.0.106:4840"
        server.set_endpoint(url)
        
        name = "OPCUA_SERVER"
        addspace = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(addspace, "parameters")
        
        var = param.add_variable(addspace, "VARIABLE", 10) 
        var.set_writable()
        
        server.start()
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(18, GPIO.OUT)        

        while True:
            t = var.get_value()         
            //print("Value is {}".format(t))    
            if t == 1:
                GPIO.output(18, GPIO.HIGH)
                print("LED is ON")
            elif t == 0:
                GPIO.output(18, GPIO.LOW)
                print("LED is OFF")                
            time.sleep(1)

    clientApp.py
        from opcua import Client
        
        url = "opc.tcp://192.168.0.106:4840"
        client = Client(url)
        client.connect()

        var = client.get_node("ns=2;i=2")        
        var.set_value(0)                                    //This will control the LED, 1=ON, 0=OFF

    Start the server code
        sudo python3 server.py
        Note: The terminal will keep on printing "LED IS ON"
    Start client code
        Change the "var.set_value" to 1 or 0 and then run code 
        This will control the LED


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
07. OPC-UA Server Security with Username and Password
    
    Adding Username and Password to access Server
    Generic OPC UA Connection
        Server  <------>  Client
    OPC UA with Security Layer
        Server <----> Security Layer (Server) <----> Security Layer (Client) <----> Client

    ////////////////////////////////////////////////////
    server.py (Part 1) - Server Side
        from opcua import server
        import time
        from random import randint
        
        server = Server()
        url = "opc.tcp://192.168.0.102:4841"
        server.set_endpoint(url)
        
        name = "OPC UA SIMULATION SERVER"
        add_space = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(add_space, "PARAMETERS")
        
        temp = param.add_variable(add_space, "Temperature", 0)
        temp.set_writable()
        server.start()
        print("Server started at {}".format(url))

        while True:
            temperature = randint(10, 50)
            temp.set_value(temperature)
            time.sleep(1)
            
    ////////////////////////////////////////////////////
    client.py - Client Side
        from opcua import Client
        import time
        
        url = "opc.tcp://192.168.0.102:4841"
        client = Client(url)
        client.connect()
        
        while True:
            temp = client.get_node("ns=2;i=2")
            temp_value = temp.get_value()
            print("Temperature is {}".format(temp_value))
            time.sleep(1)
            
    ////////////////////////////////////////////////////
    opc_server_security.py - Server Side
        #1. Initialize Server socket
        #2. Set username and password of the server
        #3. Client authentication
        #4. Check the username and password matches authentication
        
        import socket
        import bcrypt                                      #a. To generate encrypted hash for username and password
        import json
        
        class OPC_SERVER_SECURITY:
            def __init__(self):                                                           
                self.server_socket = socket.socket()
                self.salt = bcrypt.gensalt()                #b. Encryption

            #def init_opc_server_security(self):            #c. Initialization                 #SEE POINT 1. Initialize Server socket
            #    self.server_socket.bind()                  #d. This will take in a parameter for this case, the ip address
            def init_opc_server_security(self, ip):                                                          
                self.server_socket.bind((ip, 5000))         #e. And 5000 is the port number
                self.server_socket.listen(1)                #f. Listen to 1 client

            def set_server_credentials(self, username, password):                               #SEE POINT 2. Set username and password of the server
                pwd = password.encode('utf-8')
                user = username.encode('utf-8')
                server_hash_pwd = bcrypt.hashpw(pwd, self.salt)
                server_hash_user = bcrypt.hashpw(user, self.salt)

                out_json = dict()
                out_json['username'] = server_hash_user.decode()
                out_json['password'] = server_hash_user.decode()
                out_json['salt'] = self.salt.decode()        #07. Save the salt that generates the password 
                #Note that this can be saved in database instead of a s JSON format
                #The file will be saved in the server and will not be shared in the client
                
                with open('credentials.json', 'w') as fp:
                    json.dump(out_json, fp, indent=4, ensure_ascii=False)

            def client_authentication(self):                                                      #SEE POINT 3. Client authentication
                config_file = open('credentials.json')  
                config_data = json.load(config_file)
                config_file.close()

                is_client_authenticated = False
                
                print("Waiting for client...")
                conn, address = self.server_socket.accept()
                while True:                                                                        #SEE POINT 4. Check the username and password matches authentication
                    recvd_data = conn.recv(1024).decode()
                    recvd_data = recvd_data.split(",")                        #g. Splits username and password into this format (str = "username, password")
                    user = recvd_data[0]                                      #h. Then this will assign the username as index 0
                    pwd = recvd_data[1]                                       #i. This will assign the password as index 1
                    password = pwd.encode('utf-8')
                    username = user.encode('utf-8')
                    saved_salt = config_data['salt'].encode('utf-8')
                    hashed_pwd = bcrypt.hashpw(password, saved_salt).decode()
                    hashed_user = bcrypt.hashpw(username, saved_salt).decode()

                    if hashed_user == config_data['username'] and hashed_pwd == config_data['password']:
                        conn.send("Success".encode())                          #j. If username and pwd matches, then send success message
                        is_client_authenticated = True                         #k. Set the authentication as True
                        break
                    else:
                        conn.send("Failure".encode())
                        is_client_authenticated = False
                        break
                
                if is_client_authenticated:
                    print("Server access granted")
                    return True
                else:
                    print("Server access denied")
                    return False


    Authentication for Client's side
    ////////////////////////////////////////////////////
    server.py (Part 2) - Server side
        from opcua import server
        import time
        from random import randint
        from opc_server_security import OPC_SERVER_SECURITY                   //01. Import Opc Server Security
        
        opc_server_security = OPC_SERVER_SECURITY()                           //02. Define
        server = Server()
        url = "opc.tcp://192.168.0.102:4841"
        server.set_endpoint(url)
        
        name = "OPC UA SIMULATION SERVER"
        add_space = server.register_namespace(name)
        
        node = server.get_objects_node()
        param = node.add_object(add_space, "PARAMETERS")
        
        temp = param.add_variable(add_space, "Temperature", 0)
        temp.set_writable()
        server.start()
        print("Server started at {}".format(url))
        
        opc_server.init_opc_server_security('192.168.0.102')                   //03a. Initialize
        opc_server.set_server_credentials('admin', 'qwerty@123')               //03b. Initialize
        
        while True:
            
            res = opc_server.client_authentication()                           //04. Check authentication
            while res:                                                         //05. While authentication is true
                temperature = randint(10, 50)
                temp.set_value(temperature)                
            
            #temperature = randint(10, 50)                                     //06. Transferred into the authentication while loop
            #temp.set_value(temperature)
            time.sleep(1)


    ////////////////////////////////////////////////////
    opc_client_security.py - Client side, Process will be similar to Server authentication
        import socket
        import bcrypt
        
        class OPC_CLIENT_SECURITY:
            def __init__(self):
                self.client_socket = socket.socket()
            
            def init_opc_client_security(self, server_ip):
                self.client_socket.connect((server_ip, 5000))
            
            def get_opc_server_access(self, credentials):
                print("Regquesting server access....")
                self.client_socket.send(credentials.encode())
                result = self.client_socket.recv(1024).decode()
                
                if result == "Success":
                    print("Server access granted")
                    return True
                elif result == "Failure"
                    print("Server access denied")
                    return False
                    
    ////////////////////////////////////////////////////
    client.py (Part 2) - Client Side
        from opcua import Client
        import time
        from opc_client_security import OPC_SERVER_SECURITY                   //01. Import Opc Server Security
        
        opc_client = OPC_CLIENT_SECURITY()                                    //02. Define
        opc_client.init_opc_client_security('192.168.0.102')                  //03. Initialize
        credentials = 'admin, qwerty@123'                                     //04. Set credentials
        
        while res: 
            url = "opc.tcp://192.168.0.102:4841"
            client = Client(url)
            client.connect()
            
            while True:
                temp = client.get_node("ns=2;i=2")
                temp_value = temp.get_value()
                print("Temperature is {}".format(temp_value))
                time.sleep(1)
        
        //url = "opc.tcp://192.168.0.102:4841"                                  //05. Wrap by the authentication while loop
        //client = Client(url)
        //client.connect()
        //
        //while True:
        //    temp = client.get_node("ns=2;i=2")
        //    temp_value = temp.get_value()
        //    print("Temperature is {}".format(temp_value))
        //    time.sleep(1)
        
        

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
09. Designing IOT Dashboard for OPCUA Client, Server
    
    Recap:
        Drive:\Project Folder\>
            opcua_client.py
            opcua_server.py
    Run opcua_server.py
    Create another file in the Project Folder and name this "opcua_client_iot.py" 
    This file will be a simple client python file to read the temperature and pressure values from the server
    Once created, then run the flle
    Check if the readings of both client file and server files are in sync
    If connections are good, edit the client file to be able to linkn to the IOT Dashboard
        Ref: https://thingsboard.io
        Use community Edition and start a Live Demo version
        User Dashboard > Devices > Add Device > Add New Device
            Just add a name to Device Details section and click Add
            This will then bring back to the device list view
            Double click on the device name
            Click on "Copy Access Token"
                Write down the access token somewhere
        User Dashboard > Dashboards  > Add New Dashboard > Create new dashboard
            Just add a name to Dashboard and click Add
        In VSCode, Install "paho-mqtt" (MQTT client class) package to Python (See Code Part 2)
        Once client code is defined, run client program
    Head back to Thingsboard > Devices > Device Details > Latest Telemetry Tab
        Pressure and Temperature values will appear   
    Creating Dashboard
        Pressure Gauge
            Under Thingsboard > Devices > Click on Project > Device Details > Latest Telemetry Tab > Check mark the Pressure > Show on Widget > 
            In Current Bundle, Click on Cards drop down menu and select "Analog Gauges" > Add to Dashboard
                Select existing dashboard: Dashboard name
                Click Add
        Temperature Gauge    
            Under Thingsboard > Devices > Click on Project > Device Details > Latest Telemetry Tab > Check mark the Temperature > Show on Widget > 
            In Current Bundle, Click on Cards drop down menu and select "Analog Gauges" > Add to Dashboard            
                Select existing dashboard: Dashboard name
                Click Add
        Dashboard Widget Design/Editor
            Under Thingsboard > Dashboards > Select the current project > Open Dashboard
            Here, the widgets can be configured under settings tab and advanced tab
        Dashboard - Set Private/Public
            Set Dashboard as Public
                Under Thingsboard > Devices > Click on Project > Device Details > Make Device Public
            URL
                Under Thingsboard > Dashboards > Select the current project > Dashboard Details > Make Dashboard Public
                Copy the URL given

    opcua_client_iot.py (Skeleton)
        from opcua import Client
        import time
        url = "opc.tcp://192.168.0.102:4840"
        client = Client(url)
        client.connect()
        print("OPC UA Client connected")
        
        while True:
            temp = client.get_node("ns=2;i=2")
            press = client.get_node("ns=2;i=3")
            temperature = temp.get_value()
            pressure = press.get_value()
            print(temperature, pressure)
            time.sleep(2)
            
    opcua_client_iot.py (IOT Dashboard link) - Code Part 2
        from opcua import Client
        import time
        import paho.mqtt.client as mqtt                                       //01. Import MQTT
        import json                                                                        //02. Import JSON
        
        url = "opc.tcp://192.168.0.102:4840"
        client = Client(url)
        client.connect()
        print("OPC UA Client connected")
        
        iot_hub = "demo.thingsboard.io"                                       //03. Define iot platform
        port = 1883
        username = "THE_COPIED_ACCESS_TOKEN"
        password = ""
        topic = "v/devices/me/telemetry"
        
        iot_hub_client = mqtt.Client()                                             //04. Connect to IOT hub client
        iot_hub_client.username_pw_set(username, password)
        iot_hub_client.connect(iot_hub, port)
        print("Connected to IOT Hub")
        
        data = dict()                                                                        //05. Create data dictionary to store value from server
        while True:
            temp = client.get_node("ns=2;i=2")                              //06. Retrieve value from server
            press = client.get_node("ns=2;i=3")
            temperature = temp.get_value()
            pressure = press.get_value()
            print(temperature, pressure)
            
            data['Temperature'] = int(temperature)                          //07. Dumps value into dictionary                   
            data['Pressure'] = int(pressure)
            data_out = json.dumps(data)
            
            iot_hub_client.publish(topic, data_out, 0)                     //08. Uploads the data from dictionary and into IOT client
            
            time.sleep(2)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
10. Control S7-1200 with IoT2040 - node-red, ubidots
    
    Connect IOT2040 X1P1 port to the PC with Ethernet cable via a router (192.168.200.1)
    Initialize: PuTTY
        Host Name: 192.168.200.1:22
        Connection Type: SSH
        Click "Open"
        PuTTY Terminal:
            login as: root
            root@iot2000:# iot2000setup
            This will open the IOT2000 Boot loader
            
            IOT2000 Boot Loader
                Software > Manage Autostart Options > Check the 2 boxes
                    [*] Auto Start node-red
                    [*] SSH Server Enabled
                    [  ] Auto Start Mosquitto Broker
                    Click on "Done" button and exit the Boot Loader
                
            Install S7 Node 
                Connect IOT2040 X2P1 to internet and configure DHCP
                root@iot2000:# cd /usr/lib/node_modules
                root@iot2000:/usr/lib/node_modules# install node-red-contrib-s7@2.0.2
                Once installed successfully, then reboot
                    root@iot2000:/usr/lib/node_modules# reboot
        Close PuTTY and then restart PuTTY

    PuTTY (Reconnect after reboot)
        Host Name: 192.168.200.1:22
        Connection Type: SSH
        Click "Open"
        PuTTY Terminal:
            login as: root

    Open Node Red to check
        In PC, Open Internet Browser
        URL: 192.168.200.1:1880
            
    Install Ubidots (PuTTY)
        root@iot2000:# cd /usr/lib/node_modules
        root@iot2000:/usr/lib/node_modules# npm install ubidots-nodered
            Once installed successfully, then reboot
                root@iot2000:/usr/lib/node_modules# reboot

    Open Node Red again to check
        In PC, Open Internet Browser
        URL: 192.168.200.1:1880
        Under filter nodes, "ubidots input", "ubidots out", "s7 in" and "s7 out" will be available

    TIA Portal
        S7-1200: CPU1212C > 6ES7 212-1AE40-0XB0
        Create a new project
        Properties Tab (Bottom Screen) > General >
            Ethernet Addresses:
                IP: 192.168.0.50                                                      //Take note of the Address since PLC is connected to the router
                Subnet: 255.255.255.0
            Protection Security > Connection Mechanisms >
                PUT/GET: Check the box
        Program Block
            Add new block > Data Block >
                Name: Data
                Type: Global DB
                Number: Auto
            Right Click on the newly created Data Block > Select Properties 
            Data Properties Window > General Tab > Attributes >
                Only store load memory: uncheck
                Data block write protected in device: Uncheck
                Optimized block access: Uncheck
                DB accessible from OPC UA: Checked
                Click OK
            Open DB1
                Add in a new Data
                | Name   | Data Type | Acc    | Write  | Visible | ...
                | Data_1 | Bool      | Ticked | Ticked | Ticked  | ...
            Compile
            Open OB1
                Network 1:
                    |
                    |  %DB1.DBX0.0                 %Q0.0   | 
                    | "Data".Data_1               "Tag 1"  |
                    |------| |----------------------( )----|
            Compile again, Save and download to PLC

    Ubidots
        URL: https://industrial.ubidots.com/app/devices/
        Log in 
        Menu > Devices > Devices > Add Devices > Select Black Device
            Device Name:  S7-1200
            Device Label: s7-1200
            New device (S7-1200) will appear under Devices list
        Click on the new device (S7-1200)
            Add Variable and name this "Data_1"
            Click on this Variable block to check
        Menu > Data > Dashboards
            Add New Widget
            Add Switch > Add Variables > 
                Select S7-1200 > Select Data_1
                Click OK
            NOTE: 
                Take note of the Values
                Min: 0
                Max: 1 
                Off Message: Off 
                On Message: On
                Click OK and ON/OFF button will appear in the Dashboard
            Get Token:
                Account > API Credentials > Tokens > Copy the Token value 
                This will be pasted into Node Red "ubidots input"

    Node Red
        Drag and drop "ubidots input" to panel
            Click on node and paste Ubidots token into Token section
            Device: s7-1200 
                Must correspond to Ubidots API Labels
                To check, head back to Ubidots website > Devices > S7-1200 > API Label
            Variable: data_1
                Must correspond to Ubidots API Labels                
                To check, head back to Ubidots website > Devices >  S7-1200 > Data_1 Variable > API Label
            Click on "Done"
        Drag and drop "function" to panel
            Link the output of "ubidots input" to the input of "function"
            Click on function node to open properties tab
                Function:
                    var A=msg.payload.value;
                    msg.payload=A;
                    return msg;
                Leave the name blank and click on Done
        Drag and drop "debug" to panel
            Link the output of "function" to the input of "debug"  //Notice that the note text changes from "debug" to "msg.payload"
            Click on "Deploy" button on top right corner of screen
            Click on the node and open the debug tab
                Take note that the number is 0

    Checking connectivity
        Ubidots website > Main Menu > Data > Dashboards > Click on ON
        Node Red > Debug Tab > 
            Note the number change to 1 whenever Ubidots dashboard switch is ON.
            Number changes to 0 whenever Ubidots dashboard switch is OFF
            
    Using numbers as Boolean
        In Node Red, add a function (change node)
        Link the output of existing function node to the input of the change node //Notice that the node text changes from "function" to "set msg.payload"
        Edit the node > Rules >
            Change 1:
                Change | msg.payload
                Search for : Click to select "number" and add in the value "0"
                Replace with : Click to select "boolean" and add in the value "false"
            Change 2:
                Change | msg.payload
                Search for : Click to select "number" and add in the value "1"
                Replace with : Click to select "boolean" and add in the value "true"
            Click on Done
        Add in another debug node and link the node to change node
        Click on deploy
        In Ubidots Dashboard, whenever the switch is ON, the value in Node Red will be True

    Using Boolean to control PLC
        In Node Red, add an output node (s7 out)
        Link the output of "change" node to input of "s7 out" node
        Click on the s7 node - Click on "add new s7 endpoint" 
            Connection Tab
                Transpost: Ethernet (ISO on TCP)
                Address: 192.168.0.50:102 
                Rack: 0
                Slot: 1                             //In TIA Portal Device View, just see where the CPU sits. Slot number is above the Virtual PLC
                Cycle Time: 500 ms
                Timeout: 1500 ms 
            Variables Tab
                Address: DB1, X0.0         //X0.0 is the offset number in DB1 list
                Name: Data_1
                Click on Add and another popup will appear
                    PLC: 192.168.0.50:102@0:1
                    Variable: Data_1
                    Click on Done
            Click on Deploy
        In Ubidots Dashboard, whenever the switch is ON, the value in PLC OB1 will be True

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[End]





