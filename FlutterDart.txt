import 'dart:io'; //something like iostream

NOTE: everything in dart is object, the sub of class
Run dart file by typing in "dart filename.dart" in the console

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONTENTS//
01. ORIENTATE VIRTUAL PHONE TO LANDSCAPE
02. OUTPUT, STRINGS AND PRINTING
03. COMMENTING
04. DECLARATIONS
05. MULTILINE STRINGS
06. CONVERTING STRING TO INTEGER AND BACK
07. DEFINING A CONSTANT
08. STANDARD OPERATORS
09. SHORTCUT
10. ADD AND REMOVE FROM ARRAY
11. CLASSES
12. CLASSES WITH PRIVATE INSTANCE / SECURITY
13. CLASS INHERITENCE
14. NULL AWARE OPERATOR - ?. , ?? , ??=
15. TERNARY OPERATOR  
16. TYPE TEST OPERATOR
17. CONDITIONAL STATEMENT
18. LOOP STATEMENT
19. COLLECTION CLASSES [LIST, SET, MAP]
20. FUNCTIONS [Anonymous, Positional, Named, Hybrid, Optional]
21. CONSTRUCTOR [Default Constructor, Named Constructor, Class Inheritence]


01 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ORIENTATE VIRTUAL PHONE TO LANDSCAPE
//main.dart//
void main(){
    SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft]); //You can use .landscapeRight doesnt matter
}

02 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//OUTPUT, STRINGS AND PRINTING
main(){
    stdout.writeIn('What is your name: ');
    String name = stdin.readLineSync(); //box to type in your name
    print('My name is $name'); //Outputs my name is whatever
}

03 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//COMMENTING
//In-line comment
/*Block comment*/
///Documentation


04 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//DECLARATIONS
Strongly type Programming Lang. Variable is known at compile time. (C++, Java, Swift)
Dynamic type programming Lang. Variable is know at run time. (Python, Ruby, Javascript)

//strongly type//
int, double, string, bool. //var can be any of these 4 declarations
//Dynamic type//
dynamic


//calling the variables is similar to PHP $variable


05 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//MULTILINE STRINGS
    main(){
        var s2 = """This is also
        multiline-sting.""";
        print(s2);
    } //Outputs the multiline. Shortcut to writing a string without using <br>


06 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONVERTING STRING TO INTEGER AND BACK
    main(){
        var one = int.parse('1');
        assert(one == 1); //String to Int
        
        var oneDotOne = double.parse('1.1');
        assert(oneDotOne == 1); //String to double
        NOTE: cannot convert letters andwords into int or double
        
        String oneAsString = 1.toString();
        assert(oneAsString == '1'); //int to string
        
        String piAsString = 3.14.toStringAsFixed(2); //'2' means 2 floating point number or 2 decimal places
        assert(piAsString == '3.14'); //double to String
        
    }



07 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//DEFINING A CONST
    main(){
        const aConstNum = 0; // int constant
        const aConstBool = true; //bool constant
        const aConstString = 'hello'; //string constant
        
        print(aConstNum); //output 0
        print(aConstBool); //output true
        print(aConstString); //output hello
        
        print(aConstNum.runtimeType); //output int
        print(aConstBool.runtimeType); //output bool
        print(aConstString.runtimeType); //output string
        
        //runtimeType is compile during runtime
    }


08 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//STANDARD OPERATORS
    void main() {
        int num = 10 + 22;
        num = num - 2;
        
        print(num);
        
        num = num % 5; //remainder
        print(num);    
        
        //relational 
        num (num == 0) {    // ==, !=, >=, <=
            print('Zero');
        }
        
        num = 100;
        num *= 2;       //shortcut 100*2
        print(num);

        //unary operator
        ++num; //pre-increment
        num++; //post-increment
        num += 1; //similar to ++
        num -= 1; //similar to --
        print(num);
        
        //logical && and logical ||
        if (num > 200 && num < 203){
            print('200 to 202');
        }
        
    }


09 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//SHORTCUT
    void main(){
        String greet = greeting();
        print(greet);
    }
    
    //instead of doing this
    String greeting(){
        return 'hello';
    }
    
    //do this instead
    String greeting() => 'hello';


10 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//ADD AND REMOVE FROM ARRAY
    void main(){
        List <String> names = ['one', 'two', 'three'];      //adding "<String>"  disables any other datatype like numbers to enter into the array
        
        names.add('four');          //output ['one', 'two', 'three', 'four']
        names.remove('five');   //output ['two', 'three', 'four']
        
        print(names);

    }

11 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASSES
    void main(){
        User userOne = User();
        print(userOne.name);       //output mario
        print(userOne.Age);         //output 25
        userOne.login();               //output user login    
        
    }

    class User {
        String username = 'mario';
        int age = 25;
           
        void login(){
            print ('user logged in');
        }
    }


12 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASSES WITH PRIVATE INSTANCE / SECURITY
    void main(){
        User userOne = User('luigi', 25);
        print(userOne.username);      //Output luigi
        
        User userTwo = User('mario', 30);
        print(userTwo.username);  //Output mario
        
    }

    class User {
        String username = 'mario';
        int age = 25;
        
        User(String username, int age){
            this.username = username;       // ... = username is the variable from the bracket User(String username, ...)
            this.age = age;
        }
        
    }


13 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASS INHERITENCE
    void main(){
        User userOne = User('luigi', 25);
        print(userOne.username);      //Output luigi
        
        User userTwo = User('mario', 30);
        print(userTwo.username);  //Output mario
        
        SuperUser userThree = SuperUser('yoshi', 20);
        print(userThree.username);  //output yoshi
        userThree.publish();        //output published update
        
    }

    class User {
        String username = 'mario';
        int age = 25;
        
        User(String username, int age){
            this.username = username;       // ... = username is the variable from the bracket User(String username, ...)
            this.age = age;
        }
        
    }
    
    class SuperUser extends User{
        SuperUser(String username, int age) : super(username, age)   //assigning zero argument constructor to the superclass
                                                                                                            //this modifies the value of the variable in User()
        //
        void publish() {
            print('published update');
        }
    }


14 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//NULL AWARE OPERATOR
    //(?.)
    If the variable/function is not defined, then output 'null'. 
    If contains value, then proceed
    Usually it'll output error messages if variable is not defined
        
        class Num {
            int num = 10;
        }   
        main() {
            var n = Num();
            int number;
            if (n != null){     // the entire if-function can be replaced with: number = n?.num;
                number = n.num;
            }      
            print(number); //Output 10 if everything is defined, 'null' if 'Num()' being removed from 'var n'
        }

    // (??)
    If the variable/function is not defined, this will output a value instead of null shown ablove
    Instead of,
        number = n?.num; //outputs value 'null' if 'Num()' being removed from 'var n'
    We use this,
        number = n?.num ?? 0;   //outputs value '0' if 'Num()' being removed from 'var n'


    //(??=)
    This statement adds in a default value the variable if the variable has no value in it
    This avoids program to crash if there is no value assigned to the variable.
    
        main(){
            int number;
            print(number ??= 100);
        }
        
    Output: value will be 100


15 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//TERNARY OPERATOR

    void main() {
        int x = 100;
        var result = x % 2 == 0 ? 'Even' : 'Odd';       //100 divide by 2, //if remainder is 0, print even. If remainder is not 0, print odd
        print(result);
    }


16 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//TYPE TEST OPERATOR
    void main(){
        var x = 100;
        if (x is int){
            print('integer'); //prints integer if x = 100, but if x = 100.00, it wont print integer as the variable is not defined as 'int'
        }
    }


17 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CONDITIONAL STATEMENT
    IF Statement
        void main() {
            int number = 100;
            
            if (number % 2 == 0) {
                print('Even');
            }
            else if (number % 3 == 0) {
                print('Odd');
            }
            else {
                print('Confused');
            }
        }
    
    SWITCH STATEMENT
        void main() {
            int number = 0;
            
            switch(number) {
                case 0:
                    print('Even');
                    break;
                case 1:
                    print('Odd');
                    break;
                default:
                    print('Confused');    
            }
        }


18 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOOP STATEMENT
    FOR
        void main () {
            for (var i = 1; i <= 10; ++i) {
                print(i);
            }
        }

    FOR-IN
        void main () {
            var numbers = [1,2,3];
            
            for (var n in numbers) {
                print(n);
            }
            
            for (var i = 0; i< numbers.length; ++i) {
                print(numbers[i]);
            }
            
        }
        
    FOR-EACH
        void main() {
            var numbers = [1, 2, 3];
            
            numbers.forEach( (n) => print(n) );
        }

    WHILE
        void main() {
            int num = 5;
            while (num > 0){    //Also see 'do' loop
                print(num);
                num -= 1;
            }
        } //prints out 5,4,3,2,1


19 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//COLLECTION CLASSES

    LIST //See Flutter topic 14.
        ///////////
        void main() {
            List names = ['Name01', 'Name02'];  //If 'List <String> names', then no other data types other than String can be used
            print (names[0]);       //Outputs Name01
            print(names.length); //Outputs 2
        }
        
        ///////////
        void main() {
            var names = ['Name01', 'Name02'];   //This automatically turns into String. If add in 10 and 10.01, it changes from String into object
            for (var n in names) {
                print(n);       //Name01, Name02
            }
        }
        ///////////
        void main() {
            List <String> names = ['Name01', 'Name02'];     //if "const ['Name01', 'Name02']" is used, nothing can be changed
            names[1] = 'Name03';        
            for (var n in names) {
                print(n);       //Name01, Name03
            }
        }
        ///////////
        void main() {
            List <String> names = ['Name01', 'Name02'];
            var names2 = [...names]; //the triple dots uses the original array, similar to javascript
            names[1] = 'Name03';        
            for (var n in names2) {
                print(n);       //Name01, Name02
            }
        }
    SET
        ///////////
        void main() {
            var variable1 = {};
            print(variable1.runtimeType);   //Output _InternalLinkedHashMap<dynamic, dynamic>
        }
        ///////////
        void main() {
            var variable1 = <String> {};
            print(variable1.runtimeType);   //Output _CompactLinkedHashSet<String>
        }
        ///////////
        void main() {
            Set <String> variable1 = {};
            print(variable1.runtimeType);   //Output _CompactLinkedHashSet<String>
        }

    MAP
        ///////////
        void main() {
            var variable1 = {
                //Key       :   Value
                'first'       :   'variable1',
                'second'  :   'variable2',
                'third'      :   'variable3',
                4             :   'variable4' 
            };
            print (variable1['third']);      //Output: variable3
            print (variable1[4]);              //Output: variable4
        }
        ///////////
        void main() {
            var variable1 = Map();
            variable1 ['first'] = 'Number1';
            print (variable1['first']);      //Output: Number1
        }
        ///////////
        void main() {
            var variable1 = {'first': 'Number1', 'second': 'Number2'};
            print (variable1['second']);      //Output: Number2
        }
        ///////////                                         -----Use for routing
        void main() {
            Map student = {'name': 'name01', 'age': 25};
            print (student['name']); //Outputs name01
        }


20 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//FUNCTIONS
    /////////////
    //Example 1
        void main() {
            showOutput(square(2.5));
        }
        dynamic square (var num) {      //dynamic can read any type of number value (float, int, double, num)
            return num*num;
        }
        void showOutput(var msg) {
            print msg;
        }   //Output: 4
    ///////////////
    //Anonymous function
        /////
        //Without anonymous
        main() {
            var list = ['var1', 'var2', 'var3'];
            list.forEach(printF);
        }
        void printF(item){
            print(item); 
        }
        Output: var1, var2, var3
        
        //////
        //With anonymous function       //A function without any name (see missing printF)
        main() {
            var list = ['var1', 'var2', 'var3'];
            list.forEach((item) {
                print(item);
            });
        }
        Output: var1, var2, var3

    /////////////////
    //Positional parameter argument
        void main() {
            print(sum(10, 20));
        }
        dynamic sum(var num1, var num2) => num1 + num2;     //Where num1 is 10 and num2 is 20           
    
    /////////////////
    //Named parameter argument
        void main() {
            print(sum (num1: 10, num2: 20) );
        }
        dynamic sum({var num1, var num2}) => num1 + num2;

     /////////////////
     //Hybrid of Positional and Named parameter
        void main() {
            print(sum (10, num2: 20) );
        }
        dynamic sum(var num1, {var num2}) => num1 + num2;

    /////////////////
     //Positional and Named parameter shortcut
        void main() {
            print(sum (10) );
            print(sum(10, num2: 20));
        }
        dynamic sum(var num1, {var num2}) => num1 + (num2 ?? 0);         //OR
        dynamic sum(var num1, {var num2=0}) => num1 + num2;              //Provides same function as the line above
        //Output: 10
        //Output: 30

    /////////////////
     //Make Positional as Optional parameter
        void main() {
            print(sum (10, 20) );
            print(sum(20));
        }        
        dynamic sum(var num1, [var num2]) => num1 + ( num2 ?? 0 );   
        //Output: 30
        //Output: 20

21 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
//CLASSES
    
    //Normal Method//////////////////////////////
        class Person {
            String name;
            int age;
            
            //method
            void showOutput() {
                print(name);
                print(age);
            }
        }
        void main() {
            //object
            Person person1 = Person();
            person1.name = 'Name';
            person1.age = 35;
            person1.showOutput();
        }
        Output: Name, 35

    //Constructor (Default)//////////////////////////
        class Person {
            String name;
            int age;
            
            Person(String name, [int age = 18]) {
                this.name = name;
                this.age = age;
            }
            
            //method
            void showOutput() {
                print(name);
                print(age);
            }
        }
        void main() {
            Person person1 = Person('Name'); //if adds the age value it will overwrite the age of 18
            person1.showOutput();
        }
        Output: Name, 18

    //Constructor (Default) Shortcut/////////////////
        class Person {
            String name;
            int age;
            
            Person(this.name, [this.age = 18]);
            
            //method
            void showOutput() {
                print(name);
                print(age);
            }
        }
        void main() {
            Person person1 = Person('Name1'); //if adds the age value it will overwrite the age of 18
            person1.showOutput();
            
            Person person2 = Person('Name2', 25)
            person2.showOutput();
        }
        Output: Name1, 18, Name2, 25
    
    //Named Constructor #1///////////////////////////
        class Person {
            String name;
            int age;
            
            Person(this.name, [this.age = 18]);
            
            //named constructor
            Person.guest() {                            //className.constructorName()
                name = 'Guest';
                age  = 18;
            }
            
            //method
            void showOutput() {
                print(name);
                print(age);
            }
        }
        void main() {
            Person person1 = Person('Name1'); //if adds the age value it will overwrite the age of 18
            person1.showOutput();
            
            Person person2 = Person('Name2', 25)
            person2.showOutput();
            
            var person3 = Person guest();
            person3.showOutput();
        }
        Output: Name1, 18, Name2, 25, Guest, 18

    //Named Constructor #2///////////////////////////
        class X {
            final name;                         
            static const int age = 10;   
            X(this.name);
        }
        main() {
            var x = X('Jack');
            print(x.name);
            
            //x.name = 'Jill';     //Changes name to Jill but "name" must be defined as "var" instead of "final". Or it will cause an error.
            //print(x.name);
            
            //print(x.age);       //can't call age because it is static, the only way to access 'age' is by calling the class
            print(X.age);          //Outputs 10
            
            var y = X('Jill');       //Outputs Jill
            print(y.name);
        }

    //Named Constructor #3///////////////////////////
        
        main() {
            final name = 'Jack';        //the name value can't be changed
            const age = 30;             //age value cant be changed
            
            print(name);
            print(age);
        }

    //Class Inheritence///////////////////////////
        class Vehicle {
            String model;
            int year;
            
            Vehicle(this.model, this.year) {
                print(this.model);
                print(this.year);
            }
            
            void showOutput() {
                print(model);                                                   //this.model can also be used here
                print(year);
            }
        }

        class Car extends Vehicle {
            double price;
            
            Car(String model, int year, this.price) : super(model, year);       //'super' calls the Vehicle Class for the value of model and year
            
            void showOutput() {
                super.showOutput();                                             //'super' calls the showOutput() from the Vehicle Class
                print(this.price);
            }
        }

        void main() {
            var car1 = Car('Accord', 2014, 150000);
            car1.showOutput();
        }
        //OUTPUT: Accord, 2014, Accord, 2014, 150000.0
























